name: EAS Build Android

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/android-build.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile (development, preview, production)'
        required: true
        default: 'preview'
        type: choice
        options:
          - development
          - preview
          - production

env:
  # Thiết lập biến môi trường toàn cục
  CACHE_LIFETIME_DAYS: 7
  YARN_NETWORK_TIMEOUT: 300000
  GRADLE_MEMORY: "24g"
  GRADLE_MAX_WORKERS: 14
  METRO_MEMORY: "8192"
  PERSISTENT_CACHE_PATH: "~/.eas-build-cache"

jobs:
  build:
    name: EAS Build Android
    runs-on: [google]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine build profile
        id: profile
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "name=${{ github.event.inputs.profile }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "name=production" >> $GITHUB_OUTPUT
          else
            echo "name=preview" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup build directories
        run: |
          mkdir -p $HOME/expo-tmp
          mkdir -p $HOME/eas-builds/working
          mkdir -p $HOME/eas-builds/artifacts
          mkdir -p $HOME/gradle-build-cache
          mkdir -p $HOME/.eas-build-cache
          
          # Tạo thư mục lưu trữ APK theo ngày
          BUILD_DATE=$(date +"%Y-%m-%d")
          STORAGE_DIR=$HOME/ksms-builds/$BUILD_DATE
          mkdir -p $STORAGE_DIR
          echo "STORAGE_DIR=$STORAGE_DIR" >> $GITHUB_ENV
          
          # Xóa dữ liệu build cũ
          rm -rf $HOME/eas-builds/working/*
          rm -rf $HOME/expo-tmp/*
          rm -rf $HOME/eas-builds/artifacts/*
          
          # Thiết lập và lưu biến môi trường
          echo "TMPDIR=$HOME/expo-tmp" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_WORKINGDIR=$HOME/eas-builds/working" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_ARTIFACTS_DIR=$HOME/eas-builds/artifacts" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_SKIP_CLEANUP=1" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV
          
          # Thiết lập biến môi trường để tận dụng tối đa phần cứng
          GRADLE_MEM="${GRADLE_MEMORY}"
          GRADLE_WORKERS="${GRADLE_MAX_WORKERS}"
          METRO_MEM="${METRO_MEMORY}"
          
          echo "GRADLE_OPTS=-Xmx$GRADLE_MEM -XX:MaxMetaspaceSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.jvmargs=-Xmx$GRADLE_MEM -Dorg.gradle.workers.max=$GRADLE_WORKERS -XX:+UseParallelGC" >> $GITHUB_ENV
          
          # Bỏ qua cảnh báo về ký tự $ trong định danh C++
          # Fix package versions for Metro
          yarn add metro@^0.81.0 metro-resolver@^0.81.0 metro-config@^0.81.0 --dev
          
          echo "CFLAGS=-Wno-dollar-in-identifier-extension" >> $GITHUB_ENV
      - name: Restore Yarn cache
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-cache-${{ runner.os }}-

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/android/**/build.gradle') }}
          restore-keys: |
            gradle-cache-${{ runner.os }}-

      - name: Restore EAS cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-cache
          key: eas-cache-${{ runner.os }}-${{ hashFiles('eas.json') }}
          restore-keys: |
            eas-cache-${{ runner.os }}-

       
      - name: Install dependencies # Đảm bảo 6 khoảng trắng
        run: | # Đảm bảo 8 khoảng trắng
           yarn config set network-timeout ${YARN_NETWORK_TIMEOUT}
           yarn install --frozen-lockfile --prefer-offline --network-timeout ${YARN_NETWORK_TIMEOUT} --non-interactive --cache-folder .yarn/cache

      - name: Clean Old Caches (Non-Persistent)
        run: |
          echo "Cleaning non-persistent caches older than ${CACHE_LIFETIME_DAYS} days..."
          # Clean old Gradle caches
          find ~/.gradle/caches -type f -atime +${CACHE_LIFETIME_DAYS} -delete || true
          # Clean old Metro bundler cache
          if [ -d "$HOME/expo-tmp/metro-cache" ]; then
            find $HOME/expo-tmp/metro-cache -type f -atime +${CACHE_LIFETIME_DAYS} -delete || true
          fi
          # Clean old EAS cache
          find ~/.eas-cli -type f -atime +${CACHE_LIFETIME_DAYS} -delete || true
      - name: Authenticate with Expo # Đảm bảo 6 khoảng trắng
        run: |
          if [ -n "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "Using EXPO_TOKEN for authentication."
            export EXPO_TOKEN="${{ secrets.EXPO_TOKEN }}"
            # Verify token is valid (optional but recommended)
            if ! npx expo whoami &> /dev/null; then
              echo "EXPO_TOKEN is invalid or expired."
              exit 1
            fi
          elif [ -n "${{ secrets.EXPO_USERNAME }}" ] && [ -n "${{ secrets.EXPO_PASSWORD }}" ]; then
            echo "Attempting login with EXPO_USERNAME and EXPO_PASSWORD."
            if ! npx expo login -u "${{ secrets.EXPO_USERNAME }}" -p "${{ secrets.EXPO_PASSWORD }}" --non-interactive; then
              echo "Expo login failed with username/password."
              exit 1
            fi
          else
            echo "Expo credentials (EXPO_TOKEN or EXPO_USERNAME/EXPO_PASSWORD) not found."
            exit 1
          fi
          echo "Expo authentication successful."

      - name: Create custom gradle.properties
        run: |
          # Tạo thư mục nếu không tồn tại
          mkdir -p android

          # Tạo hoặc cập nhật tệp gradle.properties để tận dụng tối đa phần cứng
          GRADLE_MEM="${GRADLE_MEMORY}"
          GRADLE_WORKERS="${GRADLE_MAX_WORKERS}"
          
          cat << EOF > android/gradle.properties
          # Cấu hình bộ nhớ cho Gradle (sử dụng ~40% RAM của máy chủ)
          org.gradle.jvmargs=-Xmx$GRADLE_MEM -XX:MaxMetaspaceSize=4g -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC # Bỏ -XX:+UseNUMA
          
          # Tối ưu hóa hiệu suất Gradle
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          org.gradle.workers.max=$GRADLE_WORKERS
          
          # Thời gian chờ mạng
          org.gradle.internal.http.connectionTimeout=120000
          org.gradle.internal.http.socketTimeout=120000
          
          # Tối ưu hóa biên dịch
          kotlin.incremental=true
          kotlin.incremental.useClasspathSnapshot=true
          
          # Cấu hình Android
          android.useAndroidX=true
          android.enableJetifier=true
          android.enableR8.fullMode=true
          android.enableDexingArtifactTransform.desugaring=true
          android.bundletool.enable.command.line.interface=true
          
          # Tối ưu hóa NDK
          android.buildTypes.release.ndk.debugSymbolLevel=FULL
          android.defaults.buildfeatures.buildconfig=true
          
          # Cấu hình NDK để bỏ qua cảnh báo và tối ưu hóa
          android.externalNativeBuild.cmake.arguments=-DCMAKE_CXX_FLAGS="-Wno-dollar-in-identifier-extension" -DCMAKE_C_FLAGS="-Wno-dollar-in-identifier-extension" -DCMAKE_BUILD_PARALLEL_LEVEL=$GRADLE_WORKERS # Bỏ -fopenmp
          
          # Cấu hình Metro bundler (React Native)
          reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
          
          # Cấu hình Hermes
          hermesEnabled=true
          EOF
          
          echo "Đã tạo/cập nhật android/gradle.properties"

      - name: Configure Metro Bundler
        run: |
          # Tối ưu hóa cấu hình Metro bundler
          METRO_MEM="${METRO_MEMORY}"
          WORKERS="${GRADLE_MAX_WORKERS}"
          
          cat << EOF > metro.config.js.tmp
          // Cấu hình tối ưu hóa cho Metro bundler
          const { getDefaultConfig } = require('@expo/metro-config');
          const defaultConfig = getDefaultConfig(__dirname);
          
          module.exports = {
            ...defaultConfig,
            maxWorkers: $WORKERS, // Sử dụng tối đa số lượng CPU
            transformer: {
              ...defaultConfig.transformer,
              minifierConfig: {
                compress: {
                  reduce_funcs: false, // Tăng tốc quá trình minify
                },
              },
              // Tăng tốc bundling
              unstable_disableModuleWrapping: true,
              // Bật cache biến đổi
              enableBabelRCLookup: false,
              // Chuẩn bị cho React Native 0.73+
              unstable_transformProfile: "hermes-stable",
            },
            // Tăng tốc độ giải quyết phụ thuộc
            resolver: {
              ...defaultConfig.resolver,
              useWatchman: true,
              disableHierarchicalLookup: true,
              enableGlobalPackages: false,
            },
            // Tăng hiệu suất cache
            cacheStores: [
              {
                type: "fs",
                options: {
                  root: "$HOME/expo-tmp/metro-cache",
                }
              }
            ],
            // maxWorkerMemoryUsage bị loại bỏ do gây cảnh báo và có thể không tương thích
          };
          EOF
          
          # Chỉ thay thế metro.config.js nếu tệp mới được tạo thành công
          if [ -f metro.config.js.tmp ]; then
            # Sao lưu tệp hiện tại nếu có
            if [ -f metro.config.js ]; then
              cp metro.config.js metro.config.js.bak
            fi
            mv metro.config.js.tmp metro.config.js
            echo "Đã cấu hình metro.config.js cho hiệu suất tối ưu"
            cat metro.config.js
          else
            echo "Không thể tạo tệp metro.config.js mới"
          fi

      - name: Create eas.json optimization
        run: |
          # Tạo tệp eas.json tạm thời với các tùy chọn tối ưu
          WORKERS="${GRADLE_MAX_WORKERS}"
          
          cat << EOF > eas.json.tmp
          {
            "build": {
              "development": {
                "developmentClient": true,
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleDebug -PmaxWorkers=$WORKERS"
                }
              },
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease -PmaxWorkers=$WORKERS"
                }
              },
              "production": {
                "android": {
                  "buildType": "app-bundle",
                  "gradleCommand": ":app:bundleRelease -PmaxWorkers=$WORKERS"
                }
              }
            }
          }
          EOF
          
          # Kiểm tra nếu tệp eas.json hiện tại tồn tại
          if [ -f eas.json ]; then
            # Hợp nhất nội dung mới với tệp hiện tại
            echo "Sao lưu eas.json gốc"
            cp eas.json eas.json.bak
            
            # Thử sử dụng jq để hợp nhất cấu hình
            if command -v jq &> /dev/null; then
              echo "Hợp nhất cấu hình eas.json mới vào tệp hiện tại"
              jq -s '.[0] * .[1]' eas.json eas.json.tmp > eas.json.new
              mv eas.json.new eas.json
            else
              # Nếu không có jq, sử dụng tệp mới
              echo "Công cụ jq không có sẵn, thay thế eas.json bằng phiên bản mới"
              mv eas.json.tmp eas.json
            fi
          else
            # Nếu không tồn tại, sử dụng tệp mới
            echo "Tệp eas.json không tồn tại, tạo mới"
            mv eas.json.tmp eas.json
          fi
          
          rm -f eas.json.tmp
          echo "Đã cấu hình eas.json cho hiệu suất tối ưu"
          cat eas.json

      - name: Check environment and dependencies
        id: check-env
        run: |
          # Kiểm tra Node.js version
          NODE_VERSION=$(node -v)
          echo "Node version: $NODE_VERSION"
          if [[ ! "$NODE_VERSION" =~ ^v18 ]]; then
            echo "warning=Node.js version not 18.x" >> $GITHUB_OUTPUT
          fi
          
          # Kiểm tra Yarn version
          YARN_VERSION=$(yarn -v)
          echo "Yarn version: $YARN_VERSION"
          
          # Kiểm tra không gian đĩa
          DISK_SPACE=$(df -h / | awk 'NR==2 {print $4}')
          echo "Available disk space: $DISK_SPACE"
          if [[ "${DISK_SPACE%G*}" -lt 20 ]]; then
            echo "warning=Low disk space available" >> $GITHUB_OUTPUT
          fi
          
          # Kiểm tra RAM available
          FREE_MEM=$(free -g | awk 'NR==2 {print $4}')
          echo "Available RAM: ${FREE_MEM}G"
          if [[ "$FREE_MEM" -lt 4 ]]; then
            echo "warning=Low memory available" >> $GITHUB_OUTPUT
          fi

      - name: Check and validate cache
        id: check-cache
        run: |
          # Định nghĩa các path cần kiểm tra
          CACHE_PATHS=(
            "~/.gradle/caches"
            "~/.gradle/wrapper"
            "~/.android"
            "~/.npm"
            "node_modules"
            ".yarn/cache"
            "${{ github.workspace }}/android-sdk"
            "${{ env.TMPDIR }}/metro-cache"
          )
          
          # Kiểm tra tính toàn vẹn của cache paths
          CACHE_STATUS="valid"
          CORRUPT_PATHS=()
          
          for path in "${CACHE_PATHS[@]}"; do
            FULL_PATH=$(eval echo $path)
            echo "Checking $path..."
            
            # Kiểm tra tồn tại
            if [ ! -d "$FULL_PATH" ]; then
              echo "Directory not found: $path"
              CACHE_STATUS="missing"
              CORRUPT_PATHS+=("$path")
              continue
            fi
            
            # Kiểm tra quyền truy cập
            if [ ! -r "$FULL_PATH" ] || [ ! -w "$FULL_PATH" ]; then
              echo "Permission issues with: $path"
              CACHE_STATUS="permission_error"
              CORRUPT_PATHS+=("$path")
              continue
            fi
            
            # Kiểm tra kích thước (warning nếu quá lớn)
            SIZE=$(du -sm "$FULL_PATH" 2>/dev/null | cut -f1)
            if [ "$SIZE" -gt 5000 ]; then # 5GB
              echo "Warning: $path is too large ($SIZE MB)"
              echo "warning=Large cache size detected" >> $GITHUB_OUTPUT
            fi
          done
          
          # Tạo cache key với version
          CACHE_VERSION="v2"  # Tăng version khi thay đổi cấu trúc cache
          CACHE_KEY="${{ runner.os }}-build-${CACHE_VERSION}-${{ hashFiles('**/yarn.lock', '**/package.json', 'android/**/build.gradle', 'android/gradle/wrapper/gradle-wrapper.properties') }}"
          
          # Output kết quả
          echo "cache_status=$CACHE_STATUS" >> $GITHUB_OUTPUT
          echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "corrupt_paths=${CORRUPT_PATHS[*]}" >> $GITHUB_OUTPUT

      # Hiển thị cảnh báo từ kiểm tra môi trường
      - name: Show environment warnings
        if: steps.check-env.outputs.warning
        run: |
          echo "⚠️ Environment warnings:"
          echo "${{ steps.check-env.outputs.warning }}"
          
      # Xử lý các trường hợp cache khác nhau
      - name: Handle cache scenarios
        id: cache-handler
        run: |
          case "${{ steps.check-cache.outputs.cache_status }}" in
            "valid")
              echo "Cache status: Valid - attempting to restore"
              echo "action=restore" >> $GITHUB_OUTPUT
              ;;
            "missing")
              echo "Cache status: Missing directories - will create fresh cache"
              echo "action=fresh" >> $GITHUB_OUTPUT
              ;;
            "permission_error")
              echo "Cache status: Permission issues detected"
              echo "Affected paths: ${{ steps.check-cache.outputs.corrupt_paths }}"
              echo "Will attempt to fix permissions and rebuild cache"
              echo "action=fix_permissions" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Cache status: Unknown issue - will create fresh environment"
              echo "action=fresh" >> $GITHUB_OUTPUT
              ;;
          esac

      # Sửa quyền truy cập cache nếu cần
      - name: Fix cache permissions
        if: steps.cache-handler.outputs.action == 'fix_permissions'
        run: |
          echo "Fixing permissions for corrupt paths..."
          IFS=' ' read -ra CORRUPT_PATHS <<< "${{ steps.check-cache.outputs.corrupt_paths }}"
          for path in "${CORRUPT_PATHS[@]}"; do
            FULL_PATH=$(eval echo $path)
            if [ -e "$FULL_PATH" ]; then
              echo "Fixing permissions for $path"
              sudo chown -R $(id -u):$(id -g) "$FULL_PATH"
              sudo chmod -R 755 "$FULL_PATH"
            fi
          done

      # Restore cache nếu hợp lệ
      - name: Restore cache
        if: steps.cache-handler.outputs.action == 'restore'
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android
            ~/.npm
            node_modules
            .yarn/cache
            ${{ github.workspace }}/android-sdk
            ${{ env.TMPDIR }}/metro-cache
          key: ${{ steps.check-cache.outputs.cache_key }}
          restore-keys: |
            ${{ runner.os }}-build-${{ steps.check-cache.outputs.cache_version }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Tạo môi trường mới nếu cần
      - name: Setup fresh environment
        if: |
          steps.cache-handler.outputs.action == 'fresh' ||
          (steps.cache-handler.outputs.action == 'restore' && steps.cache-restore.outputs.cache-hit != 'true') ||
          (steps.cache-handler.outputs.action == 'fix_permissions' && steps.cache-restore.outputs.cache-hit != 'true')
        run: |
          echo "Setting up fresh build environment..."
          
          # Dọn dẹp môi trường cũ
          rm -rf ~/.gradle/caches ~/.gradle/wrapper ~/.android ~/.npm node_modules .yarn/cache ${{ github.workspace }}/android-sdk ${{ env.TMPDIR }}/metro-cache
          
          # Tạo thư mục mới
          mkdir -p ${{ github.workspace }}/android-sdk ~/.gradle ~/.android ~/.npm node_modules .yarn/cache ${{ env.TMPDIR }}/metro-cache
          
          # Cài đặt Android SDK
          cd ${{ github.workspace }}/android-sdk
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip commandlinetools-linux-9477386_latest.zip
          rm commandlinetools-linux-9477386_latest.zip
          
          # Thiết lập quyền truy cập
          chmod -R 755 .
          
          # Chấp nhận licenses
          yes | cmdline-tools/bin/sdkmanager --licenses || true
          
          # Cài đặt packages với retry và verify
          for i in {1..3}; do
            echo "Installing Android packages (Attempt $i)..."
            
            # Xóa cài đặt cũ nếu có
            cmdline-tools/bin/sdkmanager --uninstall "platform-tools" "platforms;android-34" "build-tools;34.0.0" || true
            
            if cmdline-tools/bin/sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"; then
              echo "Waiting for package installation to complete..."
              sleep 30  # Chờ để đảm bảo cài đặt hoàn tất
              
              # Verify cài đặt
              if cmdline-tools/bin/sdkmanager --list_installed | grep -q "platform-tools"; then
                echo "✅ Platform tools installed successfully"
                break
              fi
            fi
            
            echo "⚠️ Attempt $i failed, retrying after cleanup..."
            rm -rf platform-tools build-tools platforms  # Cleanup failed install
            sleep 10
          done
          
          # Double check installation
          if ! cmdline-tools/bin/sdkmanager --list_installed | grep -q "platform-tools"; then
            echo "❌ Failed to install Android packages after 3 attempts"
            exit 1
          fi
          
          # Cài đặt Node dependencies với retry và cleanup
          for i in {1..3}; do
            rm -rf node_modules
            if yarn install --frozen-lockfile --network-timeout ${{ env.YARN_NETWORK_TIMEOUT }}; then
              break
            fi
            echo "Attempt $i failed, retrying..."
            yarn cache clean
            sleep 5
          done

      # Lưu cache mới hoặc đã sửa
      - name: Save cache
        if: |
          steps.cache-handler.outputs.action != 'restore' ||
          steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android
            ~/.npm
            node_modules
            .yarn/cache
            ${{ github.workspace }}/android-sdk
            ${{ env.TMPDIR }}/metro-cache
          key: ${{ steps.check-cache.outputs.cache_key }}

      # Xác thực môi trường toàn diện
      - name: Verify and setup build environment
        run: |
          echo "Verifying build environment..."
          
          # Setup Android SDK nếu chưa có
          ANDROID_SDK_ROOT="${{ github.workspace }}/android-sdk"
          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            echo "Installing Android SDK..."
            mkdir -p $ANDROID_SDK_ROOT
            cd $ANDROID_SDK_ROOT
            
            # Tải và cài đặt command line tools
            wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
            unzip commandlinetools-linux-9477386_latest.zip
            rm commandlinetools-linux-9477386_latest.zip
            
            # Chấp nhận licenses
            yes | cmdline-tools/bin/sdkmanager --licenses
            
            # Cài đặt các components cần thiết
            cmdline-tools/bin/sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"
            
            cd -
          fi
          
          # Function để kiểm tra và cài đặt lại nếu cần
          verify_component() {
            local name=$1
            local path=$2
            local install_cmd=$3
            local type=${4:-directory}
            
            echo "Checking $name..."
            if [ "$type" = "directory" ] && [ ! -d "$path" ]; then
              echo "❌ Missing $name at: $path"
              if [ -n "$install_cmd" ]; then
                echo "Attempting to install $name..."
                eval "$install_cmd"
                if [ ! -d "$path" ]; then
                  return 1
                fi
              else
                return 1
              fi
            elif [ "$type" = "file" ] && [ ! -f "$path" ]; then
              echo "❌ Missing $name at: $path"
              if [ -n "$install_cmd" ]; then
                echo "Attempting to install $name..."
                eval "$install_cmd"
                if [ ! -f "$path" ]; then
                  return 1
                fi
              else
                return 1
              fi
            fi
            echo "✅ $name verification passed"
            return 0
          }

          # Hàm cài đặt với retry logic
          install_with_retry() {
            local component=$1
            local install_cmd=$2
            local max_retries=3
            local retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              echo "Installing $component (Attempt $(($retry_count + 1))/$max_retries)..."
              if eval "$install_cmd"; then
                echo "✅ Successfully installed $component"
                return 0
              else
                retry_count=$(($retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  echo "⚠️ Failed to install $component, retrying in 30 seconds..."
                  sleep 30
                fi
              fi
            done
            
            echo "❌ Failed to install $component after $max_retries attempts"
            return 1
          }

          # Kiểm tra và cài đặt Android SDK components
          echo "📱 Verifying Android SDK components..."
          SDK_ROOT="${{ github.workspace }}/android-sdk"
          
          # Định nghĩa các lệnh cài đặt cho từng component
          CMD_INSTALL="cd $SDK_ROOT && yes | ./cmdline-tools/bin/sdkmanager --install 'cmdline-tools;latest'"
          PLATFORM_INSTALL="cd $SDK_ROOT && yes | ./cmdline-tools/bin/sdkmanager --install 'platform-tools'"
          BUILD_TOOLS_INSTALL="cd $SDK_ROOT && yes | ./cmdline-tools/bin/sdkmanager --install 'build-tools;34.0.0'"
          
          # Kiểm tra và cài đặt các components
          COMPONENTS=(
            "Command line tools:$SDK_ROOT/cmdline-tools:$CMD_INSTALL:directory"
            "Platform tools:$SDK_ROOT/platform-tools:$PLATFORM_INSTALL:directory"
            "Build tools:$SDK_ROOT/build-tools:$BUILD_TOOLS_INSTALL:directory"
            "ADB:$SDK_ROOT/platform-tools/adb:$PLATFORM_INSTALL:file"
            "AAPT:$SDK_ROOT/build-tools/34.0.0/aapt:$BUILD_TOOLS_INSTALL:file"
            "DX:$SDK_ROOT/build-tools/34.0.0/dx:$BUILD_TOOLS_INSTALL:file"
          )
          
          for component in "${COMPONENTS[@]}"; do
            IFS=: read -r name path install_cmd type <<< "$component"
            if ! verify_component "$name" "$path" "" "$type"; then
              echo "🔄 Component $name missing, attempting installation..."
              if ! install_with_retry "$name" "$install_cmd"; then
                echo "❌ Failed to install $name"
                exit 1
              fi
              # Verify again after installation
              if ! verify_component "$name" "$path" "" "$type"; then
                echo "❌ Component $name still missing after installation"
                exit 1
              fi
            fi
          done
          
          # Thêm Android SDK vào PATH
          echo "Adding Android SDK to PATH..."
          export ANDROID_HOME=$SDK_ROOT
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Kiểm tra Node.js environment
          echo "📦 Verifying Node.js environment..."
          
          # Kiểm tra node_modules và package.json
          verify_component "node_modules directory" "node_modules" || exit 1
          verify_component "package.json" "package.json" "file" || exit 1
          
          # Kiểm tra các package quan trọng và dependencies của chúng
          REQUIRED_PACKAGES=(
            "@babel/core:@babel/parser"
            "react-native:react-native/package.json"
            "expo:expo/package.json"
            "typescript:typescript/lib/typescript.js"
            "@types/react-native:@types/react-native/index.d.ts"
            "expo-cli:expo-cli/package.json"
          )
          
          echo "Verifying required packages..."
          for package_check in "${REQUIRED_PACKAGES[@]}"; do
            package="${package_check%%:*}"
            check_file="${package_check#*:}"
            
            if [ ! -d "node_modules/$package" ]; then
              echo "❌ Missing package: $package"
              # Thử cài đặt lại package
              echo "Attempting to reinstall $package..."
              yarn add $package || exit 1
            fi
            
            if [ ! -f "node_modules/$package/$check_file" ]; then
              echo "❌ Package $package seems corrupted (missing $check_file)"
              exit 1
            fi
          done
          echo "✅ Node.js environment verification passed"
          
          # Kiểm tra Gradle environment
          echo "🐘 Verifying Gradle environment..."
          
          # Kiểm tra cấu trúc thư mục Android
          ANDROID_FILES=(
            "android/gradlew:file"
            "android/gradle.properties:file"
            "android/build.gradle:file"
            "android/settings.gradle:file"
            "android/app:directory"
            "android/app/src:directory"
          )
          
          for check in "${ANDROID_FILES[@]}"; do
            path="${check%%:*}"
            type="${check#*:}"
            name=$(basename "$path")
            
            verify_component "Gradle $name" "$path" "$type" || {
              echo "Attempting to fix Gradle environment..."
              if [ "$name" = "gradlew" ]; then
                cd android && gradle wrapper && cd .. || exit 1
              fi
              verify_component "Gradle $name" "$path" "$type" || exit 1
            }
          done
          
          # Kiểm tra Gradle wrapper
          chmod +x android/gradlew
          if ! ./android/gradlew --version > /dev/null; then
            echo "❌ Gradle wrapper validation failed"
            exit 1
          fi
          echo "✅ Gradle environment verification passed"
          
          # Kiểm tra quyền truy cập và tài nguyên hệ thống
          echo "🔒 Verifying permissions and system resources..."
          
          # Kiểm tra và sửa quyền truy cập cho các thư mục quan trọng
          CRITICAL_DIRS=(
            "~/.gradle:Gradle cache"
            "~/.android:Android config"
            "node_modules:Node modules"
            "${{ github.workspace }}/android-sdk:Android SDK"
            "${{ env.TMPDIR }}/metro-cache:Metro cache"
          )
          
          for dir_info in "${CRITICAL_DIRS[@]}"; do
            dir="${dir_info%%:*}"
            desc="${dir_info#*:}"
            full_path=$(eval echo "$dir")
            
            echo "Checking permissions for $desc..."
            if [ ! -d "$full_path" ]; then
              echo "⚠️ Directory not found: $full_path"
              mkdir -p "$full_path" || {
                echo "❌ Failed to create directory: $full_path"
                exit 1
              }
            fi
            
            if [ ! -r "$full_path" ] || [ ! -w "$full_path" ]; then
              echo "⚠️ Fixing permissions for $desc..."
              sudo chown -R $(id -u):$(id -g) "$full_path"
              sudo chmod -R 755 "$full_path"
              
              if [ ! -r "$full_path" ] || [ ! -w "$full_path" ]; then
                echo "❌ Failed to fix permissions for: $full_path"
                exit 1
              fi
            fi
          done
          echo "✅ Permissions verification passed"
          
          # Kiểm tra tài nguyên hệ thống
          echo "💻 Checking system resources..."
          
          # Kiểm tra CPU cores
          CPU_CORES=$(nproc)
          echo "Available CPU cores: $CPU_CORES"
          if [ "$CPU_CORES" -lt 2 ]; then
            echo "❌ Insufficient CPU cores (minimum 2 required)"
            exit 1
          fi
          
          # Kiểm tra RAM
          TOTAL_MEM=$(free -g | awk 'NR==2 {print $2}')
          FREE_MEM=$(free -g | awk 'NR==2 {print $4}')
          echo "Memory - Total: ${TOTAL_MEM}G, Free: ${FREE_MEM}G"
          
          if [ "$FREE_MEM" -lt 4 ]; then
            echo "❌ Insufficient memory available (${FREE_MEM}G). Minimum 4GB required."
            exit 1
          fi
          
          # Kiểm tra disk space với các ngưỡng
          SPACE_AVAILABLE=$(df -h / | awk 'NR==2 {print $4}' | sed 's/G//')
          echo "Available disk space: ${SPACE_AVAILABLE}G"
          
          if (( $(echo "$SPACE_AVAILABLE < 5" | bc -l) )); then
            echo "❌ Critical: Extremely low disk space: ${SPACE_AVAILABLE}G"
            exit 1
          elif (( $(echo "$SPACE_AVAILABLE < 10" | bc -l) )); then
            echo "⚠️ Warning: Low disk space: ${SPACE_AVAILABLE}G"
          fi
          
          # Kiểm tra load average
          LOAD_AVG=$(uptime | awk -F'[a-z]:' '{ print $2}' | cut -d, -f1)
          echo "Current system load: $LOAD_AVG"
          
          if (( $(echo "$LOAD_AVG > $CPU_CORES" | bc -l) )); then
            echo "⚠️ Warning: High system load detected"
          fi
          
          # Tạo báo cáo tổng hợp
          mkdir -p "${{ env.STORAGE_DIR }}/reports"
          REPORT_FILE="${{ env.STORAGE_DIR }}/reports/environment-verification.log"
          
          {
            echo "=== Build Environment Verification Report ==="
            echo "Timestamp: $(date)"
            echo ""
            
            echo "=== System Resources ==="
            echo "CPU Cores: $CPU_CORES"
            echo "Total Memory: ${TOTAL_MEM}G"
            echo "Free Memory: ${FREE_MEM}G"
            echo "Available Disk Space: ${SPACE_AVAILABLE}G"
            echo "System Load: $LOAD_AVG"
            echo ""
            
            echo "=== Android SDK Components ==="
            for component in "${COMPONENTS[@]}"; do
              IFS=: read -r name path _ _ <<< "$component"
              if verify_component "$name" "$path" "" "directory" &>/dev/null || \
                 verify_component "$name" "$path" "" "file" &>/dev/null; then
                echo "✅ $name: Installed and verified"
              else
                echo "❌ $name: Not installed or verification failed"
              fi
            done
            echo ""

            echo "=== Node.js Environment ==="
            echo "Node.js Version: $NODE_VERSION"
            echo "Yarn Version: $YARN_VERSION"
            for package_check in "${REQUIRED_PACKAGES[@]}"; do
              package="${package_check%%:*}"
              if [ -d "node_modules/$package" ]; then
                echo "✅ $package: Installed"
              else
                echo "❌ $package: Missing"
              fi
            done
            echo ""
            
            echo "=== Gradle Environment ==="
            ./android/gradlew --version 2>/dev/null || echo "❌ Gradle wrapper validation failed"
            echo ""
            
            echo "=== Directory Permissions ==="
            for dir_info in "${CRITICAL_DIRS[@]}"; do
              dir="${dir_info%%:*}"
              desc="${dir_info#*:}"
              full_path=$(eval echo "$dir")
              if [ -r "$full_path" ] && [ -w "$full_path" ]; then
                echo "✅ $desc: Read/Write access OK"
              else
                echo "❌ $desc: Permission issues"
              fi
            done
          } > "$REPORT_FILE"

          # Tính toán và hiển thị tóm tắt báo cáo
          TOTAL_COMPONENTS=${#COMPONENTS[@]}
          INSTALLED_COMPONENTS=0
          for component in "${COMPONENTS[@]}"; do
            IFS=: read -r name path _ _ <<< "$component"
            if verify_component "$name" "$path" "" "directory" &>/dev/null || \
               verify_component "$name" "$path" "" "file" &>/dev/null; then
              INSTALLED_COMPONENTS=$((INSTALLED_COMPONENTS + 1))
            fi
          done

          TOTAL_PACKAGES=${#REQUIRED_PACKAGES[@]}
          INSTALLED_PACKAGES=0
          for package_check in "${REQUIRED_PACKAGES[@]}"; do
            package="${package_check%%:*}"
            if [ -d "node_modules/$package" ]; then
              INSTALLED_PACKAGES=$((INSTALLED_PACKAGES + 1))
            fi
          done

          echo "=== Build Environment Summary ==="
          echo "📊 System Resources:"
          echo "  • CPU: $CPU_CORES cores"
          echo "  • Memory: ${FREE_MEM}G free of ${TOTAL_MEM}G total"
          echo "  • Disk: ${SPACE_AVAILABLE}G available"
          echo "  • Load: $LOAD_AVG"
          echo ""
          echo "📱 Android SDK: $INSTALLED_COMPONENTS/$TOTAL_COMPONENTS components"
          echo "📦 Node.js Packages: $INSTALLED_PACKAGES/$TOTAL_PACKAGES required"
          echo ""

          # Tính điểm sức khỏe môi trường
          HEALTH_SCORE=0
          
          # Điểm cho tài nguyên hệ thống (30 điểm)
          if [ "$CPU_CORES" -ge 4 ]; then HEALTH_SCORE=$((HEALTH_SCORE + 10)); fi
          if [ "$FREE_MEM" -ge 8 ]; then HEALTH_SCORE=$((HEALTH_SCORE + 10)); fi
          if (( $(echo "$SPACE_AVAILABLE >= 20" | bc -l) )); then HEALTH_SCORE=$((HEALTH_SCORE + 10)); fi
          
          # Điểm cho Android SDK (40 điểm)
          SDK_SCORE=$((INSTALLED_COMPONENTS * 40 / TOTAL_COMPONENTS))
          HEALTH_SCORE=$((HEALTH_SCORE + SDK_SCORE))
          
          # Điểm cho Node.js environment (30 điểm)
          NODE_SCORE=$((INSTALLED_PACKAGES * 30 / TOTAL_PACKAGES))
          HEALTH_SCORE=$((HEALTH_SCORE + NODE_SCORE))

          if [ "$HEALTH_SCORE" -ge 90 ]; then
            echo "🟢 Environment Health Score: $HEALTH_SCORE/100 (Excellent)"
          elif [ "$HEALTH_SCORE" -ge 70 ]; then
            echo "🟡 Environment Health Score: $HEALTH_SCORE/100 (Good)"
          else
            echo "🔴 Environment Health Score: $HEALTH_SCORE/100 (Needs Attention)"
          fi
          echo "==================================="
          
          echo "🎉 Build environment verified successfully"
          echo "📝 Detailed verification report saved to: $REPORT_FILE"

      - name: Setup Android build environment
        run: |
          # Cài đặt và cập nhật các dependencies
          yarn install --frozen-lockfile
          yarn add jest@^29.7.0
          yarn add @babel/preset-env@^7.1.6
          yarn add @types/react-native@^0.73.0
          
          # Xóa node_modules và cài đặt lại nếu cần
          rm -rf node_modules
          yarn install --frozen-lockfile
          
          # Tạo cấu trúc thư mục Android
          mkdir -p android/app/src/main
          
          # Cấu hình expo.doctor trong package.json
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json"));
            pkg.expo = pkg.expo || {};
            pkg.expo.doctor = {
              reactNativeDirectoryCheck: {
                exclude: [
                  "react-native-fast-image",
                  "react-native-image-crop-picker",
                  "@stream-io/flat-list-mvcp",
                  "react-native-document-picker",
                  "react-native-incall-manager"
                ],
                listUnknownPackages: false
              }
            };
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
          '

      - name: Setup Gradle
        run: |
          # Ensure android directory exists
          mkdir -p android/app

          # Create basic build.gradle if it doesn't exist
          if [ ! -f "android/build.gradle" ]; then
            cat << EOF > android/build.gradle
              buildscript {
                ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 21
                  compileSdkVersion = 34
                  targetSdkVersion = 34
                }
                repositories {
                  google()
                  mavenCentral()
                }
                dependencies {
                  classpath("com.android.tools.build:gradle:8.2.1")
                }
              }
              allprojects {
                repositories {
                  google()
                  mavenCentral()
                }
              }
            EOF
          fi

          # Initialize Gradle wrapper
          cd android
          if [ ! -f "gradlew" ]; then
            gradle wrapper
          fi
          chmod +x gradlew
          cd ..

      - name: Pre-build validation
        id: pre-build
        run: |
          echo "🔍 Performing pre-build validation..."
          
          # Kiểm tra các file cấu hình bắt buộc
          REQUIRED_FILES=(
            "package.json"
            "app.json"
            "eas.json"
            "metro.config.js"
            "babel.config.js"
            "android/gradle.properties"
            "android/build.gradle"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
            echo "✓ Found $file"
          done
          
          # Kiểm tra cấu hình trong package.json
          if ! node -e 'const pkg=require("./package.json"); if(!pkg.dependencies["react-native"] || !pkg.dependencies.expo) throw "Missing core dependencies"'; then
            echo "❌ Invalid package.json configuration"
            exit 1
          fi
          
          # Kiểm tra cấu hình trong app.json
          if ! node -e 'const app=require("./app.json"); if(!app.expo || !app.expo.name) throw "Invalid app.json"'; then
            echo "❌ Invalid app.json configuration"
            exit 1
          fi
          
          # Kiểm tra phiên bản Node.js và Yarn
          NODE_VERSION=$(node -v)
          YARN_VERSION=$(yarn -v)
          echo "Node.js version: $NODE_VERSION"
          echo "Yarn version: $YARN_VERSION"
          
          if [[ ! "$NODE_VERSION" =~ ^v18 ]]; then
            echo "⚠️ Warning: Recommended Node.js version is 18.x"
          fi
          
          # Kiểm tra cấu hình Metro
          echo "Validating Metro configuration..."
          if ! node -e 'require("./metro.config.js")'; then
            echo "❌ Invalid metro.config.js"
            exit 1
          fi
          
          # Kiểm tra các thư mục quan trọng
          REQUIRED_DIRS=(
            "android/app/src/main"
            "node_modules/react-native"
            "node_modules/expo"
          )
          
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "❌ Missing required directory: $dir"
              exit 1
            fi
            echo "✓ Found $dir"
          done
          
          echo "✅ Pre-build validation completed successfully"
          echo "validation_success=true" >> $GITHUB_OUTPUT

      - name: Show validation errors
        if: steps.pre-build.outputs.validation_success != 'true'
        run: |
          echo "❌ Pre-build validation failed!"
          echo "Please check the validation step logs above for detailed errors."
          echo "Fix the reported issues before attempting to build again."
          exit 1

      - name: Build Android App
        id: build
        if: steps.pre-build.outputs.validation_success == 'true'
        continue-on-error: true
        shell: /usr/bin/bash -e {0}
        env:
          CACHE_LIFETIME_DAYS: 7
          YARN_NETWORK_TIMEOUT: 300000
          GRADLE_MEMORY: 24g
          GRADLE_MAX_WORKERS: 14
          METRO_MEMORY: 8192
          PERSISTENT_CACHE_PATH: ~/.eas-build-cache
          STORAGE_DIR: ${{ github.workspace }}/ksms-builds/$(date +"%Y-%m-%d")
          TMPDIR: ${{ github.workspace }}/expo-tmp
          EAS_LOCAL_BUILD_WORKINGDIR: ${{ github.workspace }}/eas-builds/working
          EAS_LOCAL_BUILD_ARTIFACTS_DIR: ${{ github.workspace }}/eas-builds/artifacts
          EAS_LOCAL_BUILD_SKIP_CLEANUP: 1
          BUILD_TIMESTAMP: $(date +"%Y%m%d_%H%M%S")
          GRADLE_OPTS: -Xmx24g -XX:MaxMetaspaceSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.jvmargs=-Xmx24g -Dorg.gradle.workers.max=14 -XX:+UseParallelGC
          ANDROID_HOME: ${{ github.workspace }}/android-sdk
          CFLAGS: -Wno-dollar-in-identifier-extension
          CXXFLAGS: -Wno-dollar-in-identifier-extension
          EAS_LOCAL_BUILD_ARTIFACT_TYPE: apk
          
        run: |
          # Ensure gradlew exists and is executable
          if [ ! -f "android/gradlew" ]; then
            cd android
            gradle wrapper
            cd ..
          fi
          chmod +x android/gradlew
          
          # Thiết lập biến môi trường cho quá trình build
          export NODE_ENV=production
          
          # Cấu hình Gradle với heap size và worker threads tối ưu
          export GRADLE_OPTS="-Xmx${{ env.GRADLE_MEMORY }} \
            -XX:MaxMetaspaceSize=4g \
            -XX:+HeapDumpOnOutOfMemoryError \
            -Dorg.gradle.jvmargs=-Xmx${{ env.GRADLE_MEMORY }} \
            -Dorg.gradle.workers.max=${{ env.GRADLE_MAX_WORKERS }} \
            -XX:+UseParallelGC \
            -XX:+UseG1GC \
            -XX:MaxGCPauseMillis=200"

          # Cấu hình Node.js memory limit
          export NODE_OPTIONS="--max-old-space-size=${{ env.METRO_MEMORY }}"
          
          # Cấu hình Metro bundler
          export METRO_CONFIG="metro.config.js"
          export METRO_CACHE_DIR="${{ env.TMPDIR }}/metro-cache"
          
          # Cấu hình worker threads cho Gradle build
          export EAS_LOCAL_BUILD_GRADLE_OPTS="-PmaxWorkers=${{ env.GRADLE_MAX_WORKERS }}"

          echo "Building Android app with profile: ${{ steps.profile.outputs.name }}"
          echo "Using ${{ env.GRADLE_MAX_WORKERS }} worker threads and ${{ env.GRADLE_MEMORY }} heap memory"
          echo "Node memory: ${{ env.METRO_MEMORY }}MB"

          # Hiển thị thông tin môi trường build
          echo "===== Build Environment ====="
          echo "GRADLE_OPTS: $GRADLE_OPTS"
          echo "NODE_OPTIONS: $NODE_OPTIONS"
          echo "METRO_CONFIG: $METRO_CONFIG"
          echo "METRO_CACHE_DIR: $METRO_CACHE_DIR"
          echo "EAS_LOCAL_BUILD_GRADLE_OPTS: $EAS_LOCAL_BUILD_GRADLE_OPTS"
          echo "============================="

          # Hiển thị cấu hình EAS
          echo "EAS config:"
          cat eas.json
          
          # Xây dựng ứng dụng với retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          BUILD_SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$BUILD_SUCCESS" != "true" ]; do
            echo "Build attempt $(($RETRY_COUNT + 1)) of $MAX_RETRIES"
            
            if eas build --platform android --local --non-interactive --profile=${{ steps.profile.outputs.name }}; then
              BUILD_SUCCESS=true
              echo "Build successful on attempt $(($RETRY_COUNT + 1))"
              break
            else
              RETRY_COUNT=$(($RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Build failed, waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
          
          if [ "$BUILD_SUCCESS" = "true" ]; then
            echo "build_exit_code=0" >> $GITHUB_OUTPUT
          else
            echo "Build failed after $MAX_RETRIES attempts"
            echo "build_exit_code=1" >> $GITHUB_OUTPUT
          fi

      - name: Generate build report
        if: env.BUILD_REPORT == 'true'
        run: |
          echo "=== Build Report ===" > ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Profile: ${{ steps.profile.outputs.name }}" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Branch: ${{ github.ref }}" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Commit: ${{ github.sha }}" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Build Time: $(date)" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "CPU Cores Used: ${{ env.GRADLE_MAX_WORKERS }}" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Gradle Memory: ${{ env.GRADLE_MEMORY }}" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Node Memory: ${{ env.METRO_MEMORY }}MB" >> ${{ env.STORAGE_DIR }}/build-report.txt

          # Cache stats
          echo "=== Cache Statistics ===" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Persistent Cache:" >> ${{ env.STORAGE_DIR }}/build-report.txt
          du -sh ${{ env.PERSISTENT_CACHE_PATH }}/* >> ${{ env.STORAGE_DIR }}/build-report.txt || true
          echo "Non-Persistent Caches:" >> ${{ env.STORAGE_DIR }}/build-report.txt
          du -sh ~/.gradle/caches ~/.android/build-cache $HOME/expo-tmp/metro-cache ~/.eas-cli .yarn/cache >> ${{ env.STORAGE_DIR }}/build-report.txt || true

          # Gradle metrics
          if [ -f "$HOME/.gradle/daemon/daemon-metrics.log" ]; then
            echo "=== Gradle Metrics ===" >> ${{ env.STORAGE_DIR }}/build-report.txt
            cat "$HOME/.gradle/daemon/daemon-metrics.log" >> ${{ env.STORAGE_DIR }}/build-report.txt || true
          fi

          # Metro bundler metrics
          if [ -f "$HOME/expo-tmp/metro-cache/metro-metrics.json" ]; then
            echo "=== Metro Bundler Metrics ===" >> ${{ env.STORAGE_DIR }}/build-report.txt
            cat "$HOME/expo-tmp/metro-cache/metro-metrics.json" >> ${{ env.STORAGE_DIR }}/build-report.txt || true
          fi

      - name: Save Persistent Cache
        uses: actions/cache/save@v3
        if: always() && !cancelled()
        with:
          path: |
            ${{ env.PERSISTENT_CACHE_PATH }}
          key: persistent-cache-v3-${{ hashFiles('**/yarn.lock', '**/build.gradle', 'eas.json', 'app.json', 'babel.config.js', 'metro.config.js') }}

      - name: Save Build Artifacts Cache
        uses: actions/cache/save@v3
        if: always() && !cancelled()
        with:
          path: |
            android/app/build
            ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }}
          key: build-artifacts-v3-${{ runner.os }}-${{ github.sha }}

      - name: Log build result
        run: |
          if [ "${{ steps.build.outputs.build_exit_code }}" != "0" ]; then
            echo "Build failed with exit code ${{ steps.build.outputs.build_exit_code }}"
            mkdir -p ${{ env.STORAGE_DIR }}/logs
            # Lưu log build nếu có
            if [ -f "${{ env.EAS_LOCAL_BUILD_WORKINGDIR }}/eas-build.log" ]; then
              cp "${{ env.EAS_LOCAL_BUILD_WORKINGDIR }}/eas-build.log" "${{ env.STORAGE_DIR }}/logs/build-log-${{ env.BUILD_TIMESTAMP }}.txt"
            fi
            find ${{ env.EAS_LOCAL_BUILD_WORKINGDIR }} -name "*.log" -type f -exec cp {} ${{ env.STORAGE_DIR }}/logs/ \; || true
            find ${{ env.TMPDIR }} -name "*.log" -type f -exec cp {} ${{ env.STORAGE_DIR }}/logs/ \; || true
          else
            echo "Build completed successfully"
          fi
      
      - name: Save APK to local storage
        if: steps.build.outcome == 'success'
        run: |
          # Tìm file APK trong thư mục artifacts
          APK_FILE=$(find ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }} -name "*.apk" | head -n 1)
          
          if [ -n "$APK_FILE" ]; then
            # Tạo tên file với profile và timestamp
            APK_FILENAME="ksms-${{ steps.profile.outputs.name }}-${{ env.BUILD_TIMESTAMP }}.apk"
            
            # Sao chép file APK vào thư mục lưu trữ
            cp "$APK_FILE" "${{ env.STORAGE_DIR }}/$APK_FILENAME"
            
            # Tạo metadata
            echo "Build completed at $(date)" > "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Profile: ${{ steps.profile.outputs.name }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Branch: ${{ github.ref }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Commit: ${{ github.sha }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "CPU Cores Used: ${{ env.GRADLE_MAX_WORKERS }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Gradle Memory: ${{ env.GRADLE_MEMORY }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Node Memory: ${{ env.METRO_MEMORY }}MB" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            
            echo "APK saved to ${{ env.STORAGE_DIR }}/$APK_FILENAME"
          else
            echo "No APK file found in artifacts directory!"
            ls -la ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }}
            exit 1
          fi
      
      - name: List recent APKs
        run: |
          echo "=== Recent APK Builds ==="
          find $HOME/ksms-builds -type f -name "*.apk" -mtime -7 | sort -r || true

      - name: Cleanup Old Persistent Caches
        if: always()
        run: |
          echo "Cleaning up old persistent caches..."
          find ${{ env.PERSISTENT_CACHE_PATH }} -type f -atime +${{ env.CACHE_LIFETIME_DAYS }} -delete || true
          echo "Cleanup complete."
