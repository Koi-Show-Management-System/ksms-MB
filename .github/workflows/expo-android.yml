name: Build and Release Expo App

permissions: 
  contents: write
  issues: write
  pull-requests: write
  discussions: write
  packages: write
  actions: write
  repository-projects: write

on:
  push:
    branches: [main, development]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: v1.0.${{ github.run_number }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
      
      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
          
      - name: Install dependencies
        run: yarn install

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install
          
      - name: Install EAS CLI
        run: yarn global add eas-cli
        
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          
      - name: Create eas.json
        run: |
          cat > eas.json << 'EOL'
          {
            "cli": {
              "version": ">= 3.13.3",
              "appVersionSource": "remote"
            },
            "build": {
              "development": {
                "developmentClient": true,
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleDebug"
                }
              },
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk"
                }
              },
              "production": {
                "autoIncrement": true,
                "android": {
                  "buildType": "apk"
                }
              }
            }
          }
          EOL
          
      - name: Build Android app
        run: |
          rm -rf app-build
          mkdir -p app-build
          eas build --local \
          --non-interactive \
          --output=./app-build/app-release.apk \
          --platform=android \
          --profile=production
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: app-build/app-release.apk
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: app-build
          
      - name: Create Tag
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag v1.0.${{ github.run_number }}
          git push origin v1.0.${{ github.run_number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate QR Code and Create Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const core = require('@actions/core');
            
            try {
              // Validate environment and paths
              const apkPath = './app-build/app-release.apk';
              if (!process.env.GITHUB_RUN_NUMBER) {
                throw new Error('GITHUB_RUN_NUMBER is not defined');
              }
              if (!fs.existsSync(apkPath)) {
                throw new Error('APK file not found');
              }
              
              // Configure QR Code options
              const qrConfig = {
                size: 300,
                margin: 1,
                format: 'png',
                dark: '000000',
                light: 'FFFFFF',
                ecLevel: 'Q'
              };
              
              const downloadUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/v1.0.${process.env.GITHUB_RUN_NUMBER}/ksms-mb-v1.0.${process.env.GITHUB_RUN_NUMBER}.apk`;
              
              // Generate QR Code URL with advanced options
              const qrCodeUrl = `https://quickchart.io/qr?text=${encodeURIComponent(downloadUrl)}&size=${qrConfig.size}&margin=${qrConfig.margin}&format=${qrConfig.format}&dark=${qrConfig.dark}&light=${qrConfig.light}&ecLevel=${qrConfig.ecLevel}`;
              
              core.info('Creating release with QR code...');
              const release = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: `v1.0.${process.env.GITHUB_RUN_NUMBER}`,
                name: `Release v1.0.${process.env.GITHUB_RUN_NUMBER}`,
                body: `### KSMS Mobile App Release
                Build number: ${process.env.GITHUB_RUN_NUMBER}
                
                :lock: Scan QR code below to download KSMS Mobile App :iphone:
                
                ![QR Code](${qrCodeUrl})
                
                Or download directly: ${downloadUrl}`,
                draft: false,
                prerelease: true
              });
              
              core.info('Uploading APK file...');
              const apkContent = await fs.promises.readFile(apkPath);
              
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                name: `ksms-mb-v1.0.${process.env.GITHUB_RUN_NUMBER}.apk`,
                data: apkContent
              });
              
              core.info('Release created successfully');
              
            } catch (error) {
              core.setFailed(`Release creation failed: ${error.message}`);
              throw error;
            }
