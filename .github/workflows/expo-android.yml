name: Optimized Local Build and Release (Latest Actions, Input Method)

permissions:
  contents: write
  issues: write
  pull-requests: write
  discussions: write
  packages: write
  actions: write
  repository-projects: write

on:
  push:
    branches: [main, development]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock', 'eas.json', 'app.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      - name: Install dependencies
        run: yarn install
      - name: Set Version
        id: set-version
        run: echo "version=v1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT

  build-android:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install
      - name: Install EAS CLI
        run: yarn global add eas-cli
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradlew', '**/gradle/wrapper/gradle-wrapper.properties', 'build.gradle', '**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Keystore
        run: |
          # Lưu base64 vào tệp trước khi giải mã
          echo '${{ secrets.ANDROID_KEYSTORE_BASE64 }}' > keystore-base64.txt
          
          # Làm sạch tệp base64 (xóa khoảng trắng, xuống dòng không mong muốn)
          tr -d '\n\r\t ' < keystore-base64.txt > keystore-base64-clean.txt
          
          # Giải mã base64 thành binary
          base64 --decode keystore-base64-clean.txt > keystore.jks || {
            echo "Failed to decode base64 keystore"
            exit 1
          }
          
          # Kiểm tra kích thước file keystore để xác nhận thành công
          FILESIZE=$(stat -c%s "keystore.jks")
          echo "Keystore size: $FILESIZE bytes"
          
          if [ "$FILESIZE" -eq 0 ]; then
            echo "Error: Generated keystore is empty!"
            exit 1
          fi
          
          # Đường dẫn tuyệt đối đến keystore
          ABSOLUTE_KEYSTORE_PATH=$(realpath keystore.jks)
          echo "KEYSTORE_PATH=$ABSOLUTE_KEYSTORE_PATH" >> $GITHUB_ENV
      - name: Verify Keystore
        run: |
          # Kiểm tra keystore tồn tại và có kích thước hợp lệ
          if [ ! -f "keystore.jks" ]; then
            echo "Error: Keystore file not found!"
            exit 1
          fi
          
          # Kiểm tra kích thước của keystore (phải > 0 bytes)
          FILESIZE=$(stat -c%s "keystore.jks")
          if [ "$FILESIZE" -eq 0 ]; then
            echo "Error: Keystore file is empty!"
            exit 1
          fi
          
          echo "Keystore verification successful!"
          echo "Keystore size: $FILESIZE bytes"
      - name: Create eas.json
        run: |
          cat > eas.json << EOF
          {
            "cli": {
              "version": ">= 3.13.3",
              "appVersionSource": "remote"
            },
            "build": {
              "production": {
                "autoIncrement": true,
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease",
                  "credentialsSource": "local"
                }
              }
            }
          }
          EOF
      - name: Create credentials.json
        run: |
          # Tạo thư mục .expo và lưu credentials
          mkdir -p .expo
          
          # Format đúng cho credentials.json theo EAS build
          cat > .expo/credentials.json << EOF
          {
            "android": {
              "keystorePath": "${{ env.KEYSTORE_PATH }}",
              "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
              "keyAlias": "${{ secrets.ANDROID_KEYSTORE_ALIAS }}",
              "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
            }
          }
          EOF
          
          # Tạo phiên bản credentials.json trong thư mục gốc (để đảm bảo)
          cp .expo/credentials.json ./credentials.json
          
          # Kiểm tra file đã được tạo
          ls -la .expo/credentials.json
          ls -la credentials.json
      - name: Debug environment
        run: |
          echo "==== Environment Variables ===="
          echo "KEYSTORE_PATH: $KEYSTORE_PATH"
          echo "ANDROID_KEYSTORE_PATH: $ANDROID_KEYSTORE_PATH"
          echo "ANDROID_KEYSTORE_ALIAS is set: ${{ secrets.ANDROID_KEYSTORE_ALIAS != '' }}"
          echo "ANDROID_KEYSTORE_PASSWORD is set: ${{ secrets.ANDROID_KEYSTORE_PASSWORD != '' }}"
          echo "ANDROID_KEY_PASSWORD is set: ${{ secrets.ANDROID_KEY_PASSWORD != '' }}"
          
          echo "==== File System ===="
          echo "Current directory: $(pwd)"
          ls -la
          echo "Keystore:"
          ls -la keystore.jks || echo "Keystore not found!"
          echo "credentials.json:"
          ls -la credentials.json || echo "credentials.json not found!"
          
          echo "==== credentials.json content (masked) ===="
          if [ -f credentials.json ]; then
            cat credentials.json | sed 's/"keyPassword": "[^"]*"/"keyPassword": "***"/g' | sed 's/"keystorePassword": "[^"]*"/"keystorePassword": "***"/g'
          fi
      - name: Build Android app (Local Build)
        run: |
          rm -rf app-build
          mkdir -p app-build
          
          # Xem các biến môi trường EAS
          echo "Checking EAS environment..."
          eas diagnostics
          
          # Thực hiện build với verbose mode
          eas build --local \
          --non-interactive \
          --output=./app-build/app-release.apk \
          --platform=android \
          --profile=production \
          --verbose
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEYSTORE: ${{ env.KEYSTORE_PATH }}
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: app-build/app-release.apk
          retention-days: 1

  release:
    needs: [setup, build-android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./
      - name: Create Tag and Release
        uses: actions/github-script@v7
        env:
          VERSION: ${{ needs.setup.outputs.version }}  # Make version available as an env var
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              // --- Validation and Setup ---
              const apkPath = path.join('./', 'app-release.apk');
              const version = process.env.VERSION; // Access via process.env

              if (!version) {
                throw new Error('Version input is not defined.');
              }
              if (!fs.existsSync(apkPath)) {
                throw new Error('APK file not found at: ' + apkPath);
              }

              // --- QR Code Configuration ---
              const qrConfig = {
                size: 300,
                margin: 1,
                dark: '000000',
                light: 'FFFFFF',
              };
              const downloadUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${version}/ksms-mb-${version}.apk`;
              const qrCodeUrl = `https://quickchart.io/qr?text=${encodeURIComponent(downloadUrl)}&size=${qrConfig.size}&margin=${qrConfig.margin}&dark=${qrConfig.dark}&light=${qrConfig.light}`;


              // --- Release Body (Markdown) ---
              const releaseBody = `
                ### KSMS Mobile App Release

                **Build Information**
                - Version: ${version}
                - Build Number: ${version.substring(5)}
                - Release Date: ${new Date().toISOString().split('T')[0]}

                ### Installation

                1. **Scan QR Code**
                ![QRCode](${qrCodeUrl})

                2. **Direct Download**
                [![Download APK](https://img.shields.io/badge/Download_APK-blue?style=for-the-badge)](${downloadUrl})

                ### Note
                - This is a pre-release version
                - Please report any issues you encounter
              `.trim(); //CRUCIAL

              // --- Create Release ---
              core.info('Creating release...');
              const releaseResponse = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: version,
                name: `Release ${version}`,
                body: releaseBody,
                draft: false,
                prerelease: true,
              });

              if (!releaseResponse.data.id) {
                throw new Error('Failed to create release.');
              }

              // --- Upload APK Asset ---
              core.info('Uploading APK file...');
              const apkContent = fs.readFileSync(apkPath);
              const uploadResponse = await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseResponse.data.id,
                name: `ksms-mb-${version}.apk`,
                data: apkContent,
              });

              if (!uploadResponse.data.id) {
                throw new Error('Failed to upload asset.');
              }

              core.info('Release created successfully!');

            } catch (error) {
              core.setFailed(error.message);
            }
