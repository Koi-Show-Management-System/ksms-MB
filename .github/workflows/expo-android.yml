name: EAS Build Android

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/android-build.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile (development, preview, production)'
        required: true
        default: 'preview'
        type: choice
        options:
          - development
          - preview
          - production

env:
  # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng to√†n c·ª•c
  CACHE_LIFETIME_DAYS: 7
  YARN_NETWORK_TIMEOUT: 300000
  GRADLE_MEMORY: "24g"
  GRADLE_MAX_WORKERS: 14
  METRO_MEMORY: "8192"
  PERSISTENT_CACHE_PATH: "~/.eas-build-cache"

jobs:
  build:
    name: EAS Build Android
    runs-on: [google]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine build profile
        id: profile
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "name=${{ github.event.inputs.profile }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "name=production" >> $GITHUB_OUTPUT
          else
            echo "name=preview" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup build directories
        run: |
          mkdir -p $HOME/expo-tmp
          mkdir -p $HOME/eas-builds/working
          mkdir -p $HOME/eas-builds/artifacts
          mkdir -p $HOME/gradle-build-cache
          mkdir -p $HOME/.eas-build-cache
          
          # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ APK theo ng√†y
          BUILD_DATE=$(date +"%Y-%m-%d")
          STORAGE_DIR=$HOME/ksms-builds/$BUILD_DATE
          mkdir -p $STORAGE_DIR
          echo "STORAGE_DIR=$STORAGE_DIR" >> $GITHUB_ENV
          
          # X√≥a d·ªØ li·ªáu build c≈©
          rm -rf $HOME/eas-builds/working/*
          rm -rf $HOME/expo-tmp/*
          rm -rf $HOME/eas-builds/artifacts/*
          
          # Thi·∫øt l·∫≠p v√† l∆∞u bi·∫øn m√¥i tr∆∞·ªùng
          echo "TMPDIR=$HOME/expo-tmp" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_WORKINGDIR=$HOME/eas-builds/working" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_ARTIFACTS_DIR=$HOME/eas-builds/artifacts" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_SKIP_CLEANUP=1" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV
          
          # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ t·∫≠n d·ª•ng t·ªëi ƒëa ph·∫ßn c·ª©ng
          GRADLE_MEM="${GRADLE_MEMORY}"
          GRADLE_WORKERS="${GRADLE_MAX_WORKERS}"
          METRO_MEM="${METRO_MEMORY}"
          
          echo "GRADLE_OPTS=-Xmx$GRADLE_MEM -XX:MaxMetaspaceSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.jvmargs=-Xmx$GRADLE_MEM -Dorg.gradle.workers.max=$GRADLE_WORKERS -XX:+UseParallelGC" >> $GITHUB_ENV
          
          # B·ªè qua c·∫£nh b√°o v·ªÅ k√Ω t·ª± $ trong ƒë·ªãnh danh C++
          # Fix package versions for Metro
          yarn add metro@^0.81.0 metro-resolver@^0.81.0 metro-config@^0.81.0 --dev
          
          echo "CFLAGS=-Wno-dollar-in-identifier-extension" >> $GITHUB_ENV
      - name: Restore Yarn cache
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-cache-${{ runner.os }}-

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/android/**/build.gradle') }}
          restore-keys: |
            gradle-cache-${{ runner.os }}-

      - name: Restore EAS cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-cache
          key: eas-cache-${{ runner.os }}-${{ hashFiles('eas.json') }}
          restore-keys: |
            eas-cache-${{ runner.os }}-

       
      - name: Install dependencies # ƒê·∫£m b·∫£o 6 kho·∫£ng tr·∫Øng
        run: | # ƒê·∫£m b·∫£o 8 kho·∫£ng tr·∫Øng
           yarn config set network-timeout ${YARN_NETWORK_TIMEOUT}
           yarn install --frozen-lockfile --prefer-offline --network-timeout ${YARN_NETWORK_TIMEOUT} --non-interactive --cache-folder .yarn/cache

      - name: Clean and monitor caches
        run: |
          echo "üßπ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªçn d·∫πp cache..."
          
          # T·∫°o th∆∞ m·ª•c log
          LOG_DIR="${{ env.STORAGE_DIR }}/logs/cache"
          mkdir -p "$LOG_DIR"
          MONITOR_LOG="$LOG_DIR/cache-monitor-${{ env.BUILD_TIMESTAMP }}.log"
          
          # H√†m theo d√µi b·ªô nh·ªõ
          monitor_memory() {
            while true; do
              {
                echo "=== $(date '+%Y-%m-%d %H:%M:%S') ==="
                echo "Memory Status:"
                free -h
                echo ""
                echo "Disk Status:"
                df -h /
                echo ""
              } >> "$MONITOR_LOG"
              sleep 10
            done
          }
          
          # B·∫Øt ƒë·∫ßu theo d√µi trong background
          monitor_memory &
          MONITOR_PID=$!
          trap 'kill $MONITOR_PID 2>/dev/null || true' EXIT
          
          # Function ƒëo l∆∞·ªùng th·ªùi gian
          measure_time() {
            local start=$1
            local end=$2
            local diff=$((end - start))
            echo "$((diff / 60)) ph√∫t $((diff % 60)) gi√¢y"
          }
          
          # D·ªçn d·∫πp t·ª´ng lo·∫°i cache v·ªõi ƒëo l∆∞·ªùng
          clean_cache() {
            local cache_type=$1
            local cache_path=$2
            local start_time=$(date +%s)
            local initial_size=0
            
            if [ -d "$cache_path" ]; then
              initial_size=$(du -s "$cache_path" 2>/dev/null | cut -f1)
              echo "üîç D·ªçn d·∫πp $cache_type cache..."
              echo "  Ban ƒë·∫ßu: $(numfmt --to=iec-i --suffix=B $((initial_size * 1024)))"
              
              find "$cache_path" -type f -atime "+${{ env.CACHE_LIFETIME_DAYS }}" -delete 2>/dev/null || true
              
              local end_time=$(date +%s)
              local final_size=$(du -s "$cache_path" 2>/dev/null | cut -f1)
              local saved_size=$((initial_size - final_size))
              
              {
                echo "=== $cache_type Cache Cleanup ==="
                echo "Th·ªùi gian: $(measure_time $start_time $end_time)"
                echo "K√≠ch th∆∞·ªõc ban ƒë·∫ßu: $(numfmt --to=iec-i --suffix=B $((initial_size * 1024)))"
                echo "K√≠ch th∆∞·ªõc sau: $(numfmt --to=iec-i --suffix=B $((final_size * 1024)))"
                echo "ƒê√£ gi·∫£i ph√≥ng: $(numfmt --to=iec-i --suffix=B $((saved_size * 1024)))"
                echo ""
              } >> "$MONITOR_LOG"
              
              echo "  ‚úÖ Ho√†n th√†nh sau $(measure_time $start_time $end_time)"
              echo "  ƒê√£ gi·∫£i ph√≥ng: $(numfmt --to=iec-i --suffix=B $((saved_size * 1024)))"
            fi
          }
          
          echo "üìä B·∫Øt ƒë·∫ßu d·ªçn d·∫πp cache v·ªõi monitoring..."
          
          # D·ªçn d·∫πp c√°c lo·∫°i cache
          clean_cache "Gradle" "~/.gradle/caches"
          clean_cache "Metro" "$HOME/expo-tmp/metro-cache"
          clean_cache "EAS" "~/.eas-cli"
          
          # T·ªïng h·ª£p b√°o c√°o
          {
            echo "=== Cache Cleanup Summary ==="
            echo "Timestamp: $(date)"
            echo ""
            echo "Final Cache Sizes:"
            du -sh ~/.gradle/caches "$HOME/expo-tmp/metro-cache" ~/.eas-cli 2>/dev/null | \
              awk '{printf "%-20s %s\n", $2":", $1}'
          } >> "$MONITOR_LOG"
          
          echo "üìù Chi ti·∫øt log: $MONITOR_LOG"
      - name: Authenticate with Expo # ƒê·∫£m b·∫£o 6 kho·∫£ng tr·∫Øng
        run: |
          if [ -n "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "Using EXPO_TOKEN for authentication."
            export EXPO_TOKEN="${{ secrets.EXPO_TOKEN }}"
            # Verify token is valid (optional but recommended)
            if ! npx expo whoami &> /dev/null; then
              echo "EXPO_TOKEN is invalid or expired."
              exit 1
            fi
          elif [ -n "${{ secrets.EXPO_USERNAME }}" ] && [ -n "${{ secrets.EXPO_PASSWORD }}" ]; then
            echo "Attempting login with EXPO_USERNAME and EXPO_PASSWORD."
            if ! npx expo login -u "${{ secrets.EXPO_USERNAME }}" -p "${{ secrets.EXPO_PASSWORD }}" --non-interactive; then
              echo "Expo login failed with username/password."
              exit 1
            fi
          else
            echo "Expo credentials (EXPO_TOKEN or EXPO_USERNAME/EXPO_PASSWORD) not found."
            exit 1
          fi
          echo "Expo authentication successful."

      - name: Create custom gradle.properties
        run: |
          # T·∫°o th∆∞ m·ª•c n·∫øu kh√¥ng t·ªìn t·∫°i
          mkdir -p android

          # T·∫°o ho·∫∑c c·∫≠p nh·∫≠t t·ªáp gradle.properties ƒë·ªÉ t·∫≠n d·ª•ng t·ªëi ƒëa ph·∫ßn c·ª©ng
          GRADLE_MEM="${GRADLE_MEMORY}"
          GRADLE_WORKERS="${GRADLE_MAX_WORKERS}"
          
          cat << EOF > android/gradle.properties
          # C·∫•u h√¨nh b·ªô nh·ªõ cho Gradle (s·ª≠ d·ª•ng ~40% RAM c·ªßa m√°y ch·ªß)
          org.gradle.jvmargs=-Xmx$GRADLE_MEM -XX:MaxMetaspaceSize=4g -XX:+HeapDumpOnOutOfMemoryError -XX:+UseParallelGC # B·ªè -XX:+UseNUMA
          
          # T·ªëi ∆∞u h√≥a hi·ªáu su·∫•t Gradle
          org.gradle.daemon=true
          org.gradle.parallel=true
          org.gradle.configureondemand=true
          org.gradle.caching=true
          org.gradle.workers.max=$GRADLE_WORKERS
          
          # Th·ªùi gian ch·ªù m·∫°ng
          org.gradle.internal.http.connectionTimeout=120000
          org.gradle.internal.http.socketTimeout=120000
          
          # T·ªëi ∆∞u h√≥a bi√™n d·ªãch
          kotlin.incremental=true
          kotlin.incremental.useClasspathSnapshot=true
          
          # C·∫•u h√¨nh Android
          android.useAndroidX=true
          android.enableJetifier=true
          android.enableR8.fullMode=true
          android.enableDexingArtifactTransform.desugaring=true
          android.bundletool.enable.command.line.interface=true
          
          # T·ªëi ∆∞u h√≥a NDK
          android.buildTypes.release.ndk.debugSymbolLevel=FULL
          android.defaults.buildfeatures.buildconfig=true
          
          # C·∫•u h√¨nh NDK ƒë·ªÉ b·ªè qua c·∫£nh b√°o v√† t·ªëi ∆∞u h√≥a
          android.externalNativeBuild.cmake.arguments=-DCMAKE_CXX_FLAGS="-Wno-dollar-in-identifier-extension" -DCMAKE_C_FLAGS="-Wno-dollar-in-identifier-extension" -DCMAKE_BUILD_PARALLEL_LEVEL=$GRADLE_WORKERS # B·ªè -fopenmp
          
          # C·∫•u h√¨nh Metro bundler (React Native)
          reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
          
          # C·∫•u h√¨nh Hermes
          hermesEnabled=true
          EOF
          
          echo "ƒê√£ t·∫°o/c·∫≠p nh·∫≠t android/gradle.properties"

      - name: Configure Metro Bundler
        run: |
          echo "‚öôÔ∏è C·∫•u h√¨nh Metro bundler cho hi·ªáu nƒÉng t·ªëi ∆∞u..."
          
          # T√≠nh to√°n c·∫•u h√¨nh d·ª±a tr√™n t√†i nguy√™n h·ªá th·ªëng
          TOTAL_MEM=$(free -g | awk 'NR==2 {print $2}')
          CPU_CORES=$(nproc)
          METRO_MEM=${{ env.METRO_MEMORY }}
          WORKERS=${{ env.GRADLE_MAX_WORKERS }}
          
          # T√≠nh to√°n s·ªë l∆∞·ª£ng workers t·ªëi ∆∞u
          OPTIMAL_WORKERS=$(( TOTAL_MEM > 16 ? WORKERS : WORKERS / 2 ))
          WORKER_MEM=$(( METRO_MEM / OPTIMAL_WORKERS ))
          
          cat << EOF > metro.config.js.tmp
          // C·∫•u h√¨nh t·ªëi ∆∞u h√≥a cho Metro bundler
          const { getDefaultConfig } = require('@expo/metro-config');
          const defaultConfig = getDefaultConfig(__dirname);
          const path = require('path');
          
          const OPTIMAL_WORKERS = $OPTIMAL_WORKERS;
          const WORKER_MEM = $WORKER_MEM;
          
          module.exports = {
            ...defaultConfig,
            
            // Workers configuration
            maxWorkers: OPTIMAL_WORKERS,
            maxConcurrentWorkers: OPTIMAL_WORKERS,
            maxWorkerMemoryUsage: WORKER_MEM * 1024 * 1024,
            
            transformer: {
              ...defaultConfig.transformer,
              
              // Minification optimization
              minifierConfig: {
                compress: {
                  reduce_funcs: false,
                  passes: 2,
                  keep_infinity: true,
                  typeofs: false,
                  inline: 1,
                  drop_console: true,
                  pure_getters: true,
                  unsafe: true
                },
                mangle: {
                  toplevel: true,
                  keep_classnames: true,
                  keep_fnames: true
                },
                output: {
                  ascii_only: true,
                  quote_style: 1,
                  wrap_iife: true,
                  beautify: false
                }
              },
              
              // Build optimization
              unstable_disableModuleWrapping: true,
              enableBabelRCLookup: false,
              unstable_transformProfile: "hermes-stable",
              unstable_allowRequireContext: true,
              
              // Worker configuration
              workerPath: require.resolve('metro/src/DeltaBundler/Worker'),
              workerMemoryLimit: WORKER_MEM * 1024 * 1024,
              workerParallelJobs: 2,
              
              // Source maps config for production
              minifierPath: 'metro-minify-terser',
              sourceMap: false,
            },
            
            resolver: {
              ...defaultConfig.resolver,
              
              // Resolution optimization
              useWatchman: true,
              disableHierarchicalLookup: true,
              enableGlobalPackages: false,
              disableHierarchicalLookup: true,
              unstable_enableSymlinks: true,
              
              // Blacklist optimization
              blockList: /\\.(android|ios|web)\\.js$/,
              
              // Cache configuration
              cachePrunePeriod: 24 * 60 * 60 * 1000,
              cacheVersion: '1.0',
              
              // Module resolution
              extraNodeModules: new Proxy({}, {
                get: (_, name) => path.join(__dirname, 'node_modules', name),
              }),
            },
            
            server: {
              port: process.env.METRO_PORT || 8081,
              enhanceMiddleware: (middleware) => {
                return (req, res, next) => {
                  res.setHeader('Cache-Control', 'public, max-age=31536000');
                  return middleware(req, res, next);
                };
              },
            },
            
            // Cache configuration
            cacheStores: [
              {
                type: "fs",
                options: {
                  root: process.env.METRO_CACHE_DIR || "$HOME/expo-tmp/metro-cache",
                  compression: 'gzip',
                  maxSize: 1024 * 1024 * 1024, // 1GB
                }
              }
            ],
            
            // Performance optimization
            resetCache: false,
            cacheVersion: '1.0',
            hasteMapCacheDirectory: "$HOME/expo-tmp/metro-cache/haste",
            watchFolders: [
              path.resolve(__dirname, 'node_modules'),
              path.resolve(__dirname, 'src'),
            ],
            
            // Serialization optimization
            serializer: {
              ...defaultConfig.serializer,
              createModuleIdFactory: () => {
                const fileToIdMap = new Map();
                let nextId = 0;
                return (path) => {
                  let id = fileToIdMap.get(path);
                  if (typeof id !== 'number') {
                    id = nextId++;
                    fileToIdMap.set(path, id);
                  }
                  return id;
                };
              },
            },
          };
          EOF
          
          # Ch·ªâ thay th·∫ø metro.config.js n·∫øu t·ªáp m·ªõi ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng
          if [ -f metro.config.js.tmp ]; then
            # Sao l∆∞u t·ªáp hi·ªán t·∫°i n·∫øu c√≥
            if [ -f metro.config.js ]; then
              cp metro.config.js metro.config.js.bak
            fi
            mv metro.config.js.tmp metro.config.js
            echo "ƒê√£ c·∫•u h√¨nh metro.config.js cho hi·ªáu su·∫•t t·ªëi ∆∞u"
            cat metro.config.js
          else
            echo "Kh√¥ng th·ªÉ t·∫°o t·ªáp metro.config.js m·ªõi"
          fi

      - name: Create eas.json optimization
        run: |
          # T·∫°o t·ªáp eas.json t·∫°m th·ªùi v·ªõi c√°c t√πy ch·ªçn t·ªëi ∆∞u
          WORKERS="${GRADLE_MAX_WORKERS}"
          
          cat << EOF > eas.json.tmp
          {
            "build": {
              "development": {
                "developmentClient": true,
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleDebug -PmaxWorkers=$WORKERS"
                }
              },
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease -PmaxWorkers=$WORKERS"
                }
              },
              "production": {
                "android": {
                  "buildType": "app-bundle",
                  "gradleCommand": ":app:bundleRelease -PmaxWorkers=$WORKERS"
                }
              }
            }
          }
          EOF
          
          # Ki·ªÉm tra n·∫øu t·ªáp eas.json hi·ªán t·∫°i t·ªìn t·∫°i
          if [ -f eas.json ]; then
            # H·ª£p nh·∫•t n·ªôi dung m·ªõi v·ªõi t·ªáp hi·ªán t·∫°i
            echo "Sao l∆∞u eas.json g·ªëc"
            cp eas.json eas.json.bak
            
            # Th·ª≠ s·ª≠ d·ª•ng jq ƒë·ªÉ h·ª£p nh·∫•t c·∫•u h√¨nh
            if command -v jq &> /dev/null; then
              echo "H·ª£p nh·∫•t c·∫•u h√¨nh eas.json m·ªõi v√†o t·ªáp hi·ªán t·∫°i"
              jq -s '.[0] * .[1]' eas.json eas.json.tmp > eas.json.new
              mv eas.json.new eas.json
            else
              # N·∫øu kh√¥ng c√≥ jq, s·ª≠ d·ª•ng t·ªáp m·ªõi
              echo "C√¥ng c·ª• jq kh√¥ng c√≥ s·∫µn, thay th·∫ø eas.json b·∫±ng phi√™n b·∫£n m·ªõi"
              mv eas.json.tmp eas.json
            fi
          else
            # N·∫øu kh√¥ng t·ªìn t·∫°i, s·ª≠ d·ª•ng t·ªáp m·ªõi
            echo "T·ªáp eas.json kh√¥ng t·ªìn t·∫°i, t·∫°o m·ªõi"
            mv eas.json.tmp eas.json
          fi
          
          rm -f eas.json.tmp
          echo "ƒê√£ c·∫•u h√¨nh eas.json cho hi·ªáu su·∫•t t·ªëi ∆∞u"
          cat eas.json

      - name: Check environment and dependencies
        id: check-env
        run: |
          # Ki·ªÉm tra Node.js version
          NODE_VERSION=$(node -v)
          echo "Node version: $NODE_VERSION"
          if [[ ! "$NODE_VERSION" =~ ^v18 ]]; then
            echo "warning=Node.js version not 18.x" >> $GITHUB_OUTPUT
          fi
          
          # Ki·ªÉm tra Yarn version
          YARN_VERSION=$(yarn -v)
          echo "Yarn version: $YARN_VERSION"
          
          # Ki·ªÉm tra kh√¥ng gian ƒëƒ©a
          DISK_SPACE=$(df -h / | awk 'NR==2 {print $4}')
          echo "Available disk space: $DISK_SPACE"
          if [[ "${DISK_SPACE%G*}" -lt 20 ]]; then
            echo "warning=Low disk space available" >> $GITHUB_OUTPUT
          fi
          
          # Ki·ªÉm tra RAM available
          FREE_MEM=$(free -g | awk 'NR==2 {print $4}')
          echo "Available RAM: ${FREE_MEM}G"
          if [[ "$FREE_MEM" -lt 4 ]]; then
            echo "warning=Low memory available" >> $GITHUB_OUTPUT
          fi

      - name: Check and validate cache
        id: check-cache
        run: |
          # ƒê·ªãnh nghƒ©a c√°c path c·∫ßn ki·ªÉm tra
          CACHE_PATHS=(
            "~/.gradle/caches"
            "~/.gradle/wrapper"
            "~/.android"
            "~/.npm"
            "node_modules"
            ".yarn/cache"
            "${{ github.workspace }}/android-sdk"
            "${{ env.TMPDIR }}/metro-cache"
          )
          
          # Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa cache paths
          CACHE_STATUS="valid"
          CORRUPT_PATHS=()
          
          for path in "${CACHE_PATHS[@]}"; do
            FULL_PATH=$(eval echo $path)
            echo "Checking $path..."
            
            # Ki·ªÉm tra t·ªìn t·∫°i
            if [ ! -d "$FULL_PATH" ]; then
              echo "Directory not found: $path"
              CACHE_STATUS="missing"
              CORRUPT_PATHS+=("$path")
              continue
            fi
            
            # Ki·ªÉm tra quy·ªÅn truy c·∫≠p
            if [ ! -r "$FULL_PATH" ] || [ ! -w "$FULL_PATH" ]; then
              echo "Permission issues with: $path"
              CACHE_STATUS="permission_error"
              CORRUPT_PATHS+=("$path")
              continue
            fi
            
            # Ki·ªÉm tra k√≠ch th∆∞·ªõc (warning n·∫øu qu√° l·ªõn)
            SIZE=$(du -sm "$FULL_PATH" 2>/dev/null | cut -f1)
            if [ "$SIZE" -gt 5000 ]; then # 5GB
              echo "Warning: $path is too large ($SIZE MB)"
              echo "warning=Large cache size detected" >> $GITHUB_OUTPUT
            fi
          done
          
          # T·∫°o cache key v·ªõi version
          CACHE_VERSION="v2"  # TƒÉng version khi thay ƒë·ªïi c·∫•u tr√∫c cache
          CACHE_KEY="${{ runner.os }}-build-${CACHE_VERSION}-${{ hashFiles('**/yarn.lock', '**/package.json', 'android/**/build.gradle', 'android/gradle/wrapper/gradle-wrapper.properties') }}"
          
          # Output k·∫øt qu·∫£
          echo "cache_status=$CACHE_STATUS" >> $GITHUB_OUTPUT
          echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT
          echo "corrupt_paths=${CORRUPT_PATHS[*]}" >> $GITHUB_OUTPUT

      # Hi·ªÉn th·ªã c·∫£nh b√°o t·ª´ ki·ªÉm tra m√¥i tr∆∞·ªùng
      - name: Show environment warnings
        if: steps.check-env.outputs.warning
        run: |
          echo "‚ö†Ô∏è Environment warnings:"
          echo "${{ steps.check-env.outputs.warning }}"
          
      # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p cache kh√°c nhau
      - name: Handle cache scenarios
        id: cache-handler
        run: |
          case "${{ steps.check-cache.outputs.cache_status }}" in
            "valid")
              echo "Cache status: Valid - attempting to restore"
              echo "action=restore" >> $GITHUB_OUTPUT
              ;;
            "missing")
              echo "Cache status: Missing directories - will create fresh cache"
              echo "action=fresh" >> $GITHUB_OUTPUT
              ;;
            "permission_error")
              echo "Cache status: Permission issues detected"
              echo "Affected paths: ${{ steps.check-cache.outputs.corrupt_paths }}"
              echo "Will attempt to fix permissions and rebuild cache"
              echo "action=fix_permissions" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "Cache status: Unknown issue - will create fresh environment"
              echo "action=fresh" >> $GITHUB_OUTPUT
              ;;
          esac

      # S·ª≠a quy·ªÅn truy c·∫≠p cache n·∫øu c·∫ßn
      - name: Fix cache permissions
        if: steps.cache-handler.outputs.action == 'fix_permissions'
        run: |
          echo "Fixing permissions for corrupt paths..."
          IFS=' ' read -ra CORRUPT_PATHS <<< "${{ steps.check-cache.outputs.corrupt_paths }}"
          for path in "${CORRUPT_PATHS[@]}"; do
            FULL_PATH=$(eval echo $path)
            if [ -e "$FULL_PATH" ]; then
              echo "Fixing permissions for $path"
              sudo chown -R $(id -u):$(id -g) "$FULL_PATH"
              sudo chmod -R 755 "$FULL_PATH"
            fi
          done

      # Restore cache n·∫øu h·ª£p l·ªá
      - name: Restore cache
        if: steps.cache-handler.outputs.action == 'restore'
        uses: actions/cache/restore@v3
        id: cache-restore
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android
            ~/.npm
            node_modules
            .yarn/cache
            ${{ github.workspace }}/android-sdk
            ${{ env.TMPDIR }}/metro-cache
          key: ${{ steps.check-cache.outputs.cache_key }}
          restore-keys: |
            ${{ runner.os }}-build-${{ steps.check-cache.outputs.cache_version }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # T·∫°o m√¥i tr∆∞·ªùng m·ªõi n·∫øu c·∫ßn
      - name: Setup fresh environment
        if: |
          steps.cache-handler.outputs.action == 'fresh' ||
          (steps.cache-handler.outputs.action == 'restore' && steps.cache-restore.outputs.cache-hit != 'true') ||
          (steps.cache-handler.outputs.action == 'fix_permissions' && steps.cache-restore.outputs.cache-hit != 'true')
        run: |
          echo "Setting up fresh build environment..."
          
          # D·ªçn d·∫πp m√¥i tr∆∞·ªùng c≈©
          rm -rf ~/.gradle/caches ~/.gradle/wrapper ~/.android ~/.npm node_modules .yarn/cache ${{ github.workspace }}/android-sdk ${{ env.TMPDIR }}/metro-cache
          
          # T·∫°o th∆∞ m·ª•c m·ªõi
          mkdir -p ${{ github.workspace }}/android-sdk ~/.gradle ~/.android ~/.npm node_modules .yarn/cache ${{ env.TMPDIR }}/metro-cache
          
          # C√†i ƒë·∫∑t Android SDK
          # Create proper SDK directory structure
          mkdir -p ${{ github.workspace }}/android-sdk/cmdline-tools/latest
          cd ${{ github.workspace }}/android-sdk
          
          # Download and extract to temporary location
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip commandlinetools-linux-9477386_latest.zip
          
          # Move contents to proper location
          mv cmdline-tools/* cmdline-tools/latest/
          rm commandlinetools-linux-9477386_latest.zip
          
          # Set SDK root environment variable
          export ANDROID_SDK_ROOT=${{ github.workspace }}/android-sdk
          
          # Thi·∫øt l·∫≠p quy·ªÅn truy c·∫≠p
          chmod -R 755 .
          
          # Ch·∫•p nh·∫≠n licenses
          yes | cmdline-tools/bin/sdkmanager --licenses || true
          
          # C√†i ƒë·∫∑t packages v·ªõi retry v√† verify
          for i in {1..3}; do
            echo "Installing Android packages (Attempt $i)..."
            
            # X√≥a c√†i ƒë·∫∑t c≈© n·∫øu c√≥
            $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --uninstall "platform-tools" "platforms;android-34" "build-tools;34.0.0" "ndk;25.1.8937393" "cmake;3.22.1" || true
            
            if $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install \
               "platform-tools" \
               "platforms;android-34" \
               "build-tools;34.0.0" \
               "ndk;25.1.8937393" \
               "cmake;3.22.1"; then
              echo "Waiting for package installation to complete..."
              sleep 30  # Ch·ªù ƒë·ªÉ ƒë·∫£m b·∫£o c√†i ƒë·∫∑t ho√†n t·∫•t
              
              # Verify c√†i ƒë·∫∑t
              if $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --list_installed | grep -q "platform-tools"; then
                echo "‚úÖ Platform tools installed successfully"
                break
              fi
            fi
            
            echo "‚ö†Ô∏è Attempt $i failed, retrying after cleanup..."
            rm -rf platform-tools build-tools platforms  # Cleanup failed install
            sleep 10
          done
          
          # Double check installation
          if ! $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT --list_installed | grep -q "platform-tools"; then
            echo "‚ùå Failed to install Android packages after 3 attempts"
            exit 1
          fi
          
          # C√†i ƒë·∫∑t Node dependencies v·ªõi retry v√† cleanup
          for i in {1..3}; do
            rm -rf node_modules
            if yarn install --frozen-lockfile --network-timeout ${{ env.YARN_NETWORK_TIMEOUT }}; then
              break
            fi
            echo "Attempt $i failed, retrying..."
            yarn cache clean
            sleep 5
          done

      # L∆∞u cache m·ªõi ho·∫∑c ƒë√£ s·ª≠a
      - name: Save cache
        if: |
          steps.cache-handler.outputs.action != 'restore' ||
          steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android
            ~/.npm
            node_modules
            .yarn/cache
            ${{ github.workspace }}/android-sdk
            ${{ env.TMPDIR }}/metro-cache
          key: ${{ steps.check-cache.outputs.cache_key }}

      # X√°c th·ª±c m√¥i tr∆∞·ªùng to√†n di·ªán
      - name: Verify and setup build environment
        run: |
          echo "Verifying build environment..."
          
          # Setup Android SDK n·∫øu ch∆∞a c√≥
          ANDROID_SDK_ROOT="${{ github.workspace }}/android-sdk"
          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            echo "Installing Android SDK..."
            mkdir -p $ANDROID_SDK_ROOT
            cd $ANDROID_SDK_ROOT
            
            # T·∫£i v√† c√†i ƒë·∫∑t command line tools
            wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
            unzip commandlinetools-linux-9477386_latest.zip
            rm commandlinetools-linux-9477386_latest.zip
            
            # Ch·∫•p nh·∫≠n licenses
            yes | cmdline-tools/bin/sdkmanager --licenses
            
            # C√†i ƒë·∫∑t c√°c components c·∫ßn thi·∫øt
            cmdline-tools/bin/sdkmanager --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"
            
            cd -
          fi
          
          # Function ƒë·ªÉ ki·ªÉm tra v√† c√†i ƒë·∫∑t l·∫°i n·∫øu c·∫ßn
          verify_component() {
            local name=$1
            local path=$2
            local install_cmd=$3
            local type=${4:-directory}
            
            echo "Checking $name..."
            if [ "$type" = "directory" ] && [ ! -d "$path" ]; then
              echo "‚ùå Missing $name at: $path"
              if [ -n "$install_cmd" ]; then
                echo "Attempting to install $name..."
                eval "$install_cmd"
                if [ ! -d "$path" ]; then
                  return 1
                fi
              else
                return 1
              fi
            elif [ "$type" = "file" ] && [ ! -f "$path" ]; then
              echo "‚ùå Missing $name at: $path"
              if [ -n "$install_cmd" ]; then
                echo "Attempting to install $name..."
                eval "$install_cmd"
                if [ ! -f "$path" ]; then
                  return 1
                fi
              else
                return 1
              fi
            fi
            echo "‚úÖ $name verification passed"
            return 0
          }

          # H√†m c√†i ƒë·∫∑t v·ªõi retry logic
          install_with_retry() {
            local component=$1
            local install_cmd=$2
            local max_retries=3
            local retry_count=0
            
            while [ $retry_count -lt $max_retries ]; do
              echo "Installing $component (Attempt $(($retry_count + 1))/$max_retries)..."
              if eval "$install_cmd"; then
                echo "‚úÖ Successfully installed $component"
                return 0
              else
                retry_count=$(($retry_count + 1))
                if [ $retry_count -lt $max_retries ]; then
                  echo "‚ö†Ô∏è Failed to install $component, retrying in 30 seconds..."
                  sleep 30
                fi
              fi
            done
            
            echo "‚ùå Failed to install $component after $max_retries attempts"
            return 1
          }

          # Ki·ªÉm tra v√† c√†i ƒë·∫∑t Android SDK components
          echo "üì± Verifying Android SDK components..."
          SDK_ROOT="${{ github.workspace }}/android-sdk"
          
          # ƒê·ªãnh nghƒ©a c√°c l·ªánh c√†i ƒë·∫∑t cho t·ª´ng component
          CMD_INSTALL="cd $SDK_ROOT && yes | ./cmdline-tools/bin/sdkmanager --install 'cmdline-tools;latest'"
          PLATFORM_INSTALL="cd $SDK_ROOT && yes | ./cmdline-tools/bin/sdkmanager --install 'platform-tools'"
          BUILD_TOOLS_INSTALL="cd $SDK_ROOT && yes | ./cmdline-tools/bin/sdkmanager --install 'build-tools;34.0.0'"
          
          # Ki·ªÉm tra v√† c√†i ƒë·∫∑t c√°c components
          COMPONENTS=(
            "Command line tools:$SDK_ROOT/cmdline-tools:$CMD_INSTALL:directory"
            "Platform tools:$SDK_ROOT/platform-tools:$PLATFORM_INSTALL:directory"
            "Build tools:$SDK_ROOT/build-tools:$BUILD_TOOLS_INSTALL:directory"
            "ADB:$SDK_ROOT/platform-tools/adb:$PLATFORM_INSTALL:file"
            "AAPT:$SDK_ROOT/build-tools/34.0.0/aapt:$BUILD_TOOLS_INSTALL:file"
            "DX:$SDK_ROOT/build-tools/34.0.0/dx:$BUILD_TOOLS_INSTALL:file"
          )
          
          for component in "${COMPONENTS[@]}"; do
            IFS=: read -r name path install_cmd type <<< "$component"
            if ! verify_component "$name" "$path" "" "$type"; then
              echo "üîÑ Component $name missing, attempting installation..."
              if ! install_with_retry "$name" "$install_cmd"; then
                echo "‚ùå Failed to install $name"
                exit 1
              fi
              # Verify again after installation
              if ! verify_component "$name" "$path" "" "$type"; then
                echo "‚ùå Component $name still missing after installation"
                exit 1
              fi
            fi
          done
          
          # Th√™m Android SDK v√†o PATH
          echo "Adding Android SDK to PATH..."
          export ANDROID_HOME=$SDK_ROOT
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
          
          # Ki·ªÉm tra Node.js environment
          echo "üì¶ Verifying Node.js environment..."
          
          # Ki·ªÉm tra node_modules v√† package.json
          verify_component "node_modules directory" "node_modules" || exit 1
          verify_component "package.json" "package.json" "file" || exit 1
          
          # Ki·ªÉm tra c√°c package quan tr·ªçng v√† dependencies c·ªßa ch√∫ng
          REQUIRED_PACKAGES=(
            "@babel/core:@babel/parser"
            "react-native:react-native/package.json"
            "expo:expo/package.json"
            "typescript:typescript/lib/typescript.js"
            "@types/react-native:@types/react-native/index.d.ts"
            "expo-cli:expo-cli/package.json"
          )
          
          echo "Verifying required packages..."
          for package_check in "${REQUIRED_PACKAGES[@]}"; do
            package="${package_check%%:*}"
            check_file="${package_check#*:}"
            
            if [ ! -d "node_modules/$package" ]; then
              echo "‚ùå Missing package: $package"
              # Th·ª≠ c√†i ƒë·∫∑t l·∫°i package
              echo "Attempting to reinstall $package..."
              yarn add $package || exit 1
            fi
            
            if [ ! -f "node_modules/$package/$check_file" ]; then
              echo "‚ùå Package $package seems corrupted (missing $check_file)"
              exit 1
            fi
          done
          echo "‚úÖ Node.js environment verification passed"
          
          # Ki·ªÉm tra Gradle environment
          echo "üêò Verifying Gradle environment..."
          
          # Ki·ªÉm tra c·∫•u tr√∫c th∆∞ m·ª•c Android
          ANDROID_FILES=(
            "android/gradlew:file"
            "android/gradle.properties:file"
            "android/build.gradle:file"
            "android/settings.gradle:file"
            "android/app:directory"
            "android/app/src:directory"
          )
          
          for check in "${ANDROID_FILES[@]}"; do
            path="${check%%:*}"
            type="${check#*:}"
            name=$(basename "$path")
            
            verify_component "Gradle $name" "$path" "$type" || {
              echo "Attempting to fix Gradle environment..."
              if [ "$name" = "gradlew" ]; then
                cd android && gradle wrapper && cd .. || exit 1
              fi
              verify_component "Gradle $name" "$path" "$type" || exit 1
            }
          done
          
          # Ki·ªÉm tra Gradle wrapper
          chmod +x android/gradlew
          if ! ./android/gradlew --version > /dev/null; then
            echo "‚ùå Gradle wrapper validation failed"
            exit 1
          fi
          echo "‚úÖ Gradle environment verification passed"
          
          # Ki·ªÉm tra quy·ªÅn truy c·∫≠p v√† t√†i nguy√™n h·ªá th·ªëng
          echo "üîí Verifying permissions and system resources..."
          
          # Ki·ªÉm tra v√† s·ª≠a quy·ªÅn truy c·∫≠p cho c√°c th∆∞ m·ª•c quan tr·ªçng
          CRITICAL_DIRS=(
            "~/.gradle:Gradle cache"
            "~/.android:Android config"
            "node_modules:Node modules"
            "${{ github.workspace }}/android-sdk:Android SDK"
            "${{ env.TMPDIR }}/metro-cache:Metro cache"
          )
          
          for dir_info in "${CRITICAL_DIRS[@]}"; do
            dir="${dir_info%%:*}"
            desc="${dir_info#*:}"
            full_path=$(eval echo "$dir")
            
            echo "Checking permissions for $desc..."
            if [ ! -d "$full_path" ]; then
              echo "‚ö†Ô∏è Directory not found: $full_path"
              mkdir -p "$full_path" || {
                echo "‚ùå Failed to create directory: $full_path"
                exit 1
              }
            fi
            
            if [ ! -r "$full_path" ] || [ ! -w "$full_path" ]; then
              echo "‚ö†Ô∏è Fixing permissions for $desc..."
              sudo chown -R $(id -u):$(id -g) "$full_path"
              sudo chmod -R 755 "$full_path"
              
              if [ ! -r "$full_path" ] || [ ! -w "$full_path" ]; then
                echo "‚ùå Failed to fix permissions for: $full_path"
                exit 1
              fi
            fi
          done
          echo "‚úÖ Permissions verification passed"
          
          # Ki·ªÉm tra t√†i nguy√™n h·ªá th·ªëng
          echo "üíª Checking system resources..."
          
          # Ki·ªÉm tra CPU cores
          CPU_CORES=$(nproc)
          echo "Available CPU cores: $CPU_CORES"
          if [ "$CPU_CORES" -lt 2 ]; then
            echo "‚ùå Insufficient CPU cores (minimum 2 required)"
            exit 1
          fi
          
          # Ki·ªÉm tra RAM
          TOTAL_MEM=$(free -g | awk 'NR==2 {print $2}')
          FREE_MEM=$(free -g | awk 'NR==2 {print $4}')
          echo "Memory - Total: ${TOTAL_MEM}G, Free: ${FREE_MEM}G"
          
          if [ "$FREE_MEM" -lt 4 ]; then
            echo "‚ùå Insufficient memory available (${FREE_MEM}G). Minimum 4GB required."
            exit 1
          fi
          
          # Ki·ªÉm tra disk space v·ªõi c√°c ng∆∞·ª°ng
          SPACE_AVAILABLE=$(df -h / | awk 'NR==2 {print $4}' | sed 's/G//')
          echo "Available disk space: ${SPACE_AVAILABLE}G"
          
          if (( $(echo "$SPACE_AVAILABLE < 5" | bc -l) )); then
            echo "‚ùå Critical: Extremely low disk space: ${SPACE_AVAILABLE}G"
            exit 1
          elif (( $(echo "$SPACE_AVAILABLE < 10" | bc -l) )); then
            echo "‚ö†Ô∏è Warning: Low disk space: ${SPACE_AVAILABLE}G"
          fi
          
          # Ki·ªÉm tra load average
          LOAD_AVG=$(uptime | awk -F'[a-z]:' '{ print $2}' | cut -d, -f1)
          echo "Current system load: $LOAD_AVG"
          
          if (( $(echo "$LOAD_AVG > $CPU_CORES" | bc -l) )); then
            echo "‚ö†Ô∏è Warning: High system load detected"
          fi
          
          # T·∫°o b√°o c√°o t·ªïng h·ª£p
          mkdir -p "${{ env.STORAGE_DIR }}/reports"
          REPORT_FILE="${{ env.STORAGE_DIR }}/reports/environment-verification.log"
          
          {
            echo "=== Build Environment Verification Report ==="
            echo "Timestamp: $(date)"
            echo ""
            
            echo "=== System Resources ==="
            echo "CPU Cores: $CPU_CORES"
            echo "Total Memory: ${TOTAL_MEM}G"
            echo "Free Memory: ${FREE_MEM}G"
            echo "Available Disk Space: ${SPACE_AVAILABLE}G"
            echo "System Load: $LOAD_AVG"
            echo ""
            
            echo "=== Android SDK Components ==="
            for component in "${COMPONENTS[@]}"; do
              IFS=: read -r name path _ _ <<< "$component"
              if verify_component "$name" "$path" "" "directory" &>/dev/null || \
                 verify_component "$name" "$path" "" "file" &>/dev/null; then
                echo "‚úÖ $name: Installed and verified"
              else
                echo "‚ùå $name: Not installed or verification failed"
              fi
            done
            echo ""

            echo "=== Node.js Environment ==="
            echo "Node.js Version: $NODE_VERSION"
            echo "Yarn Version: $YARN_VERSION"
            for package_check in "${REQUIRED_PACKAGES[@]}"; do
              package="${package_check%%:*}"
              if [ -d "node_modules/$package" ]; then
                echo "‚úÖ $package: Installed"
              else
                echo "‚ùå $package: Missing"
              fi
            done
            echo ""
            
            echo "=== Gradle Environment ==="
            ./android/gradlew --version 2>/dev/null || echo "‚ùå Gradle wrapper validation failed"
            echo ""
            
            echo "=== Directory Permissions ==="
            for dir_info in "${CRITICAL_DIRS[@]}"; do
              dir="${dir_info%%:*}"
              desc="${dir_info#*:}"
              full_path=$(eval echo "$dir")
              if [ -r "$full_path" ] && [ -w "$full_path" ]; then
                echo "‚úÖ $desc: Read/Write access OK"
              else
                echo "‚ùå $desc: Permission issues"
              fi
            done
          } > "$REPORT_FILE"

          # T√≠nh to√°n v√† hi·ªÉn th·ªã t√≥m t·∫Øt b√°o c√°o
          TOTAL_COMPONENTS=${#COMPONENTS[@]}
          INSTALLED_COMPONENTS=0
          for component in "${COMPONENTS[@]}"; do
            IFS=: read -r name path _ _ <<< "$component"
            if verify_component "$name" "$path" "" "directory" &>/dev/null || \
               verify_component "$name" "$path" "" "file" &>/dev/null; then
              INSTALLED_COMPONENTS=$((INSTALLED_COMPONENTS + 1))
            fi
          done

          TOTAL_PACKAGES=${#REQUIRED_PACKAGES[@]}
          INSTALLED_PACKAGES=0
          for package_check in "${REQUIRED_PACKAGES[@]}"; do
            package="${package_check%%:*}"
            if [ -d "node_modules/$package" ]; then
              INSTALLED_PACKAGES=$((INSTALLED_PACKAGES + 1))
            fi
          done

          echo "=== Build Environment Summary ==="
          echo "üìä System Resources:"
          echo "  ‚Ä¢ CPU: $CPU_CORES cores"
          echo "  ‚Ä¢ Memory: ${FREE_MEM}G free of ${TOTAL_MEM}G total"
          echo "  ‚Ä¢ Disk: ${SPACE_AVAILABLE}G available"
          echo "  ‚Ä¢ Load: $LOAD_AVG"
          echo ""
          echo "üì± Android SDK: $INSTALLED_COMPONENTS/$TOTAL_COMPONENTS components"
          echo "üì¶ Node.js Packages: $INSTALLED_PACKAGES/$TOTAL_PACKAGES required"
          echo ""

          # T√≠nh ƒëi·ªÉm s·ª©c kh·ªèe m√¥i tr∆∞·ªùng
          HEALTH_SCORE=0
          
          # ƒêi·ªÉm cho t√†i nguy√™n h·ªá th·ªëng (30 ƒëi·ªÉm)
          if [ "$CPU_CORES" -ge 4 ]; then HEALTH_SCORE=$((HEALTH_SCORE + 10)); fi
          if [ "$FREE_MEM" -ge 8 ]; then HEALTH_SCORE=$((HEALTH_SCORE + 10)); fi
          if (( $(echo "$SPACE_AVAILABLE >= 20" | bc -l) )); then HEALTH_SCORE=$((HEALTH_SCORE + 10)); fi
          
          # ƒêi·ªÉm cho Android SDK (40 ƒëi·ªÉm)
          SDK_SCORE=$((INSTALLED_COMPONENTS * 40 / TOTAL_COMPONENTS))
          HEALTH_SCORE=$((HEALTH_SCORE + SDK_SCORE))
          
          # ƒêi·ªÉm cho Node.js environment (30 ƒëi·ªÉm)
          NODE_SCORE=$((INSTALLED_PACKAGES * 30 / TOTAL_PACKAGES))
          HEALTH_SCORE=$((HEALTH_SCORE + NODE_SCORE))

          if [ "$HEALTH_SCORE" -ge 90 ]; then
            echo "üü¢ Environment Health Score: $HEALTH_SCORE/100 (Excellent)"
          elif [ "$HEALTH_SCORE" -ge 70 ]; then
            echo "üü° Environment Health Score: $HEALTH_SCORE/100 (Good)"
          else
            echo "üî¥ Environment Health Score: $HEALTH_SCORE/100 (Needs Attention)"
          fi
          echo "==================================="
          
          echo "üéâ Build environment verified successfully"
          echo "üìù Detailed verification report saved to: $REPORT_FILE"

      - name: Setup Android build environment
        run: |
          # C√†i ƒë·∫∑t v√† c·∫≠p nh·∫≠t c√°c dependencies
          yarn install --frozen-lockfile
          yarn add jest@^29.7.0
          yarn add @babel/preset-env@^7.1.6
          yarn add @types/react-native@^0.73.0
          
          # X√≥a node_modules v√† c√†i ƒë·∫∑t l·∫°i n·∫øu c·∫ßn
          rm -rf node_modules
          yarn install --frozen-lockfile
          
          # T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c Android
          mkdir -p android/app/src/main
          
          # C·∫•u h√¨nh expo.doctor trong package.json
          node -e '
            const fs = require("fs");
            const pkg = JSON.parse(fs.readFileSync("package.json"));
            pkg.expo = pkg.expo || {};
            pkg.expo.doctor = {
              reactNativeDirectoryCheck: {
                exclude: [
                  "react-native-fast-image",
                  "react-native-image-crop-picker",
                  "@stream-io/flat-list-mvcp",
                  "react-native-document-picker",
                  "react-native-incall-manager"
                ],
                listUnknownPackages: false
              }
            };
            fs.writeFileSync("package.json", JSON.stringify(pkg, null, 2));
          '

      - name: Setup Gradle
        run: |
          # Ensure android directory exists
          mkdir -p android/app

          # Create basic build.gradle if it doesn't exist
          if [ ! -f "android/build.gradle" ]; then
            cat << EOF > android/build.gradle
              buildscript {
                ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 21
                  compileSdkVersion = 34
                  targetSdkVersion = 34
                }
                repositories {
                  google()
                  mavenCentral()
                }
                dependencies {
                  classpath("com.android.tools.build:gradle:8.2.1")
                }
              }
              allprojects {
                repositories {
                  google()
                  mavenCentral()
                }
              }
            EOF
          fi

          # Initialize Gradle wrapper
          cd android
          if [ ! -f "gradlew" ]; then
            gradle wrapper
          fi
          chmod +x gradlew
          cd ..

      - name: Pre-build validation
        id: pre-build
        run: |
          echo "üîç Performing pre-build validation..."
          
          # Ki·ªÉm tra c√°c file c·∫•u h√¨nh b·∫Øt bu·ªôc
          REQUIRED_FILES=(
            "package.json"
            "app.json"
            "eas.json"
            "metro.config.js"
            "babel.config.js"
            "android/gradle.properties"
            "android/build.gradle"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
            echo "‚úì Found $file"
          done
          
          # Ki·ªÉm tra c·∫•u h√¨nh trong package.json
          if ! node -e 'const pkg=require("./package.json"); if(!pkg.dependencies["react-native"] || !pkg.dependencies.expo) throw "Missing core dependencies"'; then
            echo "‚ùå Invalid package.json configuration"
            exit 1
          fi
          
          # Ki·ªÉm tra c·∫•u h√¨nh trong app.json
          if ! node -e 'const app=require("./app.json"); if(!app.expo || !app.expo.name) throw "Invalid app.json"'; then
            echo "‚ùå Invalid app.json configuration"
            exit 1
          fi
          
          # Ki·ªÉm tra phi√™n b·∫£n Node.js v√† Yarn
          NODE_VERSION=$(node -v)
          YARN_VERSION=$(yarn -v)
          echo "Node.js version: $NODE_VERSION"
          echo "Yarn version: $YARN_VERSION"
          
          if [[ ! "$NODE_VERSION" =~ ^v18 ]]; then
            echo "‚ö†Ô∏è Warning: Recommended Node.js version is 18.x"
          fi
          
          # Ki·ªÉm tra c·∫•u h√¨nh Metro
          echo "Validating Metro configuration..."
          if ! node -e 'require("./metro.config.js")'; then
            echo "‚ùå Invalid metro.config.js"
            exit 1
          fi
          
          # Ki·ªÉm tra c√°c th∆∞ m·ª•c quan tr·ªçng
          REQUIRED_DIRS=(
            "android/app/src/main"
            "node_modules/react-native"
            "node_modules/expo"
          )
          
          for dir in "${REQUIRED_DIRS[@]}"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Missing required directory: $dir"
              exit 1
            fi
            echo "‚úì Found $dir"
          done
          
          echo "‚úÖ Pre-build validation completed successfully"
          echo "validation_success=true" >> $GITHUB_OUTPUT

      - name: Show validation errors
        if: steps.pre-build.outputs.validation_success != 'true'
        run: |
          echo "‚ùå Pre-build validation failed!"
          echo "Please check the validation step logs above for detailed errors."
          echo "Fix the reported issues before attempting to build again."
          exit 1

      - name: Build Android App
        id: build
        if: steps.pre-build.outputs.validation_success == 'true'
        continue-on-error: true
        shell: /usr/bin/bash -e {0}
        env:
          CACHE_LIFETIME_DAYS: 7
          YARN_NETWORK_TIMEOUT: 300000
          GRADLE_MEMORY: 24g
          GRADLE_MAX_WORKERS: 14
          METRO_MEMORY: 8192
          PERSISTENT_CACHE_PATH: ~/.eas-build-cache
          STORAGE_DIR: ${{ github.workspace }}/ksms-builds/$(date +"%Y-%m-%d")
          TMPDIR: ${{ github.workspace }}/expo-tmp
          EAS_LOCAL_BUILD_WORKINGDIR: ${{ github.workspace }}/eas-builds/working
          EAS_LOCAL_BUILD_ARTIFACTS_DIR: ${{ github.workspace }}/eas-builds/artifacts
          EAS_LOCAL_BUILD_SKIP_CLEANUP: 1
          BUILD_TIMESTAMP: $(date +"%Y%m%d_%H%M%S")
          GRADLE_OPTS: -Xmx24g -XX:MaxMetaspaceSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.jvmargs=-Xmx24g -Dorg.gradle.workers.max=14 -XX:+UseParallelGC
          ANDROID_HOME: ${{ github.workspace }}/android-sdk
          CFLAGS: -Wno-dollar-in-identifier-extension
          CXXFLAGS: -Wno-dollar-in-identifier-extension
          EAS_LOCAL_BUILD_ARTIFACT_TYPE: apk
          
        run: |
          # Ki·ªÉm tra v√† d·ªçn d·∫πp tr∆∞·ªõc khi build
          echo "üßπ Cleaning build environment..."
          
          # X√≥a c√°c file t·∫°m v√† cache kh√¥ng c·∫ßn thi·∫øt
          find . -name ".gradle" -type d -prune -exec rm -rf {} \;
          find . -name "build" -type d -prune -exec rm -rf {} \;
          find . -name ".expo" -type d -prune -exec rm -rf {} \;
          
          # Ki·ªÉm tra v√† kh·ªüi t·∫°o l·∫°i gradle wrapper n·∫øu c·∫ßn
          if [ ! -f "android/gradlew" ] || [ ! -x "android/gradlew" ]; then
            echo "üîÑ Reinitializing Gradle wrapper..."
            cd android
            rm -f gradlew gradlew.bat
            gradle wrapper
            cd ..
          fi
          chmod +x android/gradlew
          
          # Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng
          echo "üîç Checking system health..."
          
          # Ki·ªÉm tra disk space
          DISK_SPACE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ "$DISK_SPACE" -gt 90 ]; then
            echo "‚ö†Ô∏è Warning: Low disk space ($DISK_SPACE% used)"
            # D·ªçn d·∫πp th√™m n·∫øu disk space th·∫•p
            rm -rf "${{ env.TMPDIR }}/metro-cache"/*
            rm -rf ~/.gradle/caches/*/fileHashes/
            rm -rf ~/.gradle/daemon/
            yarn cache clean
          fi
          
          # Ki·ªÉm tra RAM available
          FREE_MEM_MB=$(free -m | awk 'NR==2 {print $4}')
          MIN_REQUIRED_MEM=4096  # 4GB
          if [ "$FREE_MEM_MB" -lt "$MIN_REQUIRED_MEM" ]; then
            echo "‚ö†Ô∏è Warning: Low memory available ($FREE_MEM_MB MB)"
            # Kill c√°c process kh√¥ng c·∫ßn thi·∫øt
            killall -9 node 2>/dev/null || true
            killall -9 java 2>/dev/null || true
            sleep 5
          fi
          
          # Kh·ªüi ƒë·ªông l·∫°i Metro bundler ƒë·ªÉ tr√°nh v·∫•n ƒë·ªÅ cache
          echo "üîÑ Restarting Metro bundler..."
          killall -9 node 2>/dev/null || true
          rm -rf "${{ env.TMPDIR }}/metro-cache"
          mkdir -p "${{ env.TMPDIR }}/metro-cache"
          
          # T·ªëi ∆∞u h√≥a cache
          echo "üì¶ Optimizing build cache..."
          
          # Ki·ªÉm tra v√† s·ª≠a cache permissions
          find ~/.gradle -type d -exec chmod 755 {} \; 2>/dev/null || true
          find ~/.gradle -type f -exec chmod 644 {} \; 2>/dev/null || true
          
          # D·ªçn d·∫πp cache c≈©
          find ~/.gradle/caches -type f -atime +7 -delete 2>/dev/null || true
          find ~/.android/build-cache -type f -atime +7 -delete 2>/dev/null || true
          
          # T·ªëi ∆∞u Gradle cache
          echo "org.gradle.caching=true" >> android/gradle.properties
          echo "org.gradle.parallel=true" >> android/gradle.properties
          
          # T·∫°o cache.key ƒë·ªÉ theo d√µi thay ƒë·ªïi
          CACHE_KEY_FILE="${{ env.STORAGE_DIR }}/cache.key"
          {
            echo "NODE_MODULES_HASH=$(find node_modules -type f -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d' ' -f1)"
            echo "GRADLE_FILES_HASH=$(find android -name "*.gradle" -type f -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d' ' -f1)"
            echo "ANDROID_MANIFEST_HASH=$(md5sum android/app/src/main/AndroidManifest.xml 2>/dev/null || echo "none")"
            echo "PACKAGE_JSON_HASH=$(md5sum package.json 2>/dev/null | cut -d' ' -f1)"
            echo "YARN_LOCK_HASH=$(md5sum yarn.lock 2>/dev/null | cut -d' ' -f1)"
          } > "$CACHE_KEY_FILE"
          
          # Ki·ªÉm tra thay ƒë·ªïi quan tr·ªçng
          REQUIRES_CLEAN_BUILD=0
          if [ -f "$CACHE_KEY_FILE.prev" ]; then
            if ! diff "$CACHE_KEY_FILE" "$CACHE_KEY_FILE.prev" >/dev/null; then
              echo "‚ö†Ô∏è Ph√°t hi·ªán thay ƒë·ªïi trong file quan tr·ªçng, th·ª±c hi·ªán clean build..."
              REQUIRES_CLEAN_BUILD=1
            fi
          else
            echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y cache key tr∆∞·ªõc ƒë√≥, th·ª±c hi·ªán clean build..."
            REQUIRES_CLEAN_BUILD=1
          fi
          
          # N·∫øu c·∫ßn clean build
          if [ "$REQUIRES_CLEAN_BUILD" = "1" ]; then
            echo "üßπ Th·ª±c hi·ªán clean build..."
            ./android/gradlew clean
            rm -rf android/app/build
            rm -rf ${{ env.TMPDIR }}/metro-cache
          fi
          
          # L∆∞u cache key hi·ªán t·∫°i cho l·∫ßn build sau
          cp "$CACHE_KEY_FILE" "$CACHE_KEY_FILE.prev"
          
          # Ki·ªÉm tra dependencies
          echo "üìã Ki·ªÉm tra dependencies..."
          yarn check --verify-tree || {
            echo "‚ö†Ô∏è Ph√°t hi·ªán l·ªói dependencies, ƒëang th·ª≠ s·ª≠a..."
            rm -rf node_modules
            yarn install --frozen-lockfile
          }

          # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng cho qu√° tr√¨nh build
          export NODE_ENV=production
          export EXPO_DEBUG=1  # Enable debug logging
          export EXPO_TELEMETRY_DISABLED=1  # Disable telemetry
          export BABEL_DISABLE_CACHE=1  # Disable Babel cache
          
          # C·∫•u h√¨nh Gradle v·ªõi heap size v√† worker threads t·ªëi ∆∞u
          # C·∫•u h√¨nh JVM v√† Gradle cho hi·ªáu su·∫•t t·ªëi ∆∞u
          # C·∫•u h√¨nh t·ªëi ∆∞u cho Gradle
          GRADLE_OPTS_BASE="-Xmx${{ env.GRADLE_MEMORY }} \
            -XX:MaxMetaspaceSize=4g \
            -XX:ReservedCodeCacheSize=2g \
            -XX:+UnlockExperimentalVMOptions \
            -XX:+UseG1GC \
            -XX:MaxGCPauseMillis=100 \
            -XX:G1NewSizePercent=20 \
            -XX:G1MaxNewSizePercent=40 \
            -XX:InitiatingHeapOccupancyPercent=35 \
            -XX:G1HeapRegionSize=32m \
            -XX:ConcGCThreads=${{ env.GRADLE_MAX_WORKERS }} \
            -XX:ParallelGCThreads=${{ env.GRADLE_MAX_WORKERS }} \
            -XX:+HeapDumpOnOutOfMemoryError \
            -XX:HeapDumpPath=${{ env.STORAGE_DIR }}/logs/java_heap.hprof"

          # C·∫•u h√¨nh n√¢ng cao cho Gradle Daemon
          GRADLE_OPTS_DAEMON="\
            -Dorg.gradle.daemon=true \
            -Dorg.gradle.daemon.idletimeout=900000 \
            -Dorg.gradle.workers.max=${{ env.GRADLE_MAX_WORKERS }} \
            -Dorg.gradle.parallel=true \
            -Dorg.gradle.configureondemand=true \
            -Dorg.gradle.vfs.watch=true \
            -Dorg.gradle.caching=true \
            -Dorg.gradle.unsafe.watch-fs=true \
            -Dkotlin.daemon.jvm.options=-Xmx${{ env.GRADLE_MEMORY }}"
            
          # H√†m theo d√µi Gradle
          monitor_gradle() {
            local log_file="${{ env.STORAGE_DIR }}/logs/gradle-monitor.log"
            mkdir -p "$(dirname "$log_file")"
            
            while true; do
              # Thu th·∫≠p metrics
              local gradle_procs=$(jps | grep -c "GradleDaemon")
              local gradle_mem=$(ps aux | grep "[G]radleDaemon" | awk '{sum += $6} END {print sum/1024}')
              local build_cache_size=$(du -sm "$(pwd)/android/app/build" 2>/dev/null | cut -f1)
              
              # Ghi log
              echo "[$(date +"%H:%M:%S")] Gradle Build Stats:" >> "$log_file"
              echo "  Active Daemons: ${gradle_procs:-0}" >> "$log_file"
              echo "  Total Memory Usage: ${gradle_mem:-0}MB" >> "$log_file"
              echo "  Build Cache Size: ${build_cache_size:-0}MB" >> "$log_file"
              
              # Ki·ªÉm tra v√† t·ªëi ∆∞u
              if [ "${gradle_mem%.*}" -gt "$((${GRADLE_MEMORY%g} * 1024 * 80 / 100))" ]; then
                echo "‚ö†Ô∏è Gradle memory usage cao, ƒëang d·ªçn d·∫πp..." >> "$log_file"
                ./android/gradlew --stop
                sleep 5
              fi
              
              # D·ªçn d·∫πp cache n·∫øu qu√° l·ªõn
              if [ "${build_cache_size:-0}" -gt 5000 ]; then
                echo "‚ö†Ô∏è Build cache qu√° l·ªõn, ƒëang d·ªçn d·∫πp..." >> "$log_file"
                rm -rf android/app/build/intermediates/incremental
                rm -rf android/app/build/intermediates/merged_res
              fi
              
              sleep 30
            done
          }
          
          # Kh·ªüi ch·∫°y monitor trong background
          monitor_gradle &
          GRADLE_MONITOR_PID=$!
          trap 'kill $GRADLE_MONITOR_PID 2>/dev/null || true' EXIT
          
          # K·∫øt h·ª£p v√† export GRADLE_OPTS
          export GRADLE_OPTS="$GRADLE_OPTS_BASE $GRADLE_OPTS_DAEMON"

          # Thi·∫øt l·∫≠p c·∫•u h√¨nh Node.js v√† Metro
          HEAP_SIZE="${{ env.METRO_MEMORY }}"
          export NODE_OPTIONS="--max-old-space-size=${HEAP_SIZE}"
          
          # C·∫•u h√¨nh Metro bundler n√¢ng cao
          export REACT_NATIVE_MAX_WORKERS=4
          export METRO_CONFIG_RESOLVE_NODE_MODULES_ONLY=true
          export METRO_MINIFY_UGLIFY=true
          
          # C·∫•u h√¨nh b·ªï sung ƒë·ªÉ t·ªëi ∆∞u hi·ªáu nƒÉng Metro
          export METRO_CACHE_VERSION="1.0"
          export METRO_RESOLVER_BLACKLIST="/\.git/|/\.hg/|/node_modules/react-native/Libraries/Animated/src/polyfills/|/_tmp/"
          export METRO_RESOLVER_PLATFORMS="android,ios"
          export METRO_RESOLVER_USE_WATCHMAN=false
          
          # C·∫•u h√¨nh Node.js GC
          export NODE_GC_MAX_HEAP="${HEAP_SIZE}"
          export NODE_GC_MIN_HEAP="4096"
          export NODE_GC_HEAP_GROWTH_FACTOR="1.2"
          
          # T·ªëi ∆∞u garbage collection cho Node.js
          export NODE_GC_INTERVAL=10000
          export NODE_GC_MAX_HEAP=7680
          
          # C·∫•u h√¨nh n√¢ng cao cho Metro bundler
          export METRO_CONFIG="metro.config.js"
          export METRO_CACHE_DIR="${{ env.TMPDIR }}/metro-cache"
          export METRO_CACHE_VERSION="2"
          
          # T·ªëi ∆∞u h√≥a Metro resolver
          export METRO_RESOLVER_BLACKLIST="/(.*\.android\.js|.*\.ios\.js|.*\.native\.js|.*\.web\.js)$/"
          export METRO_RESOLVER_PLATFORMS="android,ios"
          export METRO_RESOLVER_USE_WATCHMAN=true
          
          # C·∫•u h√¨nh transformer
          export METRO_TRANSFORMER_CACHE_DIR="${{ env.TMPDIR }}/metro-cache/transformer"
          export METRO_MINIFIER="terser"
          export METRO_MINIFY_UGLIFY=true
          
          # T·ªëi ∆∞u hi·ªáu su·∫•t
          export METRO_FILE_WATCHER_BATCH_SIZE=1000
          export METRO_MAX_WORKERS=4
          export METRO_BUNDLE_OPTIMIZATION_LEVEL=3
          export METRO_CACHE_ENTRY_MAX_AGE=86400
          
          # C·∫•u h√¨nh Delta bundling
          export METRO_DELTA_BUNDLE=true
          export METRO_ENABLE_PACKAGES_CACHE=true
          export METRO_RAM_BUNDLE=true
          
          # Debug v√† logging
          export METRO_VERBOSE=true
          export METRO_TRACE_STARTUP=true
          export METRO_PERF_LOG_FILE="${{ env.STORAGE_DIR }}/logs/metro-perf.log"
          
          # Kh·ªüi t·∫°o c·∫•u tr√∫c th∆∞ m·ª•c cho Metro
          echo "üèóÔ∏è Kh·ªüi t·∫°o th∆∞ m·ª•c Metro..."
          mkdir -p "$METRO_CACHE_DIR" \
                  "$METRO_TRANSFORMER_CACHE_DIR" \
                  "${{ env.STORAGE_DIR }}/logs/metro"

          # Thi·∫øt l·∫≠p theo d√µi hi·ªáu su·∫•t Metro
          PERF_LOG="${{ env.STORAGE_DIR }}/logs/metro/performance.log"
          HEALTH_CHECK_LOG="${{ env.STORAGE_DIR }}/logs/metro/health.log"
          ERROR_LOG="${{ env.STORAGE_DIR }}/logs/metro/error.log"

          # Kh·ªüi t·∫°o log files
          touch "$PERF_LOG" "$HEALTH_CHECK_LOG" "$ERROR_LOG"

          # Function theo d√µi hi·ªáu su·∫•t
          log_perf() {
            local metric=$1
            local value=$2
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $metric: $value" >> "$PERF_LOG"
          }

          # Function ki·ªÉm tra s·ª©c kh·ªèe
          check_health() {
            local status=$1
            local message=$2
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Status: $status - $message" >> "$HEALTH_CHECK_LOG"
          }

          # Function x·ª≠ l√Ω l·ªói
          log_error() {
            local error=$1
            local stack=${2:-"No stack trace"}
            {
              echo "=== Error Report ==="
              echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
              echo "Error: $error"
              echo "Stack Trace:"
              echo "$stack"
              echo "==================="
              echo ""
            } >> "$ERROR_LOG"
          }

          # H√†m theo d√µi v√† x·ª≠ l√Ω Metro bundler
          monitor_metro() {
            local log_file="${{ env.STORAGE_DIR }}/logs/metro-monitor.log"
            mkdir -p "$(dirname "$log_file")"
            
            # Kh·ªüi t·∫°o bi·∫øn theo d√µi
            local restart_count=0
            local max_restarts=3
            local last_restart=0
            
            while true; do
              current_time=$(date +%s)
              
              # Thu th·∫≠p metrics chi ti·∫øt
              local heap_stats=$(node -e '
                const m = process.memoryUsage();
                console.log(JSON.stringify({
                  heapUsed: Math.round(m.heapUsed/1024/1024),
                  heapTotal: Math.round(m.heapTotal/1024/1024),
                  external: Math.round(m.external/1024/1024),
                  arrayBuffers: Math.round(m.arrayBuffers/1024/1024)
                }));
              ')
              
              # Parse JSON metrics
              local heap_used=$(echo $heap_stats | jq -r '.heapUsed')
              local heap_total=$(echo $heap_stats | jq -r '.heapTotal')
              local external_mem=$(echo $heap_stats | jq -r '.external')
              local array_buffers=$(echo $heap_stats | jq -r '.arrayBuffers')
              
              # Thu th·∫≠p th√¥ng tin cache v√† process
              local cache_size=$(du -sm "$METRO_CACHE_DIR" 2>/dev/null | cut -f1)
              local metro_pid=$(pgrep -f "metro" || echo "0")
              local metro_cpu=$(ps -p $metro_pid -o %cpu= 2>/dev/null || echo "0")
              
              # Ghi log chi ti·∫øt
              {
                echo "[$(date +"%H:%M:%S")] Metro Bundler Stats:"
                echo "Memory Usage:"
                echo "  ‚Ä¢ Heap Used: ${heap_used}MB"
                echo "  ‚Ä¢ Heap Total: ${heap_total}MB"
                echo "  ‚Ä¢ External: ${external_mem}MB"
                echo "  ‚Ä¢ Array Buffers: ${array_buffers}MB"
                echo "Process Stats:"
                echo "  ‚Ä¢ PID: ${metro_pid:-N/A}"
                echo "  ‚Ä¢ CPU Usage: ${metro_cpu}%"
                echo "Cache Size: ${cache_size:-0}MB"
              } >> "$log_file"
              
              # Ki·ªÉm tra v√† x·ª≠ l√Ω v·∫•n ƒë·ªÅ
              local should_restart=0
              local restart_reason=""
              
              # Ki·ªÉm tra memory usage
              if [ "${heap_used:-0}" -gt "$((HEAP_SIZE * 80 / 100))" ]; then
                should_restart=1
                restart_reason="High memory usage (${heap_used}MB/${HEAP_SIZE}MB)"
              fi
              
              # Ki·ªÉm tra CPU usage v·ªõi ng∆∞·ª°ng linh ho·∫°t
              local cpu_threshold=80
              if [ "${metro_cpu%.*}" -gt "$cpu_threshold" ]; then
                should_restart=1
                restart_reason="High CPU usage (${metro_cpu}% > ${cpu_threshold}%)"
              fi
              
              # Ki·ªÉm tra v√† qu·∫£n l√Ω cache v·ªõi metrics
              local max_cache_size=2000
              if [ "${cache_size:-0}" -gt "$max_cache_size" ]; then
                log_perf "metro_cache_size" "${cache_size}"
                echo "‚ö†Ô∏è Metro cache qu√° l·ªõn (${cache_size}MB/${max_cache_size}MB), ƒëang d·ªçn d·∫πp..." >> "$log_file"
                
                # D·ªçn d·∫πp c√≥ ch·ªçn l·ªçc
                find "$METRO_CACHE_DIR" -type f -atime +1 -delete
                find "$METRO_TRANSFORMER_CACHE_DIR" -type f -atime +2 -delete
                
                # Ghi log k·∫øt qu·∫£
                local new_size=$(du -sm "$METRO_CACHE_DIR" 2>/dev/null | cut -f1)
                echo "‚úÖ ƒê√£ d·ªçn d·∫πp cache (${cache_size}MB -> ${new_size}MB)" >> "$log_file"
                log_perf "metro_cache_cleanup" "$((cache_size - new_size))"
              fi
              
              # X·ª≠ l√Ω restart v·ªõi tracking chi ti·∫øt
              if [ "$should_restart" -eq 1 ]; then
                local time_since_last=$((current_time - last_restart))
                log_perf "metro_time_between_restarts" "$time_since_last"
                
                if [ "$time_since_last" -gt 300 ] && [ "$restart_count" -lt "$max_restarts" ]; then
                  # Log metrics tr∆∞·ªõc khi restart
                  log_perf "metro_restart_trigger" "$restart_reason"
                  echo "‚ö†Ô∏è Kh·ªüi ƒë·ªông l·∫°i Metro ($((restart_count + 1))/$max_restarts) - L√Ω do: $restart_reason" >> "$log_file"
                  
                  # Thu th·∫≠p metrics chi ti·∫øt
                  {
                    echo "=== Restart Metrics ==="
                    echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
                    echo "Reason: $restart_reason"
                    echo "Process Info:"
                    ps -p $metro_pid -o pid,ppid,%cpu,%mem,cmd 2>/dev/null || echo "Process not found"
                    echo "Memory Info:"
                    free -h
                    echo "===================="
                  } >> "$log_file"
                  
                  # Kill process v√† d·ªçn d·∫πp
                  pkill -f "metro" || true
                  rm -rf "$METRO_CACHE_DIR"/metro-* 2>/dev/null || true
                  
                  # C·∫≠p nh·∫≠t counters
                  restart_count=$((restart_count + 1))
                  last_restart=$current_time
                  
                  echo "‚è≥ ƒê·ª£i Metro kh·ªüi ƒë·ªông l·∫°i..." >> "$log_file"
                  
                  # ƒê·ª£i v√† ki·ªÉm tra kh·ªüi ƒë·ªông
                  local wait_time=0
                  local max_wait=60
                  while [ $wait_time -lt $max_wait ]; do
                    if pgrep -f "metro" > /dev/null; then
                      if nc -z localhost 8081; then
                        echo "‚úÖ Metro ƒë√£ kh·ªüi ƒë·ªông l·∫°i th√†nh c√¥ng sau ${wait_time}s" >> "$log_file"
                        log_perf "metro_restart_time" "$wait_time"
                        break
                      fi
                    fi
                    sleep 2
                    wait_time=$((wait_time + 2))
                    echo "‚åõ ƒêang ƒë·ª£i Metro (${wait_time}s/${max_wait}s)..." >> "$log_file"
                  done
                  
                  if [ $wait_time -ge $max_wait ]; then
                    log_error "Metro kh√¥ng kh·ªüi ƒë·ªông l·∫°i ƒë∆∞·ª£c sau ${max_wait}s"
                    # Th·ª≠ ph·ª•c h·ªìi
                    echo "üîÑ Th·ª≠ ph·ª•c h·ªìi Metro..." >> "$log_file"
                    rm -rf "$METRO_CACHE_DIR"/*
                    mkdir -p "$METRO_CACHE_DIR"
                    export NODE_OPTIONS="--max-old-space-size=$HEAP_SIZE --expose-gc"
                  fi
                elif [ "$restart_count" -ge "$max_restarts" ]; then
                  local msg="‚ùå ƒê√£ ƒë·∫°t gi·ªõi h·∫°n restart ($max_restarts)"
                  echo "$msg" >> "$log_file"
                  log_error "$msg"
                  
                  # Thu th·∫≠p th√¥ng tin debug
                  {
                    echo "=== Metro Debug Info ==="
                    echo "Time: $(date '+%Y-%m-%d %H:%M:%S')"
                    echo "Restart Count: $restart_count"
                    echo "Last Restart: $(date -d @$last_restart '+%Y-%m-%d %H:%M:%S')"
                    echo "Process Info:"
                    ps aux | grep metro
                    echo "Recent Logs:"
                    tail -n 50 "$log_file"
                    echo "System Status:"
                    free -h
                    df -h
                    echo "===================="
                  } >> "${{ env.STORAGE_DIR }}/logs/metro-debug-${{ env.BUILD_TIMESTAMP }}.log"
                  
                  check_health "error" "$msg"
                fi
              fi
              
              # Thu th·∫≠p performance metrics
              log_perf "metro_heap_used" "${heap_used}"
              log_perf "metro_cpu_usage" "${metro_cpu}"
              log_perf "metro_cache_size" "${cache_size}"
              
              # Ki·ªÉm tra health ƒë·ªãnh k·ª≥
              if [ $((current_time % 300)) -eq 0 ]; then
                check_health "routine" "Metro running normally. Memory: ${heap_used}MB, CPU: ${metro_cpu}%"
              fi
              
              sleep 15
            done
          }
          
          # Kh·ªüi ch·∫°y monitor trong background
          monitor_metro &
          METRO_MONITOR_PID=$!
          trap 'kill $METRO_MONITOR_PID 2>/dev/null || true' EXIT
          
          # C·∫•u h√¨nh worker threads cho Gradle build
          export EAS_LOCAL_BUILD_GRADLE_OPTS="-PmaxWorkers=${{ env.GRADLE_MAX_WORKERS }}"

          echo "üöÄ Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng build..."
          
          # Ki·ªÉm tra v√† t·ªëi ∆∞u t√†i nguy√™n h·ªá th·ªëng
          TOTAL_MEM=$(free -g | awk 'NR==2 {print $2}')
          FREE_MEM=$(free -g | awk 'NR==2 {print $4}')
          CPU_CORES=$(nproc)
          DISK_SPACE=$(df -h / | awk 'NR==2 {print $4}' | sed 's/G//')
          
          echo "üìä Th√¥ng tin t√†i nguy√™n:"
          echo "‚Ä¢ CPU Cores: $CPU_CORES"
          echo "‚Ä¢ Total Memory: ${TOTAL_MEM}GB"
          echo "‚Ä¢ Free Memory: ${FREE_MEM}GB"
          echo "‚Ä¢ Available Disk: ${DISK_SPACE}GB"
          
          # T·ªëi ∆∞u h√≥a s·ª≠ d·ª•ng t√†i nguy√™n
          OPTIMAL_GRADLE_MEM=$(( TOTAL_MEM > 32 ? 24 : TOTAL_MEM / 2 ))
          OPTIMAL_METRO_MEM=$(( TOTAL_MEM > 16 ? 8192 : 4096 ))
          OPTIMAL_WORKERS=$(( CPU_CORES > 8 ? 8 : CPU_CORES - 1 ))
          
          # C·∫≠p nh·∫≠t bi·∫øn m√¥i tr∆∞·ªùng
          echo "GRADLE_MEMORY=${OPTIMAL_GRADLE_MEM}g" >> $GITHUB_ENV
          echo "METRO_MEMORY=${OPTIMAL_METRO_MEM}" >> $GITHUB_ENV
          echo "GRADLE_MAX_WORKERS=${OPTIMAL_WORKERS}" >> $GITHUB_ENV
          
          # D·ªçn d·∫πp kh√¥ng gian ƒëƒ©a n·∫øu c·∫ßn
          if (( $(echo "$DISK_SPACE < 20" | bc -l) )); then
            echo "‚ö†Ô∏è D·ªçn d·∫πp disk space..."
            sudo apt-get clean
            sudo apt-get autoremove -y
            sudo journalctl --vacuum-time=1d
            docker system prune -af || true
          fi
          
          # Hi·ªÉn th·ªã c·∫•u h√¨nh build
          echo "üõ†Ô∏è C·∫•u h√¨nh Build:"
          echo "‚Ä¢ Profile: ${{ steps.profile.outputs.name }}"
          echo "‚Ä¢ Gradle Memory: ${OPTIMAL_GRADLE_MEM}GB"
          echo "‚Ä¢ Metro Memory: ${OPTIMAL_METRO_MEM}MB"
          echo "‚Ä¢ Worker Threads: $OPTIMAL_WORKERS"
          
          # Hi·ªÉn th·ªã bi·∫øn m√¥i tr∆∞·ªùng
          echo "üîß Environment Variables:"
          echo "‚Ä¢ GRADLE_OPTS: $GRADLE_OPTS"
          echo "‚Ä¢ NODE_OPTIONS: $NODE_OPTIONS"
          echo "‚Ä¢ METRO_CONFIG: $METRO_CONFIG"
          echo "‚Ä¢ METRO_CACHE_DIR: $METRO_CACHE_DIR"
          echo "‚Ä¢ EAS_LOCAL_BUILD_GRADLE_OPTS: $EAS_LOCAL_BUILD_GRADLE_OPTS"

          # Chu·∫©n b·ªã c·∫•u h√¨nh Metro
          echo "‚öôÔ∏è C·∫•u h√¨nh Metro bundler..."
          
          # T√≠nh to√°n c·∫•u h√¨nh t·ªëi ∆∞u cho Metro
          METRO_WORKERS=$(( OPTIMAL_WORKERS > 4 ? 4 : OPTIMAL_WORKERS ))
          WORKER_MEM=$(( OPTIMAL_METRO_MEM / METRO_WORKERS ))
          
          # Set bi·∫øn m√¥i tr∆∞·ªùng cho Metro
          export METRO_CACHE_DIR="${{ env.TMPDIR }}/metro-cache"
          export METRO_CONFIG="metro.config.js"
          export METRO_MAX_WORKERS="$METRO_WORKERS"
          
          # T·∫°o th∆∞ m·ª•c cache n·∫øu ch∆∞a t·ªìn t·∫°i
          mkdir -p "$METRO_CACHE_DIR"
          
          # Kh·ªüi ƒë·ªông Metro monitor
          echo "üîÑ Kh·ªüi ƒë·ªông Metro monitor..."
          {
            while true; do
              # Thu th·∫≠p metrics
              HEAP_USED=$(node -e 'console.log(process.memoryUsage().heapUsed / 1024 / 1024)')
              HEAP_TOTAL=$(node -e 'console.log(process.memoryUsage().heapTotal / 1024 / 1024)')
              CACHE_SIZE=$(du -sm "$METRO_CACHE_DIR" 2>/dev/null | cut -f1)
              
              # Ghi log
              echo "[$(date +"%H:%M:%S")] Metro Stats:" >> "${{ env.STORAGE_DIR }}/logs/metro-monitor.log"
              echo "‚Ä¢ Heap Used: ${HEAP_USED}MB" >> "${{ env.STORAGE_DIR }}/logs/metro-monitor.log"
              echo "‚Ä¢ Heap Total: ${HEAP_TOTAL}MB" >> "${{ env.STORAGE_DIR }}/logs/metro-monitor.log"
              echo "‚Ä¢ Cache Size: ${CACHE_SIZE}MB" >> "${{ env.STORAGE_DIR }}/logs/metro-monitor.log"
              
              # Ki·ªÉm tra v√† t·ªëi ∆∞u n·∫øu c·∫ßn
              if [ "${HEAP_USED%.*}" -gt "$((OPTIMAL_METRO_MEM * 80 / 100))" ]; then
                echo "‚ö†Ô∏è Memory usage cao, kh·ªüi ƒë·ªông l·∫°i Metro..." >> "${{ env.STORAGE_DIR }}/logs/metro-monitor.log"
                pkill -f "metro" || true
                sleep 5
              fi
              
              sleep 30
            done
          } &
          METRO_MONITOR_PID=$!
          trap 'kill $METRO_MONITOR_PID 2>/dev/null || true' EXIT
          
          # Hi·ªÉn th·ªã c·∫•u h√¨nh EAS
          echo "üì± EAS config:"
          cat eas.json
          
          # Kh·ªüi t·∫°o bi·∫øn theo d√µi build
          declare -A BUILD_STATS
          BUILD_STATS[start_time]=$(date +%s)
          BUILD_STATS[attempts]=0
          BUILD_STATS[errors]=0
          BUILD_SUCCESS=false
          MAX_RETRIES=3
          
          # Function ghi log l·ªói
          log_error() {
            local error_type=$1
            local error_msg=$2
            local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
            local log_file="${{ env.STORAGE_DIR }}/logs/build-errors.log"
            
            # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
            mkdir -p "${{ env.STORAGE_DIR }}/logs"
            
            # Ghi log
            {
              echo "=== Error Report ==="
              echo "Time: $timestamp"
              echo "Type: $error_type"
              echo "Attempt: ${BUILD_STATS[attempts]}"
              echo "Message: $error_msg"
              echo "Environment:"
              echo "  ‚Ä¢ Memory: $(free -h)"
              echo "  ‚Ä¢ Disk: $(df -h /)"
              echo "  ‚Ä¢ Load: $(uptime)"
              echo "===================="
              echo ""
            } >> "$log_file"
            
            # TƒÉng s·ªë l·ªói
            ((BUILD_STATS[errors]++))
          }
          
          # Function theo d√µi metrics
          track_metrics() {
            local phase=$1
            local status=$2
            local duration=$3
            
            echo "[Metrics] $phase: $status (${duration}s)" >> "${{ env.STORAGE_DIR }}/logs/build-metrics.log"
          }
          
          # Function d·ªçn d·∫πp tr∆∞·ªõc retry
          cleanup_before_retry() {
            echo "üßπ D·ªçn d·∫πp m√¥i tr∆∞·ªùng tr∆∞·ªõc khi th·ª≠ l·∫°i..."
            
            # D·ªçn cache v√† th∆∞ m·ª•c build
            rm -rf android/app/build
            rm -rf "${{ env.TMPDIR }}/metro-cache"/*
            ./android/gradlew clean
            
            # Ki·ªÉm tra v√† gi·∫£i ph√≥ng b·ªô nh·ªõ
            local free_mem=$(free -m | awk 'NR==2{print $4}')
            if [ $free_mem -lt 4096 ]; then
              echo "üîÑ Gi·∫£i ph√≥ng b·ªô nh·ªõ ƒë·ªám..."
              sync
              echo 3 > /proc/sys/vm/drop_caches || true
            fi
            
            # Ch·ªù h·ªá th·ªëng ·ªïn ƒë·ªãnh
            echo "‚è≥ Ch·ªù 30 gi√¢y ƒë·ªÉ h·ªá th·ªëng ·ªïn ƒë·ªãnh..."
            sleep 30
          }
          
          # B·∫Øt ƒë·∫ßu build v·ªõi retry logic
          while ((BUILD_STATS[attempts] < MAX_RETRIES)) && [ "$BUILD_SUCCESS" != "true" ]; do
            # TƒÉng s·ªë l·∫ßn th·ª≠
            ((BUILD_STATS[attempts]++))
            attempt_start=$(date +%s)
            
            echo "üîÑ Build l·∫ßn ${BUILD_STATS[attempts]}/$MAX_RETRIES"
            
            # D·ªçn d·∫πp n·∫øu kh√¥ng ph·∫£i l·∫ßn ƒë·∫ßu
            if ((BUILD_STATS[attempts] > 1)); then
              cleanup_before_retry
            fi
            
            # B·∫Øt ƒë·∫ßu build v·ªõi monitoring ƒë·∫ßy ƒë·ªß
            build_start=$(date +%s)
            
            # Kh·ªüi ƒë·ªông theo d√µi logs
            tail -f "${{ env.TMPDIR }}/metro.log" 2>/dev/null &
            METRO_LOG_PID=$!
            tail -f android/app/build/outputs/logs/build-log.txt 2>/dev/null &
            GRADLE_LOG_PID=$!
            
            # Th·ª±c hi·ªán build v·ªõi c√°c flags t·ªëi ∆∞u
            # Thi·∫øt l·∫≠p NODE_OPTIONS v·ªõi gi√° tr·ªã METRO_MEMORY c·ªë ƒë·ªãnh
            export NODE_OPTIONS="--max-old-space-size=8192"
            
            # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng cho build
            export JAVA_TOOL_OPTIONS="$GRADLE_OPTS"
            export GRADLE_BUILD_CACHE_DEBUG=true
            export NODE_OPTIONS="--max-old-space-size=${HEAP_SIZE}"
            export EAS_NO_VCS=1
            export EAS_BUILD_AUTOCOMMIT=0
            
            # Thi·∫øt l·∫≠p tham s·ªë build
            BUILD_ARGS=(
              "--platform" "android"
              "--local"
              "--non-interactive"
              "--profile=${{ steps.profile.outputs.name }}"
              "--gradle-clean"
              "--no-wait"
              "--verbose"
            )
            
            # Log c·∫•u h√¨nh build
            {
              echo "=== Build Configuration ==="
              echo "Profile: ${{ steps.profile.outputs.name }}"
              echo "Node Memory: ${HEAP_SIZE}MB"
              echo "Gradle Memory: ${{ env.GRADLE_MEMORY }}"
              echo "Workers: ${{ env.GRADLE_MAX_WORKERS }}"
              echo "Build Arguments: ${BUILD_ARGS[*]}"
              echo "=========================="
            } >> "${{ env.STORAGE_DIR }}/logs/build-config.log"
            
            # Th·ª±c hi·ªán build v·ªõi theo d√µi log
            if eas build "${BUILD_ARGS[@]}" 2>&1 | tee -a "${{ env.STORAGE_DIR }}/logs/eas-build-${BUILD_STATS[attempts]}.log"; then
                 
              # Build th√†nh c√¥ng
              BUILD_SUCCESS=true
              build_end=$(date +%s)
              duration=$((build_end - build_start))
              
              # Ghi metrics th√†nh c√¥ng
              track_metrics "Build" "Success" "$duration"
              echo "‚úÖ Build th√†nh c√¥ng sau ${BUILD_STATS[attempts]} l·∫ßn th·ª≠ ($duration gi√¢y)"
              break
            else
              # X·ª≠ l√Ω l·ªói build
              build_end=$(date +%s)
              duration=$((build_end - build_start))
              
              # Ph√¢n t√≠ch l·ªói
              ERROR_LOG="${{ env.STORAGE_DIR }}/logs/build-error-${BUILD_STATS[attempts]}.log"
              {
                echo "=== Build Failure Analysis ==="
                echo "Timestamp: $(date '+%Y-%m-%d %H:%M:%S')"
                echo "Duration: ${duration}s"
                echo "Attempt: ${BUILD_STATS[attempts]}/${MAX_RETRIES}"
                
                # Ph√¢n lo·∫°i l·ªói
                if grep -qi "out.*of.*memory\|heap.*space" "${{ env.STORAGE_DIR }}/logs/eas-build-${BUILD_STATS[attempts]}.log"; then
                  ERROR_TYPE="Memory Error"
                  RECOVERY_ACTION="increase_memory"
                elif grep -qi "metro.*error\|bundler.*failed" "${{ env.STORAGE_DIR }}/logs/eas-build-${BUILD_STATS[attempts]}.log"; then
                  ERROR_TYPE="Metro Bundler Error"
                  RECOVERY_ACTION="restart_metro"
                elif grep -qi "gradle.*error\|build.*failed" "${{ env.STORAGE_DIR }}/logs/eas-build-${BUILD_STATS[attempts]}.log"; then
                  ERROR_TYPE="Gradle Build Error"
                  RECOVERY_ACTION="clean_gradle"
                else
                  ERROR_TYPE="Unknown Error"
                  RECOVERY_ACTION="full_cleanup"
                fi
                
                echo "Error Type: $ERROR_TYPE"
                echo "Recovery Action: $RECOVERY_ACTION"
                
                # Thu th·∫≠p metrics
                echo "=== System Metrics ==="
                echo "Memory Stats:"
                free -h
                echo "Disk Stats:"
                df -h /
                echo "Process Stats:"
                ps aux | grep -E "node|metro|gradle" | grep -v grep
                
                echo "=== System State ==="
                echo "Memory:"
                free -h
                echo "Disk:"
                df -h
                echo "CPU Load:"
                uptime
                
                echo "=== Recent Logs ==="
                echo "Metro Logs:"
                tail -n 500 "${{ env.TMPDIR }}/metro.log" 2>/dev/null || echo "No Metro logs"
                echo "Gradle Logs:"
                tail -n 500 android/app/build/outputs/logs/build-log.txt 2>/dev/null || echo "No Gradle logs"
                
                echo "=== Error Summary ==="
                if [ -f "${{ env.STORAGE_DIR }}/logs/eas-build-${BUILD_STATS[attempts]}.log" ]; then
                  echo "Build Errors:"
                  grep -A 5 "error" "${{ env.STORAGE_DIR }}/logs/eas-build-${BUILD_STATS[attempts]}.log" || echo "No errors found in build log"
                fi
              } > "${{ env.STORAGE_DIR }}/logs/build-failure-${BUILD_STATS[attempts]}.log"
              
              # Thu th·∫≠p metrics h·ªá th·ªëng t·∫°i th·ªùi ƒëi·ªÉm th·∫•t b·∫°i
              log_perf "CPU_Peak" "$(top -bn1 | grep "Cpu(s)" | awk '{print $2}')"
              log_perf "Memory_Peak" "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2}')"
              log_perf "Disk_Usage" "$(df -h / | awk 'NR==2 {print $5}')"
              
              # TƒÉng s·ªë l·∫ßn th·ª≠ v√† th·ª±c hi·ªán recovery
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚ö†Ô∏è Build attempt $RETRY_COUNT failed. Error type: $ERROR_TYPE"
                
                # Th·ª±c hi·ªán recovery action t∆∞∆°ng ·ª©ng
                case $RECOVERY_ACTION in
                  "increase_memory")
                    echo "üîß TƒÉng b·ªô nh·ªõ cho processes..."
                    export HEAP_SIZE=$((HEAP_SIZE * 12 / 10)) # TƒÉng 20%
                    export NODE_OPTIONS="--max-old-space-size=${HEAP_SIZE}"
                    sync && echo 3 > /proc/sys/vm/drop_caches || true
                    ;;
                    
                  "restart_metro")
                    echo "üîÑ Kh·ªüi ƒë·ªông l·∫°i Metro bundler..."
                    pkill -f "metro" || true
                    rm -rf "${{ env.TMPDIR }}/metro-cache"
                    mkdir -p "${{ env.TMPDIR }}/metro-cache"
                    ;;
                    
                  "clean_gradle")
                    echo "üßπ D·ªçn d·∫πp Gradle build..."
                    ./android/gradlew clean
                    rm -rf android/app/build
                    rm -rf ~/.gradle/caches/build-cache-*
                    ;;
                    
                  "full_cleanup")
                    echo "‚ôªÔ∏è Th·ª±c hi·ªán full cleanup..."
                    pkill -f "metro" || true
                    pkill -f "node" || true
                    rm -rf android/app/build
                    rm -rf "${{ env.TMPDIR }}/metro-cache"
                    rm -rf ~/.gradle/caches/build-cache-*
                    ./android/gradlew clean
                    yarn cache clean
                    ;;
                esac
                
                # ƒê·ª£i h·ªá th·ªëng ·ªïn ƒë·ªãnh
                echo "‚è≥ Ch·ªù 30 gi√¢y ƒë·ªÉ h·ªá th·ªëng ·ªïn ƒë·ªãnh..."
                sleep 30
                
                # Ki·ªÉm tra memory
                FREE_MEM=$(free -m | awk 'NR==2{print $4}')
                if [ $FREE_MEM -lt 4096 ]; then
                  echo "üîÑ Gi·∫£i ph√≥ng b·ªô nh·ªõ ƒë·ªám..."
                  sync
                  echo 3 > /proc/sys/vm/drop_caches || true
                fi
                
                echo "üîÑ Chu·∫©n b·ªã cho l·∫ßn build ti·∫øp theo..."
              fi
              # Ph√¢n t√≠ch l·ªói build
              {
                echo "=== Build Error Analysis Report ==="
                echo "Timestamp: $(date)"
                echo "Build Profile: ${{ steps.profile.outputs.name }}"
                echo "Attempt: $((RETRY_COUNT + 1))"
                
                # Thu th·∫≠p th√¥ng tin h·ªá th·ªëng
                echo "=== System State ==="
                echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}')%"
                echo "Memory Usage: $(free -m | awk 'NR==2{printf "%.1f%%", $3*100/$2}')"
                echo "Free Memory: $(free -h | awk 'NR==2 {print $4}')"
                echo "Disk Usage: $(df -h / | awk 'NR==2 {print $5}')"
                echo "Node Version: $(node -v)"
                
                # Ph√¢n t√≠ch log l·ªói
                echo "=== Error Analysis ==="
                LOG_FILE="${{ env.EAS_LOCAL_BUILD_WORKINGDIR }}/eas-build.log"
                if [ -f "$LOG_FILE" ]; then
                  # T√¨m c√°c l·ªói ph·ªï bi·∫øn
                  echo "Common Errors Found:"
                  {
                    echo "- Memory Errors:"
                    grep -i "out.*of.*memory\|heap.*space" "$LOG_FILE" || echo "  None found"
                    
                    echo "- Metro Bundler Errors:"
                    grep -i "metro.*error\|bundler.*failed" "$LOG_FILE" || echo "  None found"
                    
                    echo "- Build Tool Errors:"
                    grep -i "gradle.*error\|build.*failed" "$LOG_FILE" || echo "  None found"
                    
                    echo "- Dependency Errors:"
                    grep -i "cannot.*resolve.*module\|not.*found" "$LOG_FILE" || echo "  None found"
                  }
                else
                  echo "Build log file not found"
                fi
                
                # ƒê·ªÅ xu·∫•t gi·∫£i ph√°p
                echo "=== Recommended Actions ==="
                if grep -qi "out.*of.*memory" "$LOG_FILE" 2>/dev/null; then
                  echo "1. TƒÉng b·ªô nh·ªõ cho Node/Metro"
                  echo "2. Gi·∫£m s·ªë l∆∞·ª£ng worker threads"
                elif grep -qi "metro.*error" "$LOG_FILE" 2>/dev/null; then
                  echo "1. X√≥a Metro cache"
                  echo "2. Ki·ªÉm tra c·∫•u h√¨nh Metro"
                elif grep -qi "gradle.*error" "$LOG_FILE" 2>/dev/null; then
                  echo "1. Ch·∫°y Gradle clean"
                  echo "2. Ki·ªÉm tra c·∫•u h√¨nh Gradle"
                fi
                
                # Thu th·∫≠p logs
                echo "=== Recent Logs ==="
                echo "Last 500 lines of build log:"
                tail -n 500 "$LOG_FILE" 2>/dev/null || echo "No build log available"
                find "${{ env.TMPDIR }}" -name "metro-*.log" -type f -exec tail -n 100 {} \; 2>/dev/null || echo "No Metro logs found"
                echo ""
                
                echo "=== Gradle Logs ==="
                find "android" -name "*.log" -type f -exec tail -n 100 {} \; 2>/dev/null || echo "No Gradle logs found"
              } > "$ERROR_LOG"
              
              echo "‚ö†Ô∏è Build attempt $(($RETRY_COUNT + 1)) failed. Error details saved to: $ERROR_LOG"
              
              RETRY_COUNT=$(($RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
          
          if [ "$BUILD_SUCCESS" = "true" ]; then
            echo "build_exit_code=0" >> $GITHUB_OUTPUT
            echo "‚úÖ Build completed successfully"
            
            # T·∫°o b√°o c√°o chi ti·∫øt
            SUCCESS_LOG="${{ env.STORAGE_DIR }}/logs/build-success-$(date +%s).md"
            {
              echo "# üì± Build Success Report"
              echo ""
              echo "## üéØ Build Information"
              echo "- **Profile:** ${{ steps.profile.outputs.name }}"
              echo "- **Branch:** ${{ github.ref }}"
              echo "- **Commit:** ${{ github.sha }}"
              echo "- **Timestamp:** $(date '+%Y-%m-%d %H:%M:%S')"
              echo "- **Duration:** $SECONDS seconds"
              echo ""
              
              echo "## üõ†Ô∏è Build Environment"
              echo "- **Node Version:** $(node -v)"
              echo "- **Node Memory:** ${HEAP_SIZE}MB"
              echo "- **Gradle Memory:** ${{ env.GRADLE_MEMORY }}"
              echo "- **Workers:** ${{ env.GRADLE_MAX_WORKERS }}"
              echo ""
              
              echo "## üìä Performance Metrics"
              echo "### System Resources"
              echo "\`\`\`"
              echo "Memory Usage Peak: $(free -h | awk '/Mem:/ {print $3}')"
              echo "Memory Available: $(free -h | awk '/Mem:/ {print $7}')"
              echo "CPU Usage Peak: $(uptime | awk -F'[a-z]:' '{ print $2}')"
              echo "Disk Usage: $(df -h / | awk 'NR==2 {print $5}')"
              echo "\`\`\`"
              echo ""
              
              echo "### Cache Statistics"
              echo "\`\`\`"
              echo "Metro Cache: $(du -sh ${{ env.TMPDIR }}/metro-cache 2>/dev/null || echo 'N/A')"
              echo "Gradle Cache: $(du -sh ~/.gradle/caches 2>/dev/null || echo 'N/A')"
              echo "Build Cache: $(du -sh android/app/build 2>/dev/null || echo 'N/A')"
              echo "\`\`\`"
              echo ""
              
              # Th√™m th√¥ng tin APK n·∫øu c√≥
              APK_PATH=$(find ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }} -name "*.apk" | head -n 1)
              if [ -n "$APK_PATH" ]; then
                APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
                echo "## üì¶ APK Details"
                echo "- **Path:** \`$APK_PATH\`"
                echo "- **Size:** $APK_SIZE"
                echo "- **SHA256:** \`$(sha256sum "$APK_PATH" | cut -d' ' -f1)\`"
              fi
              
              echo ""
              echo "## üîç Build Logs"
              echo "Complete build logs can be found at:"
              echo "- \`${{ env.STORAGE_DIR }}/logs/eas-build-*.log\`"
              echo "- \`${{ env.STORAGE_DIR }}/logs/metro-monitor.log\`"
              
            } > "$SUCCESS_LOG"
            
            echo "üìù Detailed build report saved to: $SUCCESS_LOG"
          else
            echo "‚ùå Build failed after $MAX_RETRIES attempts"
            echo "build_exit_code=1" >> $GITHUB_OUTPUT
            
            # T·ªïng h·ª£p log l·ªói
            echo "Collecting error logs..."
            mkdir -p "${{ env.STORAGE_DIR }}/logs"
            find "${{ env.STORAGE_DIR }}/logs" -name "build-error-*.log" -type f -exec cat {} \; > "${{ env.STORAGE_DIR }}/logs/final-error-report.log"
            echo "üìã Final error report saved to: ${{ env.STORAGE_DIR }}/logs/final-error-report.log"
          fi

      - name: Generate build report
        if: always()
        run: |
          REPORT_DIR="${{ env.STORAGE_DIR }}/reports"
          REPORT_FILE="$REPORT_DIR/build-report-${{ env.BUILD_TIMESTAMP }}.md"
          mkdir -p "$REPORT_DIR"
          
          {
            echo "# üìä Build Report"
            echo ""
            echo "## üîç Th√¥ng tin chung"
            echo "- **Profile:** ${{ steps.profile.outputs.name }}"
            echo "- **Branch:** ${{ github.ref }}"
            echo "- **Commit:** ${{ github.sha }}"
            echo "- **Th·ªùi gian:** $(date)"
            echo "- **Tr·∫°ng th√°i:** $([ "${{ steps.build.outputs.build_exit_code }}" = "0" ] && echo "‚úÖ Th√†nh c√¥ng" || echo "‚ùå Th·∫•t b·∫°i")"
            echo ""
            
            echo "## üíª C·∫•u h√¨nh Build"
            echo "- **CPU Cores:** ${{ env.GRADLE_MAX_WORKERS }}"
            echo "- **Gradle Memory:** ${{ env.GRADLE_MEMORY }}"
            echo "- **Node Memory:** ${{ env.METRO_MEMORY }}MB"
            echo "- **Metro Workers:** ${{ env.GRADLE_MAX_WORKERS }}"
            echo ""
            
            # Thu th·∫≠p metrics
            echo "## üìà Metrics"
            echo "### Performance"
            echo "\`\`\`"
            echo "Build Duration: $SECONDS seconds"
            echo "Memory Peak: $(free -h | awk '/Mem:/ {print $3}')"
            echo "CPU Peak: $(uptime | awk -F'[a-z]:' '{ print $2}')"
            echo "Disk Usage: $(df -h / | awk 'NR==2 {print $5}')"
            echo "\`\`\`"
            echo ""
            
            # Cache statistics
            echo "### üì¶ Cache Info"
            echo "\`\`\`"
            echo "Persistent Cache:"
            du -sh ${{ env.PERSISTENT_CACHE_PATH }}/* 2>/dev/null || echo "No persistent cache"
            echo ""
            echo "Build Cache:"
            du -sh android/app/build/* 2>/dev/null || echo "No build cache"
            echo ""
            echo "Metro Cache:"
            du -sh "${{ env.TMPDIR }}/metro-cache" 2>/dev/null || echo "No metro cache"
            echo "\`\`\`"
            echo ""
            
            # Th√™m th√¥ng tin l·ªói n·∫øu build th·∫•t b·∫°i
            if [ "${{ steps.build.outputs.build_exit_code }}" != "0" ]; then
              echo "## ‚ùå Chi ti·∫øt l·ªói"
              echo "\`\`\`"
              tail -n 50 "${{ env.STORAGE_DIR }}/logs/final-error-report.log" 2>/dev/null || echo "No error log available"
              echo "\`\`\`"
            fi
            
            # Th√™m ƒë∆∞·ªùng d·∫´n t·ªõi APK n·∫øu build th√†nh c√¥ng
            if [ "${{ steps.build.outcome }}" = "success" ]; then
              echo "## üì± APK Info"
              APK_PATH=$(find ${{ env.STORAGE_DIR }} -name "*.apk" -type f -mtime -1 | head -n 1)
              if [ -n "$APK_PATH" ]; then
                echo "- **T√™n file:** $(basename "$APK_PATH")"
                echo "- **K√≠ch th∆∞·ªõc:** $(du -h "$APK_PATH" | cut -f1)"
                echo "- **ƒê∆∞·ªùng d·∫´n:** \`$APK_PATH\`"
              fi
            fi
            
          } > "$REPORT_FILE"
          
          echo "üìù Build report ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i: $REPORT_FILE"

          # Cache stats
          echo "=== Cache Statistics ===" >> ${{ env.STORAGE_DIR }}/build-report.txt
          echo "Persistent Cache:" >> ${{ env.STORAGE_DIR }}/build-report.txt
          du -sh ${{ env.PERSISTENT_CACHE_PATH }}/* >> ${{ env.STORAGE_DIR }}/build-report.txt || true
          echo "Non-Persistent Caches:" >> ${{ env.STORAGE_DIR }}/build-report.txt
          du -sh ~/.gradle/caches ~/.android/build-cache $HOME/expo-tmp/metro-cache ~/.eas-cli .yarn/cache >> ${{ env.STORAGE_DIR }}/build-report.txt || true

          # Gradle metrics
          if [ -f "$HOME/.gradle/daemon/daemon-metrics.log" ]; then
            echo "=== Gradle Metrics ===" >> ${{ env.STORAGE_DIR }}/build-report.txt
            cat "$HOME/.gradle/daemon/daemon-metrics.log" >> ${{ env.STORAGE_DIR }}/build-report.txt || true
          fi

          # Metro bundler metrics
          if [ -f "$HOME/expo-tmp/metro-cache/metro-metrics.json" ]; then
            echo "=== Metro Bundler Metrics ===" >> ${{ env.STORAGE_DIR }}/build-report.txt
            cat "$HOME/expo-tmp/metro-cache/metro-metrics.json" >> ${{ env.STORAGE_DIR }}/build-report.txt || true
          fi

      - name: Cleanup and optimize caches
        if: always()
        run: |
          echo "üßπ T·ªëi ∆∞u h√≥a v√† d·ªçn d·∫πp caches..."
          
          # Function ƒë·ªÉ format k√≠ch th∆∞·ªõc
          format_size() {
            local size=$1
            if [ $size -gt 1048576 ]; then
              echo "$(($size/1048576))GB"
            elif [ $size -gt 1024 ]; then
              echo "$(($size/1024))MB"
            else
              echo "${size}KB"
            fi
          }
          
          # Function ƒë·ªÉ log th√¥ng tin d·ªçn d·∫πp
          log_cleanup() {
            local type=$1
            local path=$2
            local before=$3
            local after=$4
            local saved=$((before - after))
            
            echo "- $type:"
            echo "  + Tr∆∞·ªõc: $(format_size $before)"
            echo "  + Sau: $(format_size $after)"
            echo "  + ƒê√£ gi·∫£i ph√≥ng: $(format_size $saved)"
            echo ""
          }
          
          cleanup_cache() {
            local cache_path=$1
            local days=$2
            local pattern=$3
            
            if [ -d "$cache_path" ]; then
              local before=$(du -s "$cache_path" 2>/dev/null | cut -f1)
              if [ -n "$pattern" ]; then
                find "$cache_path" -type f -name "$pattern" -atime "+$days" -delete || true
              else
                find "$cache_path" -type f -atime "+$days" -delete || true
              fi
              local after=$(du -s "$cache_path" 2>/dev/null | cut -f1)
              log_cleanup "$(basename "$cache_path")" "$cache_path" "$before" "$after"
            fi
          }
          
          # D·ªçn d·∫πp c√°c lo·∫°i cache
          CACHE_DAYS=${{ env.CACHE_LIFETIME_DAYS }}
          cleanup_cache "${{ env.PERSISTENT_CACHE_PATH }}" "$CACHE_DAYS"
          cleanup_cache "~/.gradle/caches" "$CACHE_DAYS"
          cleanup_cache "~/.android/build-cache" "$CACHE_DAYS"
          cleanup_cache "${{ env.TMPDIR }}/metro-cache" "1" # Metro cache ch·ªâ gi·ªØ 1 ng√†y
          
          # T·ªïng h·ª£p th·ªëng k√™ cache m·ªõi
          {
            echo "=== Cache Report ==="
            echo "Timestamp: $(date)"
            echo ""
            echo "Current Cache Sizes:"
            du -sh "${{ env.PERSISTENT_CACHE_PATH }}" ~/.gradle/caches ~/.android/build-cache "${{ env.TMPDIR }}/metro-cache" 2>/dev/null | \
              awk '{printf "%-20s %s\n", $2":", $1}'
          } > "${{ env.STORAGE_DIR }}/reports/cache-stats-${{ env.BUILD_TIMESTAMP }}.txt"
          
          # Save persistent cache
          echo "üíæ L∆∞u persistent cache..."
          mkdir -p "${{ env.PERSISTENT_CACHE_PATH }}"
          CACHE_KEY="persistent-cache-v3-${{ hashFiles('**/yarn.lock', '**/build.gradle', 'eas.json', 'app.json', 'babel.config.js', 'metro.config.js') }}"

      - name: Save Build Artifacts Cache
        uses: actions/cache/save@v3
        if: always() && !cancelled()
        with:
          path: |
            android/app/build
            ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }}
          key: build-artifacts-v3-${{ runner.os }}-${{ github.sha }}

      - name: Log build result
        run: |
          if [ "${{ steps.build.outputs.build_exit_code }}" != "0" ]; then
            echo "Build failed with exit code ${{ steps.build.outputs.build_exit_code }}"
            mkdir -p ${{ env.STORAGE_DIR }}/logs
            # L∆∞u log build n·∫øu c√≥
            if [ -f "${{ env.EAS_LOCAL_BUILD_WORKINGDIR }}/eas-build.log" ]; then
              cp "${{ env.EAS_LOCAL_BUILD_WORKINGDIR }}/eas-build.log" "${{ env.STORAGE_DIR }}/logs/build-log-${{ env.BUILD_TIMESTAMP }}.txt"
            fi
            find ${{ env.EAS_LOCAL_BUILD_WORKINGDIR }} -name "*.log" -type f -exec cp {} ${{ env.STORAGE_DIR }}/logs/ \; || true
            find ${{ env.TMPDIR }} -name "*.log" -type f -exec cp {} ${{ env.STORAGE_DIR }}/logs/ \; || true
          else
            echo "Build completed successfully"
          fi
      
      - name: Save APK to local storage
        if: steps.build.outcome == 'success'
        run: |
          # T√¨m file APK trong th∆∞ m·ª•c artifacts
          APK_FILE=$(find ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }} -name "*.apk" | head -n 1)
          
          if [ -n "$APK_FILE" ]; then
            # T·∫°o t√™n file v·ªõi profile v√† timestamp
            APK_FILENAME="ksms-${{ steps.profile.outputs.name }}-${{ env.BUILD_TIMESTAMP }}.apk"
            
            # Sao ch√©p file APK v√†o th∆∞ m·ª•c l∆∞u tr·ªØ
            cp "$APK_FILE" "${{ env.STORAGE_DIR }}/$APK_FILENAME"
            
            # T·∫°o metadata
            echo "Build completed at $(date)" > "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Profile: ${{ steps.profile.outputs.name }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Branch: ${{ github.ref }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Commit: ${{ github.sha }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "CPU Cores Used: ${{ env.GRADLE_MAX_WORKERS }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Gradle Memory: ${{ env.GRADLE_MEMORY }}" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            echo "Node Memory: ${{ env.METRO_MEMORY }}MB" >> "${{ env.STORAGE_DIR }}/metadata-${{ env.BUILD_TIMESTAMP }}.txt"
            
            echo "APK saved to ${{ env.STORAGE_DIR }}/$APK_FILENAME"
          else
            echo "No APK file found in artifacts directory!"
            ls -la ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }}
            exit 1
          fi
      
      - name: List recent APKs
        run: |
          echo "=== Recent APK Builds ==="
          find $HOME/ksms-builds -type f -name "*.apk" -mtime -7 | sort -r || true

      - name: Cleanup Old Persistent Caches
        if: always()
        run: |
          echo "Cleaning up old persistent caches..."
          find ${{ env.PERSISTENT_CACHE_PATH }} -type f -atime +${{ env.CACHE_LIFETIME_DAYS }} -delete || true
          echo "Cleanup complete."
