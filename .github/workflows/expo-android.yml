name: Optimized Local Build and Release (Latest Actions, Input Method)

permissions:
  contents: write
  issues: write
  pull-requests: write
  discussions: write
  packages: write
  actions: write
  repository-projects: write

on:
  push:
    branches: [main, development]
    paths:
      - 'app/**'
      - 'assets/**'
      - 'package.json'
      - 'yarn.lock'
      - 'app.json'
      - 'eas.json'
      - 'babel.config.js'
      - 'metro.config.js'
      - '.github/workflows/expo-android.yml'

jobs:
  cleanup-artifacts:
    runs-on: self-hosted
    steps:
      - name: Cleanup Artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1 day'
          skip-tags: true
          skip-recent: 5

  setup:
    needs: cleanup-artifacts
    runs-on: self-hosted
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      # Kiểm tra và cài đặt Yarn nếu chưa có
      - name: Setup Yarn
        run: |
          if ! command -v yarn &> /dev/null; then
            echo "Yarn chưa được cài đặt, đang cài đặt..."
            npm install -g yarn
            # Xác minh cài đặt
            yarn --version || {
              echo "Không thể cài đặt yarn. Sử dụng npm thay thế."
              echo "USE_NPM=true" >> $GITHUB_ENV
            }
          else
            echo "Yarn đã được cài đặt: $(yarn --version)"
          fi
          
      # Cài đặt trước các dependencies để tăng tốc
      - name: Fast Install
        run: |
          if [ "${USE_NPM:-false}" == "true" ]; then
            # Sử dụng npm thay thế
            npm config set fetch-timeout 300000
            npm config set fund false
            echo "Sử dụng npm thay thế yarn"
          else
            # Đặt Yarn discard hoặc tăng tốc độ
            yarn config set network-timeout 300000
            yarn config set --home enableTelemetry 0
          fi
          
          # Thêm bộ đệm mạng
          echo "Cache network calls"
          
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.yarn/cache
            .expo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock', '**/package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-
            
      - name: Install dependencies
        run: |
          if [ "${USE_NPM:-false}" == "true" ]; then
            echo "Sử dụng npm để cài đặt dependencies..."
            npm ci || npm install
          else
            echo "Sử dụng yarn để cài đặt dependencies..."
            yarn install --frozen-lockfile --prefer-offline
          fi
          
      - name: Set Version
        id: set-version
        run: echo "version=latest" >> $GITHUB_OUTPUT

  build-android:
    needs: setup
    runs-on: self-hosted
    outputs:
      direct_upload: ${{ steps.check-artifact.outputs.direct_upload }}
      apk_path: ${{ steps.set-apk-path.outputs.apk_path }}
      build_time: ${{ steps.set-apk-path.outputs.build_time }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'
          
      # Kiểm tra và cài đặt Yarn nếu chưa có
      - name: Setup Yarn
        run: |
          if ! command -v yarn &> /dev/null; then
            echo "Yarn chưa được cài đặt, đang cài đặt..."
            npm install -g yarn
            # Xác minh cài đặt
            yarn --version || {
              echo "Không thể cài đặt yarn. Sử dụng npm thay thế."
              echo "USE_NPM=true" >> $GITHUB_ENV
            }
          else
            echo "Yarn đã được cài đặt: $(yarn --version)"
          fi
          
      # Cài đặt trước các dependencies để tăng tốc
      - name: Fast Install
        run: |
          if [ "${USE_NPM:-false}" == "true" ]; then
            # Sử dụng npm thay thế
            npm config set fetch-timeout 300000
            npm config set fund false
            echo "Sử dụng npm thay thế yarn"
          else
            # Đặt Yarn discard hoặc tăng tốc độ
            yarn config set network-timeout 300000
            yarn config set --home enableTelemetry 0
          fi
          
          # Thêm bộ đệm mạng
          echo "Cache network calls"
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.yarn/cache
            .expo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock', '**/package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Install dependencies
        run: |
          if [ "${USE_NPM:-false}" == "true" ]; then
            echo "Sử dụng npm để cài đặt dependencies..."
            npm ci || npm install
          else
            echo "Sử dụng yarn để cài đặt dependencies..."
            yarn install --frozen-lockfile --prefer-offline
          fi
      - name: Install EAS CLI
        run: |
          if [ "${USE_NPM:-false}" == "true" ]; then
            echo "Sử dụng npm để cài đặt EAS CLI..."
            npm install -g eas-cli
          else
            echo "Sử dụng yarn để cài đặt EAS CLI..."
            yarn global add eas-cli
          fi
          
          # Kiểm tra EAS CLI đã được cài đặt
          eas --version || {
            echo "::error::Không thể cài đặt eas-cli. Thử phương pháp khác..."
            npm install -g eas-cli
          }
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .android/cache
            ~/.m2/repository
            android/app/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradlew', '**/gradle/wrapper/gradle-wrapper.properties', '**/build.gradle', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Android Environment
        run: |
          # Tạo thư mục android nếu chưa tồn tại
          mkdir -p android
          
          # Tạo file gradle.properties với các cấu hình cần thiết
          cat > android/gradle.properties << EOF
          # Project-wide Gradle settings.
          
          # Android SDK
          android.useAndroidX=true
          android.enableJetifier=true
          
          # Version of flipper SDK to use with React Native
          FLIPPER_VERSION=0.182.0
          
          # Use this property to specify which architecture you want to build.
          # You can also override it from the CLI using
          # ./gradlew <task> -PreactNativeArchitectures=x86_64
          reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
          
          # Use this property to enable support to the new architecture.
          # This will allow you to use TurboModules and the Fabric render in
          # your application. You should enable this flag either if you want
          # to write custom TurboModules/Fabric components OR use libraries that
          # are providing them.
          newArchEnabled=false
          
          # Use this property to enable or disable the Hermes JS engine.
          # If set to false, you will be using JSC instead.
          hermesEnabled=true
          
          # Keystore settings
          MYAPP_UPLOAD_STORE_FILE=release.keystore
          MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
          
          # Tối ưu hóa build performance
          org.gradle.daemon=true
          org.gradle.configureondemand=true
          org.gradle.parallel=true
          org.gradle.caching=true
          org.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC
          
          # Tối ưu Android build
          android.enableR8.fullMode=true
          android.enableDexingArtifactTransform.desugaring=false
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          EOF
          
          echo "Created gradle.properties"
          ls -la android/gradle.properties
      - name: Setup Keystore
        run: |
          # Tạo thư mục android/app nếu chưa tồn tại
          mkdir -p android/app
          
          # Lưu base64 vào tệp trước khi giải mã
          echo '${{ secrets.ANDROID_KEYSTORE_BASE64 }}' > keystore-base64.txt
          
          # Làm sạch tệp base64 (xóa khoảng trắng, xuống dòng không mong muốn)
          tr -d '\n\r\t ' < keystore-base64.txt > keystore-base64-clean.txt
          
          # Giải mã base64 thành binary
          base64 --decode keystore-base64-clean.txt > android/app/release.keystore || {
            echo "Failed to decode base64 keystore"
            exit 1
          }
          
          # Kiểm tra kích thước file keystore để xác nhận thành công
          FILESIZE=$(stat -c%s "android/app/release.keystore")
          echo "Keystore size: $FILESIZE bytes"
          
          if [ "$FILESIZE" -eq 0 ]; then
            echo "Error: Generated keystore is empty!"
            exit 1
          fi
          
          # Đường dẫn tuyệt đối đến keystore
          ABSOLUTE_KEYSTORE_PATH=$(realpath android/app/release.keystore)
          echo "KEYSTORE_PATH=$ABSOLUTE_KEYSTORE_PATH" >> $GITHUB_ENV
      - name: Verify Keystore
        run: |
          # Kiểm tra keystore tồn tại và có kích thước hợp lệ
          if [ ! -f "android/app/release.keystore" ]; then
            echo "Error: Keystore file not found!"
            exit 1
          fi
          
          # Kiểm tra kích thước của keystore (phải > 0 bytes)
          FILESIZE=$(stat -c%s "android/app/release.keystore")
          if [ "$FILESIZE" -eq 0 ]; then
            echo "Error: Keystore file is empty!"
            exit 1
          fi
          
          echo "Keystore verification successful!"
          echo "Keystore size: $FILESIZE bytes"
      - name: Create eas.json
        run: |
          cat > eas.json << EOF
          {
            "cli": {
              "version": ">= 3.13.3",
              "appVersionSource": "remote",
              "promptToConfigurePushNotifications": false
            },
            "build": {
              "development": {
                "developmentClient": true,
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleDebug",
                  "cache": {
                    "key": "gradle-${{ github.sha }}"
                  }
                }
              },
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease",
                  "cache": {
                    "key": "gradle-${{ github.sha }}"
                  }
                }
              }, 
              "production": {
                "autoIncrement": true,
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease",
                  "credentialsSource": "local",
                  "cache": {
                    "key": "gradle-${{ github.sha }}"
                  },
                  "image": "latest"
                },
                "cache": {
                  "disabled": false,
                  "key": "yarn-${{ github.sha }}"
                }
              }
            },
            "submit": {
              "production": {}
            }
          }
          EOF
      - name: Create credentials.json
        run: |
          # Tạo thư mục .expo và lưu credentials
          mkdir -p .expo
          
          # Format đúng cho credentials.json theo EAS build
          cat > .expo/credentials.json << EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "${{ env.KEYSTORE_PATH }}",
                "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
                "keyAlias": "${{ secrets.ANDROID_KEYSTORE_ALIAS }}",
                "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
              }
            }
          }
          EOF
          
          # Tạo phiên bản credentials.json trong thư mục gốc (để đảm bảo)
          cp .expo/credentials.json ./credentials.json
          
          # Kiểm tra file đã được tạo
          ls -la .expo/credentials.json
          ls -la credentials.json
      - name: Debug environment
        run: |
          echo "==== Environment Variables ===="
          echo "KEYSTORE_PATH: $KEYSTORE_PATH"
          
          # Chỉ kiểm tra các biến quan trọng
          [ -n "$ANDROID_KEYSTORE_ALIAS" ] && echo "ANDROID_KEYSTORE_ALIAS: Set ✓" || echo "ANDROID_KEYSTORE_ALIAS: Not set ✗"
          [ -n "$ANDROID_KEYSTORE_PASSWORD" ] && echo "ANDROID_KEYSTORE_PASSWORD: Set ✓" || echo "ANDROID_KEYSTORE_PASSWORD: Not set ✗"
          [ -n "$ANDROID_KEY_PASSWORD" ] && echo "ANDROID_KEY_PASSWORD: Set ✓" || echo "ANDROID_KEY_PASSWORD: Not set ✗"
          
          echo "==== Critical Files ===="
          if [ -f "android/app/release.keystore" ]; then
            echo "✓ Keystore exists"
          else
            echo "✗ Keystore missing"
            exit 1
          fi
          
          if [ -f ".expo/credentials.json" ]; then
            echo "✓ Credentials exist"
          else
            echo "✗ Credentials missing"
            exit 1
          fi
      - name: Build Android app (Local Build)
        run: |
          # Tạo thư mục build
          BUILD_DIRECTORY="$HOME/app-builds"
          APP_DIRECTORY="$BUILD_DIRECTORY/ksms-app"
          mkdir -p "$APP_DIRECTORY"
          
          # Tạo timestamp cho build này
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          BUILD_NUMBER="${{ github.run_number }}"
          
          # Tạo thư mục cho lưu trữ APK
          APK_STORAGE_DIR="$HOME/apk-storage"
          mkdir -p "$APK_STORAGE_DIR/archives"
          mkdir -p "$APK_STORAGE_DIR/versions"
          
          # Chuẩn bị thư mục build
          rm -rf app-build
          mkdir -p app-build
          
          # Xem các biến môi trường EAS
          echo "Checking EAS environment..."
          eas diagnostics
          
          # Kiểm tra cấu hình build
          echo "Checking build configuration..."
          cat eas.json
          
          # Kiểm tra credentials
          echo "Checking credentials..."
          if [ -f ".expo/credentials.json" ]; then
            echo "Found .expo/credentials.json"
            cat .expo/credentials.json | sed 's/"keyPassword": "[^"]*"/"keyPassword": "***"/g' | sed 's/"keystorePassword": "[^"]*"/"keystorePassword": "***"/g'
          else
            echo "No .expo/credentials.json found"
          fi
          
          # Kiểm tra keystore
          echo "Checking keystore..."
          ls -la android/app/release.keystore
          
          # Thực hiện build tối ưu
          echo "Starting build process..."
          GRADLE_OPTS="-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=8" \
          eas build --local \
          --non-interactive \
          --output=./app-build/app-release.apk \
          --platform=android \
          --profile=production

          # Kiểm tra file APK đã được tạo chưa
          if [ -f "app-build/app-release.apk" ]; then
            echo "✅ Build thành công, file APK đã được tạo"
            ls -l app-build/app-release.apk
            
            # Tạo tên file APK với timestamp và số build
            APK_FILENAME="ksms-mb-${TIMESTAMP}-${BUILD_NUMBER}.apk"
            APK_PATH="$APK_STORAGE_DIR/archives/$APK_FILENAME"
            
            # Sao chép APK vào thư mục lưu trữ
            cp app-build/app-release.apk "$APK_PATH"
            
            # Tạo bản sao làm "latest.apk" để luôn có URL cố định
            cp app-build/app-release.apk "$APK_STORAGE_DIR/latest.apk"
            
            # Lưu thông tin phiên bản
            echo '{
              "filename": "'$APK_FILENAME'",
              "timestamp": "'$TIMESTAMP'",
              "build_number": "'$BUILD_NUMBER'",
              "commit": "'${{ github.sha }}'"
            }' > "$APK_STORAGE_DIR/versions/version-${TIMESTAMP}.json"
            
            # Chỉ giữ 2 phiên bản mới nhất
            cd "$APK_STORAGE_DIR/archives"
            ls -t *.apk | tail -n +3 | xargs -r rm
            
            cd "$APK_STORAGE_DIR/versions"
            ls -t *.json | tail -n +3 | xargs -r rm
            
            # Cập nhật README
            echo "# KSMS Mobile App Downloads" > "$APK_STORAGE_DIR/README.md"
            echo "" >> "$APK_STORAGE_DIR/README.md"
            echo "## Latest Version" >> "$APK_STORAGE_DIR/README.md"
            echo "- Build: $BUILD_NUMBER" >> "$APK_STORAGE_DIR/README.md"
            echo "- Date: $(date +'%Y-%m-%d %H:%M:%S')" >> "$APK_STORAGE_DIR/README.md"
            echo "- Commit: ${{ github.sha }}" >> "$APK_STORAGE_DIR/README.md"
            echo "" >> "$APK_STORAGE_DIR/README.md"
            echo "## Download Links" >> "$APK_STORAGE_DIR/README.md"
            echo "- **Latest version**: http://${{ secrets.VPS_HOST }}${{ secrets.VPS_PUBLIC_PATH }}/latest.apk" >> "$APK_STORAGE_DIR/README.md"
            echo "- **This specific version**: http://${{ secrets.VPS_HOST }}${{ secrets.VPS_PUBLIC_PATH }}/archives/$APK_FILENAME" >> "$APK_STORAGE_DIR/README.md"
            
            # Thiết lập output
            echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "build_time=$TIMESTAMP" >> $GITHUB_OUTPUT
          else
            echo "❌ Build thất bại, không tìm thấy file APK"
            exit 1
          fi
        id: set-apk-path

  release:
    needs: [setup, build-android]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      # Fallback nếu artifact không upload được (từ build-android job)
      - name: List Available Artifacts
        id: list-artifacts
        if: needs.build-android.outputs.direct_upload == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Liệt kê các artifact hiện có:');
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            for (const artifact of artifacts.data.artifacts) {
              console.log(`- ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes)`);
            }
            
            return artifacts.data.artifacts.length > 0;
      
      - name: Download APK Artifact
        id: download-artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build-latest
          path: ./release-assets/
      
      - name: Verify APK Download
        run: |
          echo "===== KIỂM TRA FILE APK DOWNLOAD ====="
          mkdir -p ./release-assets
          
          # Tìm kiếm APK trong thư mục release-assets
          if [ -f "./release-assets/app-release.apk" ]; then
            echo "✅ Tìm thấy APK tại ./release-assets/app-release.apk"
            ls -la ./release-assets/app-release.apk
            # Sao chép file về thư mục gốc để upload
            cp ./release-assets/app-release.apk ./ksms-mb-latest.apk
            echo "✅ Đã sao chép sang ./ksms-mb-latest.apk"
          else
            echo "❌ Không tìm thấy APK tại ./release-assets/app-release.apk"
            
            # Tìm kiếm trực tiếp mọi file APK
            echo "Tìm kiếm tất cả file APK:"
            find . -name "*.apk" -type f
            
            # Thử tải artifact khẩn cấp
            echo "Thử tải artifact khẩn cấp..."
            mkdir -p ./emergency
            
            # Sửa lỗi cú pháp - chạy lệnh download trực tiếp
            echo "Tải artifact khẩn cấp..."
            
            # Tải artifact khẩn cấp
            if ! [ -z "${{ github.run_id }}" ]; then
              echo "Tải từ run ID hiện tại: ${{ github.run_id }}"
              curl -L -o emergency-download.zip \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/actions/artifacts/apk-emergency-latest/zip" || true
                
              # Giải nén nếu tải thành công
              if [ -f emergency-download.zip ]; then
                unzip -o emergency-download.zip -d ./emergency/ || true
              fi
            fi
          fi
          
          # Hiển thị tất cả các file trong thư mục hiện tại
          echo "===== TẤT CẢ CÁC FILE TRONG THƯ MỤC HIỆN TẠI ====="
          ls -la ./
      
      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Tìm kiếm release với tag "latest"
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'latest'
              });
              
              if (release && release.data) {
                // Xóa release cũ
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id
                });
                
                console.log('Đã xóa release cũ');
              }
            } catch (error) {
              // Không tìm thấy release, không có vấn đề gì
              console.log('Không tìm thấy release cũ hoặc có lỗi:', error.message);
            }
            
            // Kiểm tra xem tag đã tồn tại chưa
            try {
              const tag = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/latest'
              });
              
              if (tag) {
                // Xóa tag cũ
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'tags/latest'
                });
                console.log('Đã xóa tag cũ');
              }
            } catch (error) {
              console.log('Không tìm thấy tag cũ hoặc có lỗi:', error.message);
            }
        
      - name: Create Release with VPS Link
        run: |
          # Lấy thông tin từ bước build
          APK_PATH="${{ needs.build-android.outputs.apk_path }}"
          BUILD_TIME="${{ needs.build-android.outputs.build_time }}"
          BUILD_NUMBER="${{ github.run_number }}"
          COMMIT_SHA="${{ github.sha }}"
          
          # Lấy tên file APK từ đường dẫn
          APK_FILENAME=$(basename "$APK_PATH")
          
          # URL cho file APK
          APK_URL="http://${{ secrets.VPS_HOST }}${{ secrets.VPS_PUBLIC_PATH }}/archives/$APK_FILENAME"
          LATEST_URL="http://${{ secrets.VPS_HOST }}${{ secrets.VPS_PUBLIC_PATH }}/latest.apk"
          
          # Configure QR Code 
          QR_CONFIG="size=300&margin=1&dark=000000&light=FFFFFF"
          QR_CODE_URL="https://quickchart.io/qr?text=$(urlencode "$LATEST_URL")&$QR_CONFIG"
          
          # Xóa tag cũ nếu tồn tại
          git tag -d latest || true
          git push --delete origin latest || true
          
          # Tạo tag mới
          git tag latest
          git push origin latest
          
          # Tạo release notes
          cat > release_notes.md << EOL
          ### KSMS Mobile App - Build ${BUILD_NUMBER}

          **Build Information**
          - Build Date: $(date +'%Y-%m-%d')
          - Build Time: ${BUILD_TIME}
          - Build Number: ${BUILD_NUMBER}
          - Commit: ${COMMIT_SHA:0:7}

          ### Installation

          1. **Scan QR Code**
          ![QRCode](${QR_CODE_URL})

          2. **Download Links**
          - [Download Latest Version](${LATEST_URL})
          - [Download This Specific Version](${APK_URL})

          ### Notes
          - Chỉ 2 phiên bản gần nhất được lưu trên server
          - Phiên bản này có sẵn tại: \`${APK_FILENAME}\`
          - VPS link luôn trỏ đến phiên bản mới nhất
          EOL
          
          # Sử dụng GitHub CLI để tạo release
          gh release create latest \
            --title "Latest Build (${BUILD_NUMBER})" \
            --notes-file release_notes.md \
            --target ${{ github.ref }} \
            --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Utility function cho URL encoding
      - name: Set up URL encode function
        run: |
          # Tạo function để URL encode một string
          urlencode() {
            local string="$1"
            local strlen=${#string}
            local encoded=""
            local pos c o
            
            for (( pos=0 ; pos<strlen ; pos++ )); do
              c=${string:$pos:1}
              case "$c" in
                [-_.~a-zA-Z0-9] ) o="${c}" ;;
                * )               printf -v o '%%%02x' "'$c"
              esac
              encoded+="${o}"
            done
            echo "${encoded}"
          }
          export -f urlencode
