name: EAS Build Android

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/android-build.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      profile:
        description: 'Build profile (development, preview, production)'
        required: true
        default: 'preview'
        type: choice
        options:
          - development
          - preview
          - production

env:
  # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng to√†n c·ª•c
  CACHE_LIFETIME_DAYS: 7
  YARN_NETWORK_TIMEOUT: 300000
  GRADLE_MEMORY: "24g"
  GRADLE_MAX_WORKERS: 14
  METRO_MEMORY: "8192"
  PERSISTENT_CACHE_PATH: "~/.eas-build-cache"

jobs:
  build:
    name: EAS Build Android
    runs-on: [google]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Determine build profile
        id: profile
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "name=${{ github.event.inputs.profile }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "name=production" >> $GITHUB_OUTPUT
          else
            echo "name=preview" >> $GITHUB_OUTPUT
          fi
      
      - name: Setup build directories
        run: |
          mkdir -p $HOME/expo-tmp
          mkdir -p $HOME/eas-builds/working
          mkdir -p $HOME/eas-builds/artifacts
          mkdir -p $HOME/gradle-build-cache
          mkdir -p $HOME/.eas-build-cache
          
          # T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ APK theo ng√†y
          BUILD_DATE=$(date +"%Y-%m-%d")
          STORAGE_DIR=$HOME/ksms-builds/$BUILD_DATE
          mkdir -p $STORAGE_DIR
          echo "STORAGE_DIR=$STORAGE_DIR" >> $GITHUB_ENV
          
          # X√≥a d·ªØ li·ªáu build c≈©
          rm -rf $HOME/eas-builds/working/*
          rm -rf $HOME/expo-tmp/*
          rm -rf $HOME/eas-builds/artifacts/*
          
          # Thi·∫øt l·∫≠p v√† l∆∞u bi·∫øn m√¥i tr∆∞·ªùng
          echo "TMPDIR=$HOME/expo-tmp" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_WORKINGDIR=$HOME/eas-builds/working" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_ARTIFACTS_DIR=$HOME/eas-builds/artifacts" >> $GITHUB_ENV
          echo "EAS_LOCAL_BUILD_SKIP_CLEANUP=1" >> $GITHUB_ENV
          echo "BUILD_TIMESTAMP=$(date +"%Y%m%d_%H%M%S")" >> $GITHUB_ENV
          
          # Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ t·∫≠n d·ª•ng t·ªëi ƒëa ph·∫ßn c·ª©ng
          GRADLE_MEM="${GRADLE_MEMORY}"
          GRADLE_WORKERS="${GRADLE_MAX_WORKERS}"
          METRO_MEM="${METRO_MEMORY}"
          
          echo "GRADLE_OPTS=-Xmx$GRADLE_MEM -XX:MaxMetaspaceSize=4g -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.jvmargs=-Xmx$GRADLE_MEM -Dorg.gradle.workers.max=$GRADLE_WORKERS -XX:+UseParallelGC" >> $GITHUB_ENV
          
          # B·ªè qua c·∫£nh b√°o v·ªÅ k√Ω t·ª± $ trong ƒë·ªãnh danh C++
          echo "CFLAGS=-Wno-dollar-in-identifier-extension" >> $GITHUB_ENV

      - name: Restore Yarn cache
        uses: actions/cache@v3
        with:
          path: .yarn/cache
          key: yarn-cache-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-cache-${{ runner.os }}-

      - name: Restore Gradle cache
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-cache-${{ runner.os }}-${{ hashFiles('**/android/**/build.gradle') }}
          restore-keys: |
            gradle-cache-${{ runner.os }}-

      - name: Restore EAS cache
        uses: actions/cache@v3
        with:
          path: ~/.eas-build-cache
          key: eas-cache-${{ runner.os }}-${{ hashFiles('eas.json') }}
          restore-keys: |
            eas-cache-${{ runner.os }}-

      - name: Setup Android SDK
        run: |
          echo "Setting up Android SDK environment..."
          
          # D·ªçn d·∫πp m√¥i tr∆∞·ªùng c≈©
          rm -rf $HOME/android-sdk
          
          # T·∫°o th∆∞ m·ª•c m·ªõi
          mkdir -p $HOME/android-sdk
          
          # ƒê·∫∑t bi·∫øn SDK_ROOT
          SDK_ROOT=$HOME/android-sdk
          echo "ANDROID_HOME=$SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          
          # C√†i ƒë·∫∑t Android SDK
          cd $SDK_ROOT
          
          # T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c ƒë√∫ng cho cmdline-tools
          mkdir -p $SDK_ROOT/cmdline-tools/latest
          
          # T·∫£i v√† gi·∫£i n√©n command line tools v√†o th∆∞ m·ª•c t·∫°m
          wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools-linux-9477386_latest.zip -d temp_dir
          
          # Di chuy·ªÉn n·ªôi dung v√†o v·ªã tr√≠ ch√≠nh x√°c
          mv temp_dir/cmdline-tools/* $SDK_ROOT/cmdline-tools/latest/
          
          # D·ªçn d·∫πp
          rm -rf temp_dir commandlinetools-linux-9477386_latest.zip
          
          # Thi·∫øt l·∫≠p quy·ªÅn truy c·∫≠p
          chmod -R 755 $SDK_ROOT/cmdline-tools
          
          # Ch·∫•p nh·∫≠n licenses
          yes | $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$SDK_ROOT --licenses || true
          
          # C√†i ƒë·∫∑t packages v·ªõi retry v√† verify
          for i in {1..3}; do
            echo "Installing Android packages (Attempt $i)..."
            
            if $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$SDK_ROOT --install "platform-tools" "platforms;android-34" "build-tools;34.0.0"; then
              echo "Waiting for package installation to complete..."
              sleep 30  # Ch·ªù ƒë·ªÉ ƒë·∫£m b·∫£o c√†i ƒë·∫∑t ho√†n t·∫•t
              
              # Verify c√†i ƒë·∫∑t
              if $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$SDK_ROOT --list_installed | grep -q "platform-tools"; then
                echo "‚úÖ Platform tools installed successfully"
                break
              fi
            fi
            
            echo "‚ö†Ô∏è Attempt $i failed, retrying after cleanup..."
            rm -rf $SDK_ROOT/platform-tools $SDK_ROOT/build-tools $SDK_ROOT/platforms  # Cleanup failed install
            sleep 10
          done
          
          # Double check installation
          if ! $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$SDK_ROOT --list_installed | grep -q "platform-tools"; then
            echo "‚ùå Failed to install Android packages after 3 attempts"
            exit 1
          fi

      - name: Install dependencies
        run: |
          yarn config set network-timeout ${YARN_NETWORK_TIMEOUT}
          yarn install --frozen-lockfile --prefer-offline --network-timeout ${YARN_NETWORK_TIMEOUT} --non-interactive --cache-folder .yarn/cache

      - name: Fix Metro versions
        run: |
          # Fix package versions for Metro
          yarn add metro@^0.81.0 metro-resolver@^0.81.0 metro-config@^0.81.0 --dev

      - name: Build Android App
        run: |
          echo "Building with profile: ${{ steps.profile.outputs.name }}"
          
          # Configure EAS Build
          npx eas-cli build --platform android --profile ${{ steps.profile.outputs.name }} --local --non-interactive
          
          # Copy artifacts
          if [ -d "${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }}" ]; then
            cp -r ${{ env.EAS_LOCAL_BUILD_ARTIFACTS_DIR }}/* ${{ env.STORAGE_DIR }}/
            echo "‚úÖ Build artifacts copied to ${{ env.STORAGE_DIR }}"
          else
            echo "‚ùå No build artifacts found"
            exit 1
          fi

      - name: Clean and monitor caches
        run: |
          echo "üßπ B·∫Øt ƒë·∫ßu qu√° tr√¨nh d·ªçn d·∫πp cache..."
          
          # T·∫°o th∆∞ m·ª•c log
          LOG_DIR="${{ env.STORAGE_DIR }}/logs/cache"
          mkdir -p "$LOG_DIR"
          MONITOR_LOG="$LOG_DIR/cache-monitor-${{ env.BUILD_TIMESTAMP }}.log"
          
          # Qu·∫£n l√Ω k√≠ch th∆∞·ªõc cache
          yarn cache clean
          rm -rf $HOME/.gradle/caches/build-cache-*
          
          echo "‚úÖ Cache cleanup completed"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-app-${{ steps.profile.outputs.name }}-${{ env.BUILD_TIMESTAMP }}
          path: ${{ env.STORAGE_DIR }}/*.apk
          retention-days: 7
