name: Optimized Local Build and Release (Latest Actions, Input Method)

permissions:
  contents: write
  issues: write
  pull-requests: write
  discussions: write
  packages: write
  actions: write
  repository-projects: write

on:
  push:
    branches: [main, development]
    paths:
      - 'app/**'
      - 'assets/**'
      - 'package.json'
      - 'yarn.lock'
      - 'app.json'
      - 'eas.json'
      - 'babel.config.js'
      - 'metro.config.js'
      - '.github/workflows/expo-android.yml'

jobs:
  cleanup-artifacts:
    runs-on: self-hosted
    steps:
      - name: Cleanup Artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1 day'
          skip-tags: true
          skip-recent: 5

  setup:
    needs: cleanup-artifacts
    runs-on: self-hosted
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      # Kiểm tra và cài đặt Yarn nếu chưa có
      - name: Setup Yarn
        run: |
          echo "===== KIỂM TRA YARN ====="
          if command -v yarn &> /dev/null; then
            YARN_VERSION=$(yarn --version)
            echo "✅ Yarn đã được cài đặt: $YARN_VERSION"
          else
            echo "⚠️ Yarn chưa được cài đặt, đang cài đặt..."
            npm install -g yarn
            
            # Xác minh cài đặt
            if command -v yarn &> /dev/null; then
              YARN_VERSION=$(yarn --version)
              echo "✅ Đã cài đặt Yarn thành công: $YARN_VERSION"
            else
              echo "❌ Không thể cài đặt yarn. Sử dụng npm thay thế."
              echo "USE_NPM=true" >> $GITHUB_ENV
            fi
          fi
          echo "===== KẾT THÚC KIỂM TRA YARN ====="
          
      # Thiết lập thư mục cache và kiểm tra cache với symlink
      - name: Setup VPS Cache with Symlinks
        run: |
          echo "===== THIẾT LẬP CACHE TRÊN VPS VỚI SYMLINK ====="
          
          # Tạo thư mục persistent storage cho cache
          PERSISTENT_CACHE="$HOME/persistent-cache"
          PERSISTENT_NODE_MODULES="$PERSISTENT_CACHE/node_modules"
          PERSISTENT_GRADLE="$PERSISTENT_CACHE/gradle"
          PERSISTENT_GRADLE_WRAPPER="$PERSISTENT_CACHE/gradle-wrapper"
          PERSISTENT_GRADLE_CACHES="$PERSISTENT_CACHE/gradle-caches"
          PERSISTENT_M2="$PERSISTENT_CACHE/m2"
          PERSISTENT_EAS="$PERSISTENT_CACHE/eas"
          
          # Tạo thư mục persistent nếu chưa tồn tại
          mkdir -p "$PERSISTENT_NODE_MODULES"
          mkdir -p "$PERSISTENT_GRADLE"
          mkdir -p "$PERSISTENT_GRADLE_WRAPPER"
          mkdir -p "$PERSISTENT_GRADLE_CACHES"
          mkdir -p "$PERSISTENT_M2"
          mkdir -p "$PERSISTENT_EAS"
          
          # Tính toán hash cho package.json và yarn.lock hoặc package-lock.json
          if [ -f "yarn.lock" ]; then
            PKG_HASH=$(md5sum yarn.lock package.json | sort | md5sum | cut -d ' ' -f 1)
            echo "Sử dụng yarn.lock và package.json để tạo hash: $PKG_HASH"
          else
            if [ -f "package-lock.json" ]; then
              PKG_HASH=$(md5sum package-lock.json package.json | sort | md5sum | cut -d ' ' -f 1)
              echo "Sử dụng package-lock.json và package.json để tạo hash: $PKG_HASH"
            else
              PKG_HASH=$(md5sum package.json | cut -d ' ' -f 1)
              echo "Chỉ sử dụng package.json để tạo hash: $PKG_HASH"
            fi
          fi
          
          # Lưu hash để sử dụng sau này
          echo "PKG_HASH=$PKG_HASH" >> $GITHUB_ENV
          
          # Tạo thư mục cho hash hiện tại nếu chưa tồn tại
          NODE_MODULES_HASH_DIR="$PERSISTENT_NODE_MODULES/$PKG_HASH"
          if [ ! -d "$NODE_MODULES_HASH_DIR" ]; then
            mkdir -p "$NODE_MODULES_HASH_DIR"
          fi
          
          # Kiểm tra xem có cache node_modules cho hash này không
          echo "NODE_MODULES_HASH_DIR=$NODE_MODULES_HASH_DIR" >> $GITHUB_ENV
          if [ -d "$NODE_MODULES_HASH_DIR/node_modules" ] && [ -n "$(ls -A "$NODE_MODULES_HASH_DIR/node_modules" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache node_modules cho hash: $PKG_HASH"
            echo "NODE_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache node_modules cho hash: $PKG_HASH"
            echo "NODE_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra xem có cache gradle hay không
          # Tính toán hash cho các file Gradle
          if [ -d "android" ]; then
            if [ -f "android/build.gradle" ] && [ -f "android/gradle.properties" ]; then
              GRADLE_HASH=$(find android -name "*.gradle" -o -name "gradle.properties" | sort | xargs md5sum | md5sum | cut -d ' ' -f 1)
              echo "Gradle hash: $GRADLE_HASH"
              
              # Tạo thư mục cho gradle hash
              GRADLE_HASH_DIR="$PERSISTENT_GRADLE/$GRADLE_HASH"
              if [ ! -d "$GRADLE_HASH_DIR" ]; then
                mkdir -p "$GRADLE_HASH_DIR"
              fi
              echo "GRADLE_HASH_DIR=$GRADLE_HASH_DIR" >> $GITHUB_ENV
              echo "GRADLE_HASH=$GRADLE_HASH" >> $GITHUB_ENV
              
              if [ -d "$GRADLE_HASH_DIR/.gradle" ] && [ -n "$(ls -A "$GRADLE_HASH_DIR/.gradle" 2>/dev/null)" ]; then
                echo "✅ Đã tìm thấy cache gradle cho hash: $GRADLE_HASH"
                echo "GRADLE_CACHE_EXISTS=true" >> $GITHUB_ENV
              else
                echo "⚠️ Không tìm thấy cache gradle cho hash: $GRADLE_HASH"
                echo "GRADLE_CACHE_EXISTS=false" >> $GITHUB_ENV
              fi
            else
              echo "⚠️ Không tìm thấy các file gradle cần thiết"
              echo "GRADLE_CACHE_EXISTS=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ Thư mục android chưa tồn tại"
            echo "GRADLE_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra cache gradle-wrapper
          if [ -d "$PERSISTENT_GRADLE_WRAPPER/wrapper" ] && [ -n "$(ls -A "$PERSISTENT_GRADLE_WRAPPER/wrapper" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache gradle-wrapper"
            echo "GRADLE_WRAPPER_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache gradle-wrapper"
            echo "GRADLE_WRAPPER_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra cache gradle-caches
          if [ -d "$PERSISTENT_GRADLE_CACHES/caches" ] && [ -n "$(ls -A "$PERSISTENT_GRADLE_CACHES/caches" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache gradle-caches"
            echo "GRADLE_CACHES_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache gradle-caches"
            echo "GRADLE_CACHES_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra cache M2
          if [ -d "$PERSISTENT_M2/repository" ] && [ -n "$(ls -A "$PERSISTENT_M2/repository" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache M2"
            echo "M2_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache M2"
            echo "M2_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC THIẾT LẬP CACHE ====="
      
      # Khôi phục node_modules từ cache sử dụng symlink
      - name: Restore Node Modules with Symlinks
        if: env.NODE_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC NODE MODULES BẰNG SYMLINK ====="
          
          # Kiểm tra xem node_modules đã tồn tại chưa
          if [ -d "node_modules" ]; then
            echo "Xóa thư mục node_modules hiện tại"
            rm -rf node_modules
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $NODE_MODULES_HASH_DIR/node_modules"
          ln -s "$NODE_MODULES_HASH_DIR/node_modules" node_modules
          
          # Kiểm tra xem node_modules có được khôi phục không
          if [ -L "node_modules" ] && [ -d "node_modules" ]; then
            echo "✅ Đã khôi phục node_modules thành công bằng symlink"
            ls -la node_modules | head -n 5
            echo "... và các module khác"
            echo "NODE_MODULES_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục node_modules bằng symlink"
            echo "NODE_MODULES_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC NODE MODULES ====="
          
      # Khôi phục gradle từ cache sử dụng symlink
      - name: Restore Gradle with Symlinks
        if: env.GRADLE_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC GRADLE BẰNG SYMLINK ====="
          
          # Kiểm tra xem thư mục .gradle đã tồn tại trong $HOME chưa
          if [ -d "$HOME/.gradle" ]; then
            echo "Sao lưu thư mục .gradle hiện tại"
            mv $HOME/.gradle $HOME/.gradle.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $GRADLE_HASH_DIR/.gradle đến $HOME/.gradle"
          ln -s "$GRADLE_HASH_DIR/.gradle" $HOME/.gradle
          
          # Kiểm tra xem .gradle có được khôi phục không
          if [ -L "$HOME/.gradle" ] && [ -d "$HOME/.gradle" ]; then
            echo "✅ Đã khôi phục .gradle thành công bằng symlink"
            ls -la $HOME/.gradle | head -n 5
            echo "GRADLE_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục .gradle bằng symlink"
            echo "GRADLE_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC GRADLE ====="
      
      # Khôi phục gradle wrapper từ cache
      - name: Restore Gradle Wrapper with Symlinks
        if: env.GRADLE_WRAPPER_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC GRADLE WRAPPER BẰNG SYMLINK ====="
          
          # Tạo thư mục .gradle nếu chưa tồn tại
          mkdir -p $HOME/.gradle
          
          # Kiểm tra xem thư mục wrapper đã tồn tại chưa
          if [ -d "$HOME/.gradle/wrapper" ]; then
            echo "Sao lưu thư mục wrapper hiện tại"
            mv $HOME/.gradle/wrapper $HOME/.gradle/wrapper.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $PERSISTENT_GRADLE_WRAPPER/wrapper đến $HOME/.gradle/wrapper"
          ln -s "$PERSISTENT_GRADLE_WRAPPER/wrapper" $HOME/.gradle/wrapper
          
          # Kiểm tra xem wrapper có được khôi phục không
          if [ -L "$HOME/.gradle/wrapper" ] && [ -d "$HOME/.gradle/wrapper" ]; then
            echo "✅ Đã khôi phục gradle wrapper thành công bằng symlink"
            ls -la $HOME/.gradle/wrapper | head -n 5
            echo "GRADLE_WRAPPER_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục gradle wrapper bằng symlink"
            echo "GRADLE_WRAPPER_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC GRADLE WRAPPER ====="
      
      # Khôi phục gradle caches từ cache
      - name: Restore Gradle Caches with Symlinks
        if: env.GRADLE_CACHES_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC GRADLE CACHES BẰNG SYMLINK ====="
          
          # Tạo thư mục .gradle nếu chưa tồn tại
          mkdir -p $HOME/.gradle
          
          # Kiểm tra xem thư mục caches đã tồn tại chưa
          if [ -d "$HOME/.gradle/caches" ]; then
            echo "Sao lưu thư mục caches hiện tại"
            mv $HOME/.gradle/caches $HOME/.gradle/caches.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $PERSISTENT_GRADLE_CACHES/caches đến $HOME/.gradle/caches"
          ln -s "$PERSISTENT_GRADLE_CACHES/caches" $HOME/.gradle/caches
          
          # Kiểm tra xem caches có được khôi phục không
          if [ -L "$HOME/.gradle/caches" ] && [ -d "$HOME/.gradle/caches" ]; then
            echo "✅ Đã khôi phục gradle caches thành công bằng symlink"
            ls -la $HOME/.gradle/caches | head -n 5
            echo "GRADLE_CACHES_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục gradle caches bằng symlink"
            echo "GRADLE_CACHES_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC GRADLE CACHES ====="
      
      # Khôi phục M2 repository từ cache
      - name: Restore M2 Repository with Symlinks
        if: env.M2_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC M2 REPOSITORY BẰNG SYMLINK ====="
          
          # Tạo thư mục .m2 nếu chưa tồn tại
          mkdir -p $HOME/.m2
          
          # Kiểm tra xem thư mục repository đã tồn tại chưa
          if [ -d "$HOME/.m2/repository" ]; then
            echo "Sao lưu thư mục repository hiện tại"
            mv $HOME/.m2/repository $HOME/.m2/repository.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $PERSISTENT_M2/repository đến $HOME/.m2/repository"
          ln -s "$PERSISTENT_M2/repository" $HOME/.m2/repository
          
          # Kiểm tra xem repository có được khôi phục không
          if [ -L "$HOME/.m2/repository" ] && [ -d "$HOME/.m2/repository" ]; then
            echo "✅ Đã khôi phục m2 repository thành công bằng symlink"
            ls -la $HOME/.m2/repository | head -n 5
            echo "M2_REPOSITORY_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục m2 repository bằng symlink"
            echo "M2_REPOSITORY_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC M2 REPOSITORY ====="
      
      # Cài đặt trước các dependencies để tăng tốc
      - name: Fast Install
        run: |
          if [ "${USE_NPM:-false}" == "true" ]; then
            # Sử dụng npm thay thế
            npm config set fetch-timeout 300000
            npm config set fund false
            echo "Sử dụng npm thay thế yarn"
          else
            # Đặt Yarn discard hoặc tăng tốc độ
            yarn config set network-timeout 300000
            yarn config set --home enableTelemetry 0
          fi
          
          # Thêm bộ đệm mạng
          echo "Cache network calls"
      
      # Cài đặt dependencies chỉ khi không có trong cache hoặc khôi phục thất bại
      - name: Install dependencies
        if: env.NODE_MODULES_RESTORED != 'true'
        run: |
          echo "===== CÀI ĐẶT DEPENDENCIES ====="
          
          if [ "${USE_NPM:-false}" == "true" ]; then
            echo "Sử dụng npm để cài đặt dependencies..."
            npm ci || npm install
          else
            echo "Sử dụng yarn để cài đặt dependencies..."
            yarn install --frozen-lockfile --prefer-offline
          fi
          
          # Sao chép node_modules vào thư mục cache thay vì nén
          echo "Sao chép node_modules vào cache: $NODE_MODULES_HASH_DIR/node_modules"
          mkdir -p "$NODE_MODULES_HASH_DIR"
          rm -rf "$NODE_MODULES_HASH_DIR/node_modules"
          cp -r node_modules "$NODE_MODULES_HASH_DIR/"
          
          echo "===== KẾT THÚC CÀI ĐẶT DEPENDENCIES ====="

      # Lưu trữ cache sau khi build
      - name: Save Caches After Build
        if: always()
        run: |
          echo "===== LƯU CACHE SAU KHI BUILD ====="
          
          # Kiểm tra và thiết lập GRADLE_HASH_DIR nếu chưa tồn tại
          if [ -z "${GRADLE_HASH_DIR}" ]; then
            echo "⚠️ GRADLE_HASH_DIR chưa được thiết lập, đang thiết lập..."
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_GRADLE="$PERSISTENT_CACHE/gradle"
            
            # Tạo thư mục persistent nếu chưa tồn tại
            mkdir -p "$PERSISTENT_GRADLE"
            
            # Nếu chưa có GRADLE_HASH, tạo một hash mới dựa trên timestamp
            if [ -z "${GRADLE_HASH}" ]; then
              GRADLE_HASH=$(date +"%Y%m%d%H%M%S")
              echo "Tạo GRADLE_HASH mới từ timestamp: $GRADLE_HASH"
            fi
            
            # Thiết lập GRADLE_HASH_DIR
            GRADLE_HASH_DIR="$PERSISTENT_GRADLE/$GRADLE_HASH"
            echo "Đã thiết lập GRADLE_HASH_DIR=$GRADLE_HASH_DIR"
          fi
          
          # Kiểm tra và thiết lập các biến thư mục persistent khác nếu cần
          if [ -z "${PERSISTENT_GRADLE_WRAPPER}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_GRADLE_WRAPPER="$PERSISTENT_CACHE/gradle-wrapper"
            mkdir -p "$PERSISTENT_GRADLE_WRAPPER"
            echo "Đã thiết lập PERSISTENT_GRADLE_WRAPPER=$PERSISTENT_GRADLE_WRAPPER"
          fi
          
          if [ -z "${PERSISTENT_GRADLE_CACHES}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_GRADLE_CACHES="$PERSISTENT_CACHE/gradle-caches"
            mkdir -p "$PERSISTENT_GRADLE_CACHES"
            echo "Đã thiết lập PERSISTENT_GRADLE_CACHES=$PERSISTENT_GRADLE_CACHES"
          fi
          
          if [ -z "${PERSISTENT_M2}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_M2="$PERSISTENT_CACHE/m2"
            mkdir -p "$PERSISTENT_M2"
            echo "Đã thiết lập PERSISTENT_M2=$PERSISTENT_M2"
          fi
          
          if [ -z "${PERSISTENT_NODE_MODULES}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_NODE_MODULES="$PERSISTENT_CACHE/node_modules"
            mkdir -p "$PERSISTENT_NODE_MODULES"
            echo "Đã thiết lập PERSISTENT_NODE_MODULES=$PERSISTENT_NODE_MODULES"
          fi
          
          # Lưu cache gradle nếu có thay đổi
          if [ -d "$HOME/.gradle" ] && [ ! -L "$HOME/.gradle" ]; then
            echo "Lưu cache Gradle..."
            mkdir -p "$GRADLE_HASH_DIR"
            rm -rf "$GRADLE_HASH_DIR/.gradle"
            cp -r "$HOME/.gradle" "$GRADLE_HASH_DIR/"
            echo "✅ Đã lưu cache Gradle"
          elif [ -L "$HOME/.gradle" ]; then
            echo "Gradle đã được lưu cache qua symlink"
          fi
          
          # Lưu cache gradle wrapper
          if [ -d "$HOME/.gradle/wrapper" ] && [ ! -L "$HOME/.gradle/wrapper" ]; then
            echo "Lưu cache Gradle Wrapper..."
            mkdir -p "$PERSISTENT_GRADLE_WRAPPER"
            rm -rf "$PERSISTENT_GRADLE_WRAPPER/wrapper"
            cp -r "$HOME/.gradle/wrapper" "$PERSISTENT_GRADLE_WRAPPER/"
            echo "✅ Đã lưu cache Gradle Wrapper"
          elif [ -L "$HOME/.gradle/wrapper" ]; then
            echo "Gradle Wrapper đã được lưu cache qua symlink"
          fi
          
          # Lưu cache gradle caches
          if [ -d "$HOME/.gradle/caches" ] && [ ! -L "$HOME/.gradle/caches" ]; then
            echo "Lưu cache Gradle Caches..."
            mkdir -p "$PERSISTENT_GRADLE_CACHES"
            rm -rf "$PERSISTENT_GRADLE_CACHES/caches"
            cp -r "$HOME/.gradle/caches" "$PERSISTENT_GRADLE_CACHES/"
            echo "✅ Đã lưu cache Gradle Caches"
          elif [ -L "$HOME/.gradle/caches" ]; then
            echo "Gradle Caches đã được lưu cache qua symlink"
          fi
          
          # Lưu cache M2 repository
          if [ -d "$HOME/.m2/repository" ] && [ ! -L "$HOME/.m2/repository" ]; then
            echo "Lưu cache M2 Repository..."
            mkdir -p "$PERSISTENT_M2"
            rm -rf "$PERSISTENT_M2/repository"
            cp -r "$HOME/.m2/repository" "$PERSISTENT_M2/"
            echo "✅ Đã lưu cache M2 Repository"
          elif [ -L "$HOME/.m2/repository" ]; then
            echo "M2 Repository đã được lưu cache qua symlink"
          fi
          
          # Dọn dẹp thư mục cũ
          echo "Dọn dẹp các bản sao lưu..."
          rm -rf "$HOME/.gradle.bak" "$HOME/.gradle/wrapper.bak" "$HOME/.gradle/caches.bak" "$HOME/.m2/repository.bak"
          
          # Kiểm tra trước khi dọn dẹp cache cũ
          if [ -d "$PERSISTENT_NODE_MODULES" ]; then
            echo "Dọn dẹp các cache node_modules cũ (giữ 5 cache mới nhất)..."
            find "$PERSISTENT_NODE_MODULES" -maxdepth 1 -mindepth 1 -type d | sort -r | tail -n +6 | xargs -r rm -rf
          else
            echo "⚠️ Thư mục PERSISTENT_NODE_MODULES không tồn tại, bỏ qua bước dọn dẹp"
          fi
          
          if [ -d "$PERSISTENT_GRADLE" ]; then
            echo "Dọn dẹp các cache gradle cũ (giữ 5 cache mới nhất)..."
            find "$PERSISTENT_GRADLE" -maxdepth 1 -mindepth 1 -type d | sort -r | tail -n +6 | xargs -r rm -rf
          else
            echo "⚠️ Thư mục PERSISTENT_GRADLE không tồn tại, bỏ qua bước dọn dẹp"
          fi
          
          echo "===== KẾT THÚC LƯU CACHE ====="
      
      - name: Set Version
        id: set-version
        run: echo "version=latest" >> $GITHUB_OUTPUT

  build-android:
    needs: setup
    runs-on: self-hosted
    outputs:
      direct_upload: ${{ steps.check-artifact.outputs.direct_upload }}
      apk_path: ${{ steps.set-apk-path.outputs.apk_path }}
      build_time: ${{ steps.set-apk-path.outputs.build_time }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      # Kiểm tra và cài đặt Yarn nếu chưa có
      - name: Setup Yarn
        run: |
          echo "===== KIỂM TRA YARN ====="
          if command -v yarn &> /dev/null; then
            YARN_VERSION=$(yarn --version)
            echo "✅ Yarn đã được cài đặt: $YARN_VERSION"
          else
            echo "⚠️ Yarn chưa được cài đặt, đang cài đặt..."
            npm install -g yarn
            
            # Xác minh cài đặt
            if command -v yarn &> /dev/null; then
              YARN_VERSION=$(yarn --version)
              echo "✅ Đã cài đặt Yarn thành công: $YARN_VERSION"
            else
              echo "❌ Không thể cài đặt yarn. Sử dụng npm thay thế."
              echo "USE_NPM=true" >> $GITHUB_ENV
            fi
          fi
          echo "===== KẾT THÚC KIỂM TRA YARN ====="
          
      # Thiết lập thư mục cache và kiểm tra cache với symlink
      - name: Setup VPS Cache with Symlinks
        run: |
          echo "===== THIẾT LẬP CACHE TRÊN VPS VỚI SYMLINK ====="
          
          # Tạo thư mục persistent storage cho cache
          PERSISTENT_CACHE="$HOME/persistent-cache"
          PERSISTENT_NODE_MODULES="$PERSISTENT_CACHE/node_modules"
          PERSISTENT_GRADLE="$PERSISTENT_CACHE/gradle"
          PERSISTENT_GRADLE_WRAPPER="$PERSISTENT_CACHE/gradle-wrapper"
          PERSISTENT_GRADLE_CACHES="$PERSISTENT_CACHE/gradle-caches"
          PERSISTENT_M2="$PERSISTENT_CACHE/m2"
          PERSISTENT_EAS="$PERSISTENT_CACHE/eas"
          
          # Tạo thư mục persistent nếu chưa tồn tại
          mkdir -p "$PERSISTENT_NODE_MODULES"
          mkdir -p "$PERSISTENT_GRADLE"
          mkdir -p "$PERSISTENT_GRADLE_WRAPPER"
          mkdir -p "$PERSISTENT_GRADLE_CACHES"
          mkdir -p "$PERSISTENT_M2"
          mkdir -p "$PERSISTENT_EAS"
          
          # Tính toán hash cho package.json và yarn.lock hoặc package-lock.json
          if [ -f "yarn.lock" ]; then
            PKG_HASH=$(md5sum yarn.lock package.json | sort | md5sum | cut -d ' ' -f 1)
            echo "Sử dụng yarn.lock và package.json để tạo hash: $PKG_HASH"
          else
            if [ -f "package-lock.json" ]; then
              PKG_HASH=$(md5sum package-lock.json package.json | sort | md5sum | cut -d ' ' -f 1)
              echo "Sử dụng package-lock.json và package.json để tạo hash: $PKG_HASH"
            else
              PKG_HASH=$(md5sum package.json | cut -d ' ' -f 1)
              echo "Chỉ sử dụng package.json để tạo hash: $PKG_HASH"
            fi
          fi
          
          # Lưu hash để sử dụng sau này
          echo "PKG_HASH=$PKG_HASH" >> $GITHUB_ENV
          
          # Tạo thư mục cho hash hiện tại nếu chưa tồn tại
          NODE_MODULES_HASH_DIR="$PERSISTENT_NODE_MODULES/$PKG_HASH"
          if [ ! -d "$NODE_MODULES_HASH_DIR" ]; then
            mkdir -p "$NODE_MODULES_HASH_DIR"
          fi
          
          # Kiểm tra xem có cache node_modules cho hash này không
          echo "NODE_MODULES_HASH_DIR=$NODE_MODULES_HASH_DIR" >> $GITHUB_ENV
          if [ -d "$NODE_MODULES_HASH_DIR/node_modules" ] && [ -n "$(ls -A "$NODE_MODULES_HASH_DIR/node_modules" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache node_modules cho hash: $PKG_HASH"
            echo "NODE_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache node_modules cho hash: $PKG_HASH"
            echo "NODE_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra xem có cache gradle hay không
          # Tính toán hash cho các file Gradle
          if [ -d "android" ]; then
            if [ -f "android/build.gradle" ] && [ -f "android/gradle.properties" ]; then
              GRADLE_HASH=$(find android -name "*.gradle" -o -name "gradle.properties" | sort | xargs md5sum | md5sum | cut -d ' ' -f 1)
              echo "Gradle hash: $GRADLE_HASH"
              
              # Tạo thư mục cho gradle hash
              GRADLE_HASH_DIR="$PERSISTENT_GRADLE/$GRADLE_HASH"
              if [ ! -d "$GRADLE_HASH_DIR" ]; then
                mkdir -p "$GRADLE_HASH_DIR"
              fi
              echo "GRADLE_HASH_DIR=$GRADLE_HASH_DIR" >> $GITHUB_ENV
              echo "GRADLE_HASH=$GRADLE_HASH" >> $GITHUB_ENV
              
              if [ -d "$GRADLE_HASH_DIR/.gradle" ] && [ -n "$(ls -A "$GRADLE_HASH_DIR/.gradle" 2>/dev/null)" ]; then
                echo "✅ Đã tìm thấy cache gradle cho hash: $GRADLE_HASH"
                echo "GRADLE_CACHE_EXISTS=true" >> $GITHUB_ENV
              else
                echo "⚠️ Không tìm thấy cache gradle cho hash: $GRADLE_HASH"
                echo "GRADLE_CACHE_EXISTS=false" >> $GITHUB_ENV
              fi
            else
              echo "⚠️ Không tìm thấy các file gradle cần thiết"
              echo "GRADLE_CACHE_EXISTS=false" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ Thư mục android chưa tồn tại"
            echo "GRADLE_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra cache gradle-wrapper
          if [ -d "$PERSISTENT_GRADLE_WRAPPER/wrapper" ] && [ -n "$(ls -A "$PERSISTENT_GRADLE_WRAPPER/wrapper" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache gradle-wrapper"
            echo "GRADLE_WRAPPER_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache gradle-wrapper"
            echo "GRADLE_WRAPPER_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra cache gradle-caches
          if [ -d "$PERSISTENT_GRADLE_CACHES/caches" ] && [ -n "$(ls -A "$PERSISTENT_GRADLE_CACHES/caches" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache gradle-caches"
            echo "GRADLE_CACHES_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache gradle-caches"
            echo "GRADLE_CACHES_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          # Kiểm tra cache M2
          if [ -d "$PERSISTENT_M2/repository" ] && [ -n "$(ls -A "$PERSISTENT_M2/repository" 2>/dev/null)" ]; then
            echo "✅ Đã tìm thấy cache M2"
            echo "M2_CACHE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "⚠️ Không tìm thấy cache M2"
            echo "M2_CACHE_EXISTS=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC THIẾT LẬP CACHE ====="
      
      # Khôi phục node_modules từ cache sử dụng symlink
      - name: Restore Node Modules with Symlinks
        if: env.NODE_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC NODE MODULES BẰNG SYMLINK ====="
          
          # Kiểm tra xem node_modules đã tồn tại chưa
          if [ -d "node_modules" ]; then
            echo "Xóa thư mục node_modules hiện tại"
            rm -rf node_modules
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $NODE_MODULES_HASH_DIR/node_modules"
          ln -s "$NODE_MODULES_HASH_DIR/node_modules" node_modules
          
          # Kiểm tra xem node_modules có được khôi phục không
          if [ -L "node_modules" ] && [ -d "node_modules" ]; then
            echo "✅ Đã khôi phục node_modules thành công bằng symlink"
            ls -la node_modules | head -n 5
            echo "... và các module khác"
            echo "NODE_MODULES_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục node_modules bằng symlink"
            echo "NODE_MODULES_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC NODE MODULES ====="
          
      # Khôi phục gradle từ cache sử dụng symlink
      - name: Restore Gradle with Symlinks
        if: env.GRADLE_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC GRADLE BẰNG SYMLINK ====="
          
          # Kiểm tra xem thư mục .gradle đã tồn tại trong $HOME chưa
          if [ -d "$HOME/.gradle" ]; then
            echo "Sao lưu thư mục .gradle hiện tại"
            mv $HOME/.gradle $HOME/.gradle.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $GRADLE_HASH_DIR/.gradle đến $HOME/.gradle"
          ln -s "$GRADLE_HASH_DIR/.gradle" $HOME/.gradle
          
          # Kiểm tra xem .gradle có được khôi phục không
          if [ -L "$HOME/.gradle" ] && [ -d "$HOME/.gradle" ]; then
            echo "✅ Đã khôi phục .gradle thành công bằng symlink"
            ls -la $HOME/.gradle | head -n 5
            echo "GRADLE_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục .gradle bằng symlink"
            echo "GRADLE_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC GRADLE ====="
      
      # Khôi phục gradle wrapper từ cache
      - name: Restore Gradle Wrapper with Symlinks
        if: env.GRADLE_WRAPPER_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC GRADLE WRAPPER BẰNG SYMLINK ====="
          
          # Tạo thư mục .gradle nếu chưa tồn tại
          mkdir -p $HOME/.gradle
          
          # Kiểm tra xem thư mục wrapper đã tồn tại chưa
          if [ -d "$HOME/.gradle/wrapper" ]; then
            echo "Sao lưu thư mục wrapper hiện tại"
            mv $HOME/.gradle/wrapper $HOME/.gradle/wrapper.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $PERSISTENT_GRADLE_WRAPPER/wrapper đến $HOME/.gradle/wrapper"
          ln -s "$PERSISTENT_GRADLE_WRAPPER/wrapper" $HOME/.gradle/wrapper
          
          # Kiểm tra xem wrapper có được khôi phục không
          if [ -L "$HOME/.gradle/wrapper" ] && [ -d "$HOME/.gradle/wrapper" ]; then
            echo "✅ Đã khôi phục gradle wrapper thành công bằng symlink"
            ls -la $HOME/.gradle/wrapper | head -n 5
            echo "GRADLE_WRAPPER_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục gradle wrapper bằng symlink"
            echo "GRADLE_WRAPPER_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC GRADLE WRAPPER ====="
      
      # Khôi phục gradle caches từ cache
      - name: Restore Gradle Caches with Symlinks
        if: env.GRADLE_CACHES_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC GRADLE CACHES BẰNG SYMLINK ====="
          
          # Tạo thư mục .gradle nếu chưa tồn tại
          mkdir -p $HOME/.gradle
          
          # Kiểm tra xem thư mục caches đã tồn tại chưa
          if [ -d "$HOME/.gradle/caches" ]; then
            echo "Sao lưu thư mục caches hiện tại"
            mv $HOME/.gradle/caches $HOME/.gradle/caches.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $PERSISTENT_GRADLE_CACHES/caches đến $HOME/.gradle/caches"
          ln -s "$PERSISTENT_GRADLE_CACHES/caches" $HOME/.gradle/caches
          
          # Kiểm tra xem caches có được khôi phục không
          if [ -L "$HOME/.gradle/caches" ] && [ -d "$HOME/.gradle/caches" ]; then
            echo "✅ Đã khôi phục gradle caches thành công bằng symlink"
            ls -la $HOME/.gradle/caches | head -n 5
            echo "GRADLE_CACHES_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục gradle caches bằng symlink"
            echo "GRADLE_CACHES_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC GRADLE CACHES ====="
      
      # Khôi phục M2 repository từ cache
      - name: Restore M2 Repository with Symlinks
        if: env.M2_CACHE_EXISTS == 'true'
        run: |
          echo "===== KHÔI PHỤC M2 REPOSITORY BẰNG SYMLINK ====="
          
          # Tạo thư mục .m2 nếu chưa tồn tại
          mkdir -p $HOME/.m2
          
          # Kiểm tra xem thư mục repository đã tồn tại chưa
          if [ -d "$HOME/.m2/repository" ]; then
            echo "Sao lưu thư mục repository hiện tại"
            mv $HOME/.m2/repository $HOME/.m2/repository.bak
          fi
          
          # Tạo symlink từ persistent cache
          echo "Tạo symlink từ $PERSISTENT_M2/repository đến $HOME/.m2/repository"
          ln -s "$PERSISTENT_M2/repository" $HOME/.m2/repository
          
          # Kiểm tra xem repository có được khôi phục không
          if [ -L "$HOME/.m2/repository" ] && [ -d "$HOME/.m2/repository" ]; then
            echo "✅ Đã khôi phục m2 repository thành công bằng symlink"
            ls -la $HOME/.m2/repository | head -n 5
            echo "M2_REPOSITORY_RESTORED=true" >> $GITHUB_ENV
          else
            echo "❌ Không thể khôi phục m2 repository bằng symlink"
            echo "M2_REPOSITORY_RESTORED=false" >> $GITHUB_ENV
          fi
          
          echo "===== KẾT THÚC KHÔI PHỤC M2 REPOSITORY ====="
      
      # Cài đặt trước các dependencies để tăng tốc
      - name: Fast Install
        run: |
          if [ "${USE_NPM:-false}" == "true" ]; then
            # Sử dụng npm thay thế
            npm config set fetch-timeout 300000
            npm config set fund false
            echo "Sử dụng npm thay thế yarn"
          else
            # Đặt Yarn discard hoặc tăng tốc độ
            yarn config set network-timeout 300000
            yarn config set --home enableTelemetry 0
          fi
          
          # Thêm bộ đệm mạng
          echo "Cache network calls"
      
      # Cài đặt dependencies chỉ khi không có trong cache hoặc khôi phục thất bại
      - name: Install dependencies
        if: env.NODE_MODULES_RESTORED != 'true'
        run: |
          echo "===== CÀI ĐẶT DEPENDENCIES ====="
          
          if [ "${USE_NPM:-false}" == "true" ]; then
            echo "Sử dụng npm để cài đặt dependencies..."
            npm ci || npm install
          else
            echo "Sử dụng yarn để cài đặt dependencies..."
            yarn install --frozen-lockfile --prefer-offline
          fi
          
          # Sao chép node_modules vào thư mục cache thay vì nén
          echo "Sao chép node_modules vào cache: $NODE_MODULES_HASH_DIR/node_modules"
          mkdir -p "$NODE_MODULES_HASH_DIR"
          rm -rf "$NODE_MODULES_HASH_DIR/node_modules"
          cp -r node_modules "$NODE_MODULES_HASH_DIR/"
          
          echo "===== KẾT THÚC CÀI ĐẶT DEPENDENCIES ====="

      # Lưu trữ cache sau khi build
      - name: Save Caches After Build
        if: always()
        run: |
          echo "===== LƯU CACHE SAU KHI BUILD ====="
          
          # Kiểm tra và thiết lập GRADLE_HASH_DIR nếu chưa tồn tại
          if [ -z "${GRADLE_HASH_DIR}" ]; then
            echo "⚠️ GRADLE_HASH_DIR chưa được thiết lập, đang thiết lập..."
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_GRADLE="$PERSISTENT_CACHE/gradle"
            
            # Tạo thư mục persistent nếu chưa tồn tại
            mkdir -p "$PERSISTENT_GRADLE"
            
            # Nếu chưa có GRADLE_HASH, tạo một hash mới dựa trên timestamp
            if [ -z "${GRADLE_HASH}" ]; then
              GRADLE_HASH=$(date +"%Y%m%d%H%M%S")
              echo "Tạo GRADLE_HASH mới từ timestamp: $GRADLE_HASH"
            fi
            
            # Thiết lập GRADLE_HASH_DIR
            GRADLE_HASH_DIR="$PERSISTENT_GRADLE/$GRADLE_HASH"
            echo "Đã thiết lập GRADLE_HASH_DIR=$GRADLE_HASH_DIR"
          fi
          
          # Kiểm tra và thiết lập các biến thư mục persistent khác nếu cần
          if [ -z "${PERSISTENT_GRADLE_WRAPPER}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_GRADLE_WRAPPER="$PERSISTENT_CACHE/gradle-wrapper"
            mkdir -p "$PERSISTENT_GRADLE_WRAPPER"
            echo "Đã thiết lập PERSISTENT_GRADLE_WRAPPER=$PERSISTENT_GRADLE_WRAPPER"
          fi
          
          if [ -z "${PERSISTENT_GRADLE_CACHES}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_GRADLE_CACHES="$PERSISTENT_CACHE/gradle-caches"
            mkdir -p "$PERSISTENT_GRADLE_CACHES"
            echo "Đã thiết lập PERSISTENT_GRADLE_CACHES=$PERSISTENT_GRADLE_CACHES"
          fi
          
          if [ -z "${PERSISTENT_M2}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_M2="$PERSISTENT_CACHE/m2"
            mkdir -p "$PERSISTENT_M2"
            echo "Đã thiết lập PERSISTENT_M2=$PERSISTENT_M2"
          fi
          
          if [ -z "${PERSISTENT_NODE_MODULES}" ]; then
            PERSISTENT_CACHE="$HOME/persistent-cache"
            PERSISTENT_NODE_MODULES="$PERSISTENT_CACHE/node_modules"
            mkdir -p "$PERSISTENT_NODE_MODULES"
            echo "Đã thiết lập PERSISTENT_NODE_MODULES=$PERSISTENT_NODE_MODULES"
          fi
          
          # Lưu cache gradle nếu có thay đổi
          if [ -d "$HOME/.gradle" ] && [ ! -L "$HOME/.gradle" ]; then
            echo "Lưu cache Gradle..."
            mkdir -p "$GRADLE_HASH_DIR"
            rm -rf "$GRADLE_HASH_DIR/.gradle"
            cp -r "$HOME/.gradle" "$GRADLE_HASH_DIR/"
            echo "✅ Đã lưu cache Gradle"
          elif [ -L "$HOME/.gradle" ]; then
            echo "Gradle đã được lưu cache qua symlink"
          fi
          
          # Lưu cache gradle wrapper
          if [ -d "$HOME/.gradle/wrapper" ] && [ ! -L "$HOME/.gradle/wrapper" ]; then
            echo "Lưu cache Gradle Wrapper..."
            mkdir -p "$PERSISTENT_GRADLE_WRAPPER"
            rm -rf "$PERSISTENT_GRADLE_WRAPPER/wrapper"
            cp -r "$HOME/.gradle/wrapper" "$PERSISTENT_GRADLE_WRAPPER/"
            echo "✅ Đã lưu cache Gradle Wrapper"
          elif [ -L "$HOME/.gradle/wrapper" ]; then
            echo "Gradle Wrapper đã được lưu cache qua symlink"
          fi
          
          # Lưu cache gradle caches
          if [ -d "$HOME/.gradle/caches" ] && [ ! -L "$HOME/.gradle/caches" ]; then
            echo "Lưu cache Gradle Caches..."
            mkdir -p "$PERSISTENT_GRADLE_CACHES"
            rm -rf "$PERSISTENT_GRADLE_CACHES/caches"
            cp -r "$HOME/.gradle/caches" "$PERSISTENT_GRADLE_CACHES/"
            echo "✅ Đã lưu cache Gradle Caches"
          elif [ -L "$HOME/.gradle/caches" ]; then
            echo "Gradle Caches đã được lưu cache qua symlink"
          fi
          
          # Lưu cache M2 repository
          if [ -d "$HOME/.m2/repository" ] && [ ! -L "$HOME/.m2/repository" ]; then
            echo "Lưu cache M2 Repository..."
            mkdir -p "$PERSISTENT_M2"
            rm -rf "$PERSISTENT_M2/repository"
            cp -r "$HOME/.m2/repository" "$PERSISTENT_M2/"
            echo "✅ Đã lưu cache M2 Repository"
          elif [ -L "$HOME/.m2/repository" ]; then
            echo "M2 Repository đã được lưu cache qua symlink"
          fi
          
          # Dọn dẹp thư mục cũ
          echo "Dọn dẹp các bản sao lưu..."
          rm -rf "$HOME/.gradle.bak" "$HOME/.gradle/wrapper.bak" "$HOME/.gradle/caches.bak" "$HOME/.m2/repository.bak"
          
          # Kiểm tra trước khi dọn dẹp cache cũ
          if [ -d "$PERSISTENT_NODE_MODULES" ]; then
            echo "Dọn dẹp các cache node_modules cũ (giữ 5 cache mới nhất)..."
            find "$PERSISTENT_NODE_MODULES" -maxdepth 1 -mindepth 1 -type d | sort -r | tail -n +6 | xargs -r rm -rf
          else
            echo "⚠️ Thư mục PERSISTENT_NODE_MODULES không tồn tại, bỏ qua bước dọn dẹp"
          fi
          
          if [ -d "$PERSISTENT_GRADLE" ]; then
            echo "Dọn dẹp các cache gradle cũ (giữ 5 cache mới nhất)..."
            find "$PERSISTENT_GRADLE" -maxdepth 1 -mindepth 1 -type d | sort -r | tail -n +6 | xargs -r rm -rf
          else
            echo "⚠️ Thư mục PERSISTENT_GRADLE không tồn tại, bỏ qua bước dọn dẹp"
          fi
          
          echo "===== KẾT THÚC LƯU CACHE ====="
      
      - name: Set Version
        id: set-version
        run: echo "version=latest" >> $GITHUB_OUTPUT

  release:
    needs: [setup, build-android]
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      # Fallback nếu artifact không upload được (từ build-android job)
      - name: List Available Artifacts
        id: list-artifacts
        if: needs.build-android.outputs.direct_upload == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Liệt kê các artifact hiện có:');
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            for (const artifact of artifacts.data.artifacts) {
              console.log(`- ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes)`);
            }
            
            return artifacts.data.artifacts.length > 0;
      
      # Lấy APK trực tiếp từ VPS storage thay vì download từ GitHub
      - name: Get APK from VPS Storage
        id: get-apk-vps
        run: |
          echo "===== LẤY APK TỪ VPS STORAGE ====="
          # Thông tin APK từ job build-android
          APK_PATH="${{ needs.build-android.outputs.apk_path }}"
          BUILD_TIME="${{ needs.build-android.outputs.build_time }}"
          
          if [ -f "$APK_PATH" ]; then
            echo "✅ Tìm thấy APK tại $APK_PATH"
            # Tạo thư mục cho release (nếu cần)
            mkdir -p ./release-assets
            
            # Sao chép APK vào thư mục release
            cp "$APK_PATH" ./release-assets/app-release.apk
            echo "✅ Đã sao chép APK vào ./release-assets/app-release.apk"
          else
            echo "⚠️ Không tìm thấy APK tại đường dẫn $APK_PATH"
            # Tìm trong thư mục lưu trữ mặc định
            APK_STORAGE_DIR="$HOME/apk-storage"
            if [ -f "$APK_STORAGE_DIR/latest.apk" ]; then
              echo "✅ Tìm thấy APK tại $APK_STORAGE_DIR/latest.apk"
              mkdir -p ./release-assets
              cp "$APK_STORAGE_DIR/latest.apk" ./release-assets/app-release.apk
              echo "✅ Đã sao chép APK vào ./release-assets/app-release.apk"
            else
              echo "❌ Không tìm thấy APK ở bất kỳ vị trí nào"
            fi
          fi
      
      - name: Verify APK Access
        run: |
          echo "===== KIỂM TRA TRUY CẬP FILE APK ====="
          mkdir -p ./release-assets
          
          # Kiểm tra xem có truy cập được file APK từ VPS không
          if [ -f "./release-assets/app-release.apk" ]; then
            echo "✅ Tìm thấy APK tại ./release-assets/app-release.apk"
            ls -la ./release-assets/app-release.apk
            # Sao chép file về thư mục gốc cho các bước tiếp theo (nếu cần)
            cp ./release-assets/app-release.apk ./ksms-mb-latest.apk
            echo "✅ Đã sao chép sang ./ksms-mb-latest.apk"
          else
            echo "❌ Không thể truy cập APK tại ./release-assets/app-release.apk"
            
            # Tìm kiếm trực tiếp mọi file APK trên VPS
            echo "Tìm kiếm tất cả file APK trên VPS:"
            find $HOME/apk-storage -name "*.apk" -type f | head -n 5
            
            # Hiển thị nội dung thư mục lưu trữ
            echo "Nội dung thư mục lưu trữ APK:"
            ls -la $HOME/apk-storage/
            ls -la $HOME/apk-storage/archives/ 2>/dev/null || echo "Thư mục archives không tồn tại"
          fi
          
          # Hiển thị tất cả các file trong thư mục hiện tại
          echo "===== TẤT CẢ CÁC FILE TRONG THƯ MỤC HIỆN TẠI ====="
          ls -la ./
      
      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Tìm kiếm release với tag "latest"
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'latest'
              });
              
              if (release && release.data) {
                // Xóa release cũ
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id
                });
                
                console.log('Đã xóa release cũ');
              }
            } catch (error) {
              // Không tìm thấy release, không có vấn đề gì
              console.log('Không tìm thấy release cũ hoặc có lỗi:', error.message);
            }
            
            // Kiểm tra xem tag đã tồn tại chưa
            try {
              const tag = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/latest'
              });
              
              if (tag) {
                // Xóa tag cũ
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'tags/latest'
                });
                console.log('Đã xóa tag cũ');
              }
            } catch (error) {
              console.log('Không tìm thấy tag cũ hoặc có lỗi:', error.message);
            }
        
      - name: Create Release with VPS Link
        run: |
          # Lấy thông tin từ bước build
          APK_PATH="${{ needs.build-android.outputs.apk_path }}"
          BUILD_TIME="${{ needs.build-android.outputs.build_time }}"
          BUILD_NUMBER="${{ github.run_number }}"
          COMMIT_SHA="${{ github.sha }}"
          
          # Lấy tên file APK từ đường dẫn
          APK_FILENAME=$(basename "$APK_PATH")
          
          # URL cho file APK
          APK_URL="http://${{ secrets.VPS_HOST }}${{ secrets.VPS_PUBLIC_PATH }}/archives/$APK_FILENAME"
          LATEST_URL="http://${{ secrets.VPS_HOST }}${{ secrets.VPS_PUBLIC_PATH }}/latest.apk"
          
          # Configure QR Code 
          QR_CONFIG="size=300&margin=1&dark=000000&light=FFFFFF"
          QR_CODE_URL="https://quickchart.io/qr?text=$(urlencode "$LATEST_URL")&$QR_CONFIG"
          
          # Xóa tag cũ nếu tồn tại
          git tag -d latest || true
          git push --delete origin latest || true
          
          # Tạo tag mới
          git tag latest
          git push origin latest
          
          # Tạo release notes
          cat > release_notes.md << EOL
          ### KSMS Mobile App - Build ${BUILD_NUMBER}

          **Build Information**
          - Build Date: $(date +'%Y-%m-%d')
          - Build Time: ${BUILD_TIME}
          - Build Number: ${BUILD_NUMBER}
          - Commit: ${COMMIT_SHA:0:7}

          ### Installation

          1. **Scan QR Code**
          ![QRCode](${QR_CODE_URL})

          2. **Download Links**
          - [Download Latest Version](${LATEST_URL})
          - [Download This Specific Version](${APK_URL})

          ### Notes
          - Chỉ 2 phiên bản gần nhất được lưu trên server
          - Phiên bản này có sẵn tại: \`${APK_FILENAME}\`
          - VPS link luôn trỏ đến phiên bản mới nhất
          EOL
          
          # Sử dụng GitHub CLI để tạo release
          gh release create latest \
            --title "Latest Build (${BUILD_NUMBER})" \
            --notes-file release_notes.md \
            --target ${{ github.ref }} \
            --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Utility function cho URL encoding
      - name: Set up URL encode function
        run: |
          # Tạo function để URL encode một string
          urlencode() {
            local string="$1"
            local strlen=${#string}
            local encoded=""
            local pos c o
            
            for (( pos=0 ; pos<strlen ; pos++ )); do
              c=${string:$pos:1}
              case "$c" in
                [-_.~a-zA-Z0-9] ) o="${c}" ;;
                * )               printf -v o '%%%02x' "'$c"
              esac
              encoded+="${o}"
            done
            echo "${encoded}"
          }
          export -f urlencode
