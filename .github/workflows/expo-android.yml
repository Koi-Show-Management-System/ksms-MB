name: Optimized Local Build and Release (Latest Actions, Input Method)

permissions:
  contents: write
  issues: write
  pull-requests: write
  discussions: write
  packages: write
  actions: write
  repository-projects: write

on:
  push:
    branches: [main, development]
    paths:
      - 'app/**'
      - 'assets/**'
      - 'package.json'
      - 'yarn.lock'
      - 'app.json'
      - 'eas.json'
      - 'babel.config.js'
      - 'metro.config.js'
      - '.github/workflows/expo-android.yml'

jobs:
  cleanup-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup Artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '1 day'
          skip-tags: true
          skip-recent: 5

  setup:
    needs: cleanup-artifacts
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'
          
      # Cài đặt trước các dependencies để tăng tốc
      - name: Fast Install
        run: |
          # Đặt Yarn discard hoặc tăng tốc độ
          yarn config set network-timeout 300000
          yarn config set --home enableTelemetry 0
          
          # Thêm bộ đệm mạng
          echo "Cache network calls"
      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.yarn/cache
            .expo
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-modules-
      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
      - name: Set Version
        id: set-version
        run: echo "version=latest" >> $GITHUB_OUTPUT

  build-android:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      direct_upload: ${{ steps.check-artifact.outputs.direct_upload }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install
      - name: Install EAS CLI
        run: yarn global add eas-cli
      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            .android/cache
            ~/.m2/repository
            android/app/build
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/gradlew', '**/gradle/wrapper/gradle-wrapper.properties', '**/build.gradle', '**/settings.gradle') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Setup Android Environment
        run: |
          # Tạo thư mục android nếu chưa tồn tại
          mkdir -p android
          
          # Tạo file gradle.properties với các cấu hình cần thiết
          cat > android/gradle.properties << EOF
          # Project-wide Gradle settings.
          
          # Android SDK
          android.useAndroidX=true
          android.enableJetifier=true
          
          # Version of flipper SDK to use with React Native
          FLIPPER_VERSION=0.182.0
          
          # Use this property to specify which architecture you want to build.
          # You can also override it from the CLI using
          # ./gradlew <task> -PreactNativeArchitectures=x86_64
          reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
          
          # Use this property to enable support to the new architecture.
          # This will allow you to use TurboModules and the Fabric render in
          # your application. You should enable this flag either if you want
          # to write custom TurboModules/Fabric components OR use libraries that
          # are providing them.
          newArchEnabled=false
          
          # Use this property to enable or disable the Hermes JS engine.
          # If set to false, you will be using JSC instead.
          hermesEnabled=true
          
          # Keystore settings
          MYAPP_UPLOAD_STORE_FILE=release.keystore
          MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
          
          # Tối ưu hóa build performance
          org.gradle.daemon=true
          org.gradle.configureondemand=true
          org.gradle.parallel=true
          org.gradle.caching=true
          org.gradle.jvmargs=-Xmx4g -XX:MaxPermSize=2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC
          
          # Tối ưu Android build
          android.enableR8.fullMode=true
          android.enableDexingArtifactTransform.desugaring=false
          android.useAndroidX=true
          android.nonTransitiveRClass=true
          EOF
          
          echo "Created gradle.properties"
          ls -la android/gradle.properties
      - name: Setup Keystore
        run: |
          # Tạo thư mục android/app nếu chưa tồn tại
          mkdir -p android/app
          
          # Lưu base64 vào tệp trước khi giải mã
          echo '${{ secrets.ANDROID_KEYSTORE_BASE64 }}' > keystore-base64.txt
          
          # Làm sạch tệp base64 (xóa khoảng trắng, xuống dòng không mong muốn)
          tr -d '\n\r\t ' < keystore-base64.txt > keystore-base64-clean.txt
          
          # Giải mã base64 thành binary
          base64 --decode keystore-base64-clean.txt > android/app/release.keystore || {
            echo "Failed to decode base64 keystore"
            exit 1
          }
          
          # Kiểm tra kích thước file keystore để xác nhận thành công
          FILESIZE=$(stat -c%s "android/app/release.keystore")
          echo "Keystore size: $FILESIZE bytes"
          
          if [ "$FILESIZE" -eq 0 ]; then
            echo "Error: Generated keystore is empty!"
            exit 1
          fi
          
          # Đường dẫn tuyệt đối đến keystore
          ABSOLUTE_KEYSTORE_PATH=$(realpath android/app/release.keystore)
          echo "KEYSTORE_PATH=$ABSOLUTE_KEYSTORE_PATH" >> $GITHUB_ENV
      - name: Verify Keystore
        run: |
          # Kiểm tra keystore tồn tại và có kích thước hợp lệ
          if [ ! -f "android/app/release.keystore" ]; then
            echo "Error: Keystore file not found!"
            exit 1
          fi
          
          # Kiểm tra kích thước của keystore (phải > 0 bytes)
          FILESIZE=$(stat -c%s "android/app/release.keystore")
          if [ "$FILESIZE" -eq 0 ]; then
            echo "Error: Keystore file is empty!"
            exit 1
          fi
          
          echo "Keystore verification successful!"
          echo "Keystore size: $FILESIZE bytes"
      - name: Create eas.json
        run: |
          cat > eas.json << EOF
          {
            "cli": {
              "version": ">= 3.13.3",
              "appVersionSource": "remote",
              "promptToConfigurePushNotifications": false
            },
            "build": {
              "development": {
                "developmentClient": true,
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleDebug",
                  "cache": {
                    "key": "gradle-${{ github.sha }}"
                  }
                }
              },
              "preview": {
                "distribution": "internal",
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease",
                  "cache": {
                    "key": "gradle-${{ github.sha }}"
                  }
                }
              }, 
              "production": {
                "autoIncrement": true,
                "android": {
                  "buildType": "apk",
                  "gradleCommand": ":app:assembleRelease",
                  "credentialsSource": "local",
                  "cache": {
                    "key": "gradle-${{ github.sha }}"
                  },
                  "image": "latest"
                },
                "cache": {
                  "disabled": false,
                  "key": "yarn-${{ github.sha }}"
                }
              }
            },
            "submit": {
              "production": {}
            }
          }
          EOF
      - name: Create credentials.json
        run: |
          # Tạo thư mục .expo và lưu credentials
          mkdir -p .expo
          
          # Format đúng cho credentials.json theo EAS build
          cat > .expo/credentials.json << EOF
          {
            "android": {
              "keystore": {
                "keystorePath": "${{ env.KEYSTORE_PATH }}",
                "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
                "keyAlias": "${{ secrets.ANDROID_KEYSTORE_ALIAS }}",
                "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
              }
            }
          }
          EOF
          
          # Tạo phiên bản credentials.json trong thư mục gốc (để đảm bảo)
          cp .expo/credentials.json ./credentials.json
          
          # Kiểm tra file đã được tạo
          ls -la .expo/credentials.json
          ls -la credentials.json
      - name: Debug environment
        run: |
          echo "==== Environment Variables ===="
          echo "KEYSTORE_PATH: $KEYSTORE_PATH"
          
          # Chỉ kiểm tra các biến quan trọng
          [ -n "$ANDROID_KEYSTORE_ALIAS" ] && echo "ANDROID_KEYSTORE_ALIAS: Set ✓" || echo "ANDROID_KEYSTORE_ALIAS: Not set ✗"
          [ -n "$ANDROID_KEYSTORE_PASSWORD" ] && echo "ANDROID_KEYSTORE_PASSWORD: Set ✓" || echo "ANDROID_KEYSTORE_PASSWORD: Not set ✗"
          [ -n "$ANDROID_KEY_PASSWORD" ] && echo "ANDROID_KEY_PASSWORD: Set ✓" || echo "ANDROID_KEY_PASSWORD: Not set ✗"
          
          echo "==== Critical Files ===="
          if [ -f "android/app/release.keystore" ]; then
            echo "✓ Keystore exists"
          else
            echo "✗ Keystore missing"
            exit 1
          fi
          
          if [ -f ".expo/credentials.json" ]; then
            echo "✓ Credentials exist"
          else
            echo "✗ Credentials missing"
            exit 1
          fi
      - name: Build Android app (Local Build)
        run: |
          rm -rf app-build
          mkdir -p app-build
          
          # Xem các biến môi trường EAS
          echo "Checking EAS environment..."
          eas diagnostics
          
          # Kiểm tra cấu hình build
          echo "Checking build configuration..."
          cat eas.json
          
          # Kiểm tra credentials
          echo "Checking credentials..."
          if [ -f ".expo/credentials.json" ]; then
            echo "Found .expo/credentials.json"
            cat .expo/credentials.json | sed 's/"keyPassword": "[^"]*"/"keyPassword": "***"/g' | sed 's/"keystorePassword": "[^"]*"/"keystorePassword": "***"/g'
          else
            echo "No .expo/credentials.json found"
          fi
          
          # Kiểm tra keystore
          echo "Checking keystore..."
          ls -la android/app/release.keystore
          
          # Thực hiện build tối ưu
          echo "Starting build process..."
          GRADLE_OPTS="-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=8" \
          eas build --local \
          --non-interactive \
          --output=./app-build/app-release.apk \
          --platform=android \
          --profile=production
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PATH: ${{ env.KEYSTORE_PATH }}
          ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          ANDROID_KEYSTORE: ${{ env.KEYSTORE_PATH }}
      - name: Upload Build Artifact
        id: upload-artifact
        continue-on-error: true  # Không làm hỏng workflow nếu việc upload thất bại
        uses: actions/upload-artifact@v4
        with:
          name: app-build-latest
          path: app-build/app-release.apk
          retention-days: 1  # Giảm xuống chỉ còn 1 ngày
          if-no-files-found: warn
          compression-level: 9  # Nén tối đa
          overwrite: true
          
      # Luôn lưu APK như một artifact phụ cho trường hợp khẩn cấp
      - name: Upload Emergency Artifact (without compression)
        id: upload-emergency-artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: apk-emergency-latest
          path: app-build/app-release.apk
          retention-days: 1
          if-no-files-found: warn
          compression-level: 0  # Không nén để dễ download hơn
          overwrite: true
          
      - name: Check Artifact Upload Status
        id: check-artifact
        if: steps.upload-artifact.outcome == 'failure'
        run: |
          echo "::warning::Không thể upload artifact do đạt giới hạn lưu trữ hoặc lỗi khác. Sẽ sử dụng phương pháp upload trực tiếp."
          echo "direct_upload=true" >> $GITHUB_OUTPUT

  release:
    needs: [setup, build-android]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Fallback nếu artifact không upload được (từ build-android job)
      - name: List Available Artifacts
        id: list-artifacts
        if: needs.build-android.outputs.direct_upload == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log('Liệt kê các artifact hiện có:');
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });
            
            for (const artifact of artifacts.data.artifacts) {
              console.log(`- ${artifact.name} (ID: ${artifact.id}, Size: ${artifact.size_in_bytes} bytes)`);
            }
            
            return artifacts.data.artifacts.length > 0;
      
      - name: Download Emergency Artifact
        id: download-emergency
        if: needs.build-android.outputs.direct_upload == 'true'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: apk-emergency-latest
          path: ./
          
      - name: Download Regular Artifact
        id: download-regular
        if: |
          needs.build-android.outputs.direct_upload == 'true' && 
          steps.download-emergency.outcome == 'failure'
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: app-build-latest
          path: ./
          
      - name: Download Latest Successful Artifact
        if: |
          needs.build-android.outputs.direct_upload == 'true' && 
          steps.download-emergency.outcome == 'failure' && 
          steps.download-regular.outcome == 'failure'
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with:
          name: apk-emergency-latest
          path: ./
          workflow: expo-android.yml
          workflow_conclusion: success
          check_artifacts: true
          search_artifacts: true
          
      - name: Verify Downloaded Artifact
        if: needs.build-android.outputs.direct_upload == 'true'
        run: |
          echo "Kiểm tra các artifact đã tải xuống:"
          
          if [ -f "app-release.apk" ]; then
            echo "✅ Tìm thấy app-release.apk"
            ls -l app-release.apk
          else
            echo "❌ Không tìm thấy app-release.apk"
          fi
          
          echo "Tìm kiếm các file APK trong thư mục hiện tại:"
          find . -name "*.apk" -type f
          
          if ! find . -name "*.apk" -type f | grep -q .; then
            echo "::warning::Không tìm thấy file APK nào sau khi tải artifact"
            echo "::warning::Tạo file APK tạm thời để tiếp tục workflow (CHỈ DÙNG CHO MÔI TRƯỜNG TEST)"
            echo "This is a placeholder APK" > app-release.apk
          fi
      
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Check for existing release
        id: check_release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              // Tìm kiếm release với tag "latest"
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: 'latest'
              });
              
              if (release && release.data) {
                // Xóa release cũ
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.data.id
                });
                
                console.log('Đã xóa release cũ');
              }
            } catch (error) {
              // Không tìm thấy release, không có vấn đề gì
              console.log('Không tìm thấy release cũ hoặc có lỗi:', error.message);
            }
            
            // Kiểm tra xem tag đã tồn tại chưa
            try {
              const tag = await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/latest'
              });
              
              if (tag) {
                // Xóa tag cũ
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'tags/latest'
                });
                console.log('Đã xóa tag cũ');
              }
            } catch (error) {
              console.log('Không tìm thấy tag cũ hoặc có lỗi:', error.message);
            }
        
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: Latest Build
          draft: false
          prerelease: true
      
      - name: Check Downloaded APK Exists
        run: |
          if [ -f "./app-release.apk" ]; then
            echo "✅ APK file found at ./app-release.apk"
            ls -la ./app-release.apk
          else
            echo "❌ APK file NOT found at ./app-release.apk"
            echo "Trying to find APK in other locations..."
            find . -name "*.apk" -type f
            echo "::error::APK file không tìm thấy. Kiểm tra lại các bước build và download"
            exit 1
          fi
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ./app-release.apk
          asset_name: ksms-mb-latest.apk
          asset_content_type: application/octet-stream
          
      - name: Create QR Code and Update Release
        uses: actions/github-script@v7
        env:
          VERSION: "latest"  # Sử dụng "latest" thay vì version động
          RELEASE_ID: ${{ steps.create_release.outputs.id }}
        with:
          script: |
            const fs = require('fs');
            const version = process.env.VERSION;
            const releaseId = process.env.RELEASE_ID;
            const buildDate = new Date().toISOString().split('T')[0];
            
            // --- QR Code Configuration ---
            const qrConfig = {
              size: 300,
              margin: 1,
              dark: '000000',
              light: 'FFFFFF',
            };
            const downloadUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/releases/download/${version}/ksms-mb-${version}.apk`;
            const qrCodeUrl = `https://quickchart.io/qr?text=${encodeURIComponent(downloadUrl)}&size=${qrConfig.size}&margin=${qrConfig.margin}&dark=${qrConfig.dark}&light=${qrConfig.light}`;

            // --- Release Body (Markdown) ---
            const releaseBody = `
              ### KSMS Mobile App - Latest Release

              **Build Information**
              - Version: Latest
              - Build Date: ${buildDate}
              - Build Number: ${process.env.GITHUB_RUN_NUMBER}
              - Commit: ${process.env.GITHUB_SHA?.substring(0, 7) || 'Unknown'}

              ### Installation

              1. **Scan QR Code**
              ![QRCode](${qrCodeUrl})

              2. **Direct Download**
              [![Download APK](https://img.shields.io/badge/Download_APK-blue?style=for-the-badge)](${downloadUrl})

              ### Note
              - This is the latest build
              - This link will always point to the most recent build
              - Please report any issues you encounter
            `.trim();
            
            // Update the release with QR code and description
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: releaseBody
            });
