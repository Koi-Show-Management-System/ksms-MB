name: Docker Android Build

permissions:
  contents: write
  packages: write
  actions: write

on:
  push:
    branches: [main, development]
    paths:
      - 'app/**'
      - 'assets/**'
      - 'package.json'
      - 'yarn.lock'
      - 'app.json'
      - 'eas.json'
      - 'babel.config.js'
      - 'metro.config.js'
      - 'Dockerfile'
      - 'docker-compose.yml'
      - '.github/workflows/docker-android-build.yml'
  pull_request:
    branches: [main, development]
  workflow_dispatch:
    inputs:
      build_profile:
        description: 'Build profile (development, preview, production)'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - preview
          - production

jobs:
  build-android-apk:
    name: Build Android APK
    runs-on: self-hosted
    env:
      ANDROID_HOME: /opt/android/sdk
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_ALIAS: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      ANDROID_SDK_ROOT: /opt/android-sdk
      BUILD_PROFILE: production
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify Docker installation
        run: |
          docker --version
          docker-compose --version || true

      - name: Install Docker Compose
        run: |
          # Tải Docker Compose
          echo "Đang tải Docker Compose..."
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          
          # Cấp quyền thực thi
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S chmod +x /usr/local/bin/docker-compose
          
          # Kiểm tra phiên bản
          docker-compose --version

      - name: Check Docker service
        run: |
          echo "Kiểm tra trạng thái Docker service..."
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S systemctl status docker || true
          
          # Khởi động Docker service nếu chưa chạy
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S systemctl start docker
          
          # Đợi Docker service khởi động
          sleep 5
          
          # Kiểm tra lại trạng thái
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S systemctl status docker

      - name: Install required tools
        run: |
          echo "Cài đặt các công cụ cần thiết..."
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S apt-get update
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S apt-get install -y unzip wget curl

      - name: Setup Android SDK
        run: |
          echo "Cài đặt và thiết lập Android SDK..."
          
          # Tạo thư mục cho Android SDK
          ANDROID_SDK_ROOT="/opt/android-sdk"
          if [ ! -d "$ANDROID_SDK_ROOT" ]; then
            echo '${{ secrets.SSH_PASSWORD }}' | sudo -S mkdir -p $ANDROID_SDK_ROOT
            echo '${{ secrets.SSH_PASSWORD }}' | sudo -S chown $USER:$USER $ANDROID_SDK_ROOT
          fi
          
          # Thiết lập biến môi trường
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          
          # Tải Command Line Tools nếu chưa tồn tại
          CMDLINE_TOOLS_ROOT="$ANDROID_SDK_ROOT/cmdline-tools"
          if [ ! -d "$CMDLINE_TOOLS_ROOT/latest" ]; then
            mkdir -p $CMDLINE_TOOLS_ROOT
            
            # Tải Command Line Tools mới nhất
            echo "Đang tải Android Command Line Tools..."
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O cmdline-tools.zip
            unzip -q cmdline-tools.zip -d $CMDLINE_TOOLS_ROOT
            mv $CMDLINE_TOOLS_ROOT/cmdline-tools $CMDLINE_TOOLS_ROOT/latest
            rm cmdline-tools.zip
          fi
          
          # Thêm vào PATH
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          
          # Chấp nhận licenses
          yes | $CMDLINE_TOOLS_ROOT/latest/bin/sdkmanager --licenses || true
          
          # Cài đặt các thành phần cần thiết
          echo "Cài đặt các thành phần Android SDK cần thiết..."
          $CMDLINE_TOOLS_ROOT/latest/bin/sdkmanager "platform-tools" "platforms;android-31" "build-tools;31.0.0" "extras;android;m2repository" "extras;google;m2repository"
          
          # Hiển thị thông tin
          echo "Android SDK đã được thiết lập tại $ANDROID_SDK_ROOT"
          $CMDLINE_TOOLS_ROOT/latest/bin/sdkmanager --list_installed | grep -E 'build-tools|platforms'

      - name: Set build profile
        id: set-profile
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "BUILD_PROFILE=${{ github.event.inputs.build_profile }}" >> $GITHUB_ENV
          else
            echo "BUILD_PROFILE=production" >> $GITHUB_ENV
          fi

      - name: Create output directory
        run: |
          echo "Tạo thư mục output..."
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S mkdir -p build-output
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S chown -R $USER:$USER build-output

      - name: Setup Android Keystore
        if: env.BUILD_PROFILE == 'production' && github.ref == 'refs/heads/main'
        run: |
          if [ -n "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            echo "Setting up keystore for signing..."
            KEYSTORE_PATH=$GITHUB_WORKSPACE/android/app/release.keystore
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > $KEYSTORE_PATH
            echo "ANDROID_KEYSTORE_PATH=$KEYSTORE_PATH" >> $GITHUB_ENV
            echo "ANDROID_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
            echo "ANDROID_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}" >> $GITHUB_ENV
            echo "ANDROID_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}" >> $GITHUB_ENV
            echo "KEYSTORE_READY=true" >> $GITHUB_ENV
          else
            echo "No keystore provided, will use debug signing"
            echo "KEYSTORE_READY=false" >> $GITHUB_ENV
          fi

      - name: Setup Google Play Service Account
        if: env.BUILD_PROFILE == 'production' && github.ref == 'refs/heads/main'
        run: |
          if [ -n "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64 }}" ]; then
            echo "Setting up Google Play service account..."
            SERVICE_ACCOUNT_PATH=$GITHUB_WORKSPACE/google-play-service-account.json
            echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64 }}" | base64 -d > $SERVICE_ACCOUNT_PATH
            echo "GOOGLE_PLAY_SERVICE_ACCOUNT_PATH=$SERVICE_ACCOUNT_PATH" >> $GITHUB_ENV
            echo "GOOGLE_PLAY_READY=true" >> $GITHUB_ENV
          else
            echo "No Google Play service account provided"
            echo "GOOGLE_PLAY_READY=false" >> $GITHUB_ENV
          fi

      - name: Check Expo Token
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "EXPO_TOKEN không được cấu hình trong GitHub Secrets"
            exit 1
          fi
          echo "EXPO_TOKEN đã được cấu hình"
          # Kiểm tra token trong container nhưng không làm ảnh hưởng đến command chính
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S docker-compose run --rm -e BUILD_PROFILE=check-token android-builder bash -c 'echo "EXPO_TOKEN is set: $([ -n "$EXPO_TOKEN" ] && echo "yes" || echo "no")"'

      - name: Build APK
        run: |
          echo "Bắt đầu build APK..."
          # Đảm bảo build profile được đặt đúng
          export BUILD_PROFILE="${{ env.BUILD_PROFILE }}"
          echo "Building with profile: $BUILD_PROFILE"
          
          # Build APK
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S docker-compose run android-builder
          
          # Kiểm tra kết quả build
          if [ -f "build-output/*.apk" ]; then
            echo "Build APK thành công!"
            echo "APK_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Không tìm thấy file APK sau khi build!"
            echo "APK_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Store APK on server
        if: env.APK_EXISTS == 'true'
        run: |
          # Tạo thư mục lưu trữ APK trên server
          DEPLOY_DIR="/var/www/html/apk-downloads"
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S mkdir -p $DEPLOY_DIR
          
          # Tạo thư mục cho build hiện tại
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          BUILD_DIR="$DEPLOY_DIR/${{ env.BUILD_PROFILE }}_${TIMESTAMP}"
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S mkdir -p $BUILD_DIR
          
          # Copy APK vào thư mục triển khai
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S cp build-output/*.apk $BUILD_DIR/
          
          # Tạo symbolic link đến build mới nhất
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S ln -sf $BUILD_DIR $DEPLOY_DIR/latest_${{ env.BUILD_PROFILE }}
          
          # Tạo file thông tin về build
          echo "Build Info:" | echo '${{ secrets.SSH_PASSWORD }}' | sudo -S tee $BUILD_DIR/build_info.txt
          echo "Profile: ${{ env.BUILD_PROFILE }}" | echo '${{ secrets.SSH_PASSWORD }}' | sudo -S tee -a $BUILD_DIR/build_info.txt
          echo "Commit: ${{ github.sha }}" | echo '${{ secrets.SSH_PASSWORD }}' | sudo -S tee -a $BUILD_DIR/build_info.txt
          echo "Build Date: $(date)" | echo '${{ secrets.SSH_PASSWORD }}' | sudo -S tee -a $BUILD_DIR/build_info.txt
          echo "Build Number: ${{ github.run_number }}" | echo '${{ secrets.SSH_PASSWORD }}' | sudo -S tee -a $BUILD_DIR/build_info.txt
          
          # Phân quyền để web server có thể phục vụ
          echo '${{ secrets.SSH_PASSWORD }}' | sudo -S chmod -R 755 $DEPLOY_DIR
          
          # In ra đường dẫn tải xuống
          APK_NAME=$(find build-output -name "*.apk" -type f | head -n 1 | xargs basename)
          echo "APK available at: http://your-server-address/apk-downloads/latest_${{ env.BUILD_PROFILE }}/$APK_NAME"
          
          # Cập nhật file index.html cho thư mục download
          cat << EOF | echo '${{ secrets.SSH_PASSWORD }}' | sudo -S tee $DEPLOY_DIR/index.html
          <!DOCTYPE html>
          <html>
          <head>
              <title>APK Downloads</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
                  h1 { color: #333; }
                  .profile { margin-bottom: 30px; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                  .profile h2 { margin-top: 0; color: #0066cc; }
                  .download-btn { display: inline-block; background-color: #4CAF50; color: white; padding: 10px 20px; 
                                  text-decoration: none; border-radius: 4px; margin-top: 10px; }
                  .timestamp { color: #666; font-size: 0.8em; margin-top: 10px; }
              </style>
          </head>
          <body>
              <h1>APK Downloads</h1>
              
              <div class="profile">
                  <h2>Production Build</h2>
                  <p>Latest stable version of the application.</p>
                  <a href="latest_production/" class="download-btn">Download Production APK</a>
                  <p class="timestamp">Last updated: $(date)</p>
              </div>
              
              <div class="profile">
                  <h2>Preview Build</h2>
                  <p>Preview version with upcoming features.</p>
                  <a href="latest_preview/" class="download-btn">Download Preview APK</a>
                  <p class="timestamp">Last updated: $(date)</p>
              </div>
              
              <div class="profile">
                  <h2>Development Build</h2>
                  <p>Latest development build with newest features.</p>
                  <a href="latest_development/" class="download-btn">Download Development APK</a>
                  <p class="timestamp">Last updated: $(date)</p>
              </div>
          </body>
          </html>
          EOF
