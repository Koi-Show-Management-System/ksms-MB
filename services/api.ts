// services/api.ts
import axios, { AxiosError, InternalAxiosRequestConfig } from 'axios'; // Import th√™m AxiosError v√† InternalAxiosRequestConfig
import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';
import Toast from 'react-native-toast-message';
import { navigateToAuth } from '@/utils/navigationService'; // ƒê∆∞·ªùng d·∫´n c√≥ th·ªÉ c·∫ßn ƒëi·ªÅu ch·ªânh

const api = axios.create({
  baseURL: 'https://api.ksms.news',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'GET,PUT,POST,DELETE,PATCH,OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type, Authorization'
  },
  withCredentials: false
});

// Add request interceptor to add auth token
api.interceptors.request.use(
  async (config: InternalAxiosRequestConfig) => { // Th√™m type cho config
    try {
      const token = await AsyncStorage.getItem('userToken');
      // Log token (partially) k√®m URL ƒë·ªÉ r√µ r√†ng h∆°n
      console.log(`[Interceptor] Token from AsyncStorage for ${config.url}:`, token ? token.substring(0, 10) + '...' : 'null');
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log(`[Interceptor] Authorization header SET for ${config.url}.`);
      } else {
        console.log(`[Interceptor] Authorization header NOT SET for ${config.url} (no token).`);
      }
      // Th√™m debug log trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
      if (__DEV__) {
        const method = config.method?.toUpperCase() || 'UNKNOWN';
        const fullUrl = `${config.baseURL || ''}${config.url || ''}`; // ƒê·∫£m b·∫£o baseURL v√† url ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
        console.log(`üöÄ API REQUEST: [${method}] ${fullUrl}`);
        // Log TO√ÄN B·ªò headers ngay tr∆∞·ªõc khi return config
        console.log(`   Headers being sent for ${config.url}:`, JSON.stringify(config.headers));
        
        if (config.data) {
          console.log('   Request data:', JSON.stringify(config.data).substring(0, 500) + (JSON.stringify(config.data).length > 500 ? '...' : ''));
        }
        
        if (config.params) {
          console.log('   Request params:', config.params);
        }
      }
      
      return config;
    } catch (error) {
      if (__DEV__) {
        console.error(`[Interceptor] Error in request interceptor for ${config.url}:`, error);
      }
      // ƒê·∫£m b·∫£o promise b·ªã reject ƒë√∫ng c√°ch
      return Promise.reject(error);
      return Promise.reject(error);
    }
  },
  (error) => {
    // L·ªói n√†y x·∫£y ra tr∆∞·ªõc khi request ƒë∆∞·ª£c g·ª≠i (v√≠ d·ª•: l·ªói setup config)
    if (__DEV__) {
      console.error('[Interceptor] Request setup error:', error);
    }
    return Promise.reject(error);
  }
);

// Add response interceptor to handle errors
api.interceptors.response.use(
  (response) => {
    // Th√™m debug log trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn (gi·ªØ nguy√™n)
    if (__DEV__) {
      const method = response.config.method?.toUpperCase() || 'UNKNOWN';
      const url = response.config.url || 'UNKNOWN';
      console.log(`‚úÖ API RESPONSE: [${method}] ${url} - Status: ${response.status}`);
      const responseDataLog = JSON.stringify(response.data)?.substring(0, 500) + (JSON.stringify(response.data)?.length > 500 ? '...' : '');
      console.log('Response data:', responseDataLog);
    }

    // --- Hi·ªÉn th·ªã Toast cho th√¥ng b√°o th√†nh c√¥ng ---
    const responseData = response.data as { message?: string; [key: string]: any }; // Type assertion
    const successMessage = responseData?.message;

    // Ch·ªâ hi·ªÉn th·ªã toast n·∫øu c√≥ message v√† l√† string kh√¥ng r·ªóng
    if (successMessage && typeof successMessage === 'string' && successMessage.trim().length > 0) {
      // X√°c ƒë·ªãnh c√°c ph∆∞∆°ng th·ª©c kh√¥ng n√™n hi·ªÉn th·ªã toast th√†nh c√¥ng (v√≠ d·ª•: GET)
      const method = response.config.method?.toUpperCase();
      const methodsToShowSuccess = ['POST', 'PUT', 'PATCH', 'DELETE']; // Ch·ªâ hi·ªÉn th·ªã cho c√°c ph∆∞∆°ng th·ª©c thay ƒë·ªïi d·ªØ li·ªáu

      if (method && methodsToShowSuccess.includes(method)) {
          Toast.show({
            type: 'success', // Lo·∫°i toast th√†nh c√¥ng
            text1: 'Th√†nh c√¥ng',
            text2: successMessage,
            visibilityTime: 3000, // Th·ªùi gian hi·ªÉn th·ªã ng·∫Øn h∆°n cho th√†nh c√¥ng
            autoHide: true,
          });
      }
    }
    // --- K·∫øt th√∫c ph·∫ßn hi·ªÉn th·ªã Toast th√†nh c√¥ng ---

    return response; // Lu√¥n tr·∫£ v·ªÅ response g·ªëc
  },
  async (error: AxiosError) => { // Th√™m type AxiosError
    // Log chi ti·∫øt v·ªÅ l·ªói trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn (gi·ªØ nguy√™n)
    if (__DEV__) {
      const method = error.config?.method?.toUpperCase() || 'UNKNOWN';
      const url = error.config?.url || 'UNKNOWN';
      console.error(`‚ùå API ERROR: [${method}] ${url}`);

      if (error.response) {
        console.error('Response error:', {
          status: error.response.status,
          statusText: error.response.statusText,
          // Log data c·∫©n th·∫≠n h∆°n, c√≥ th·ªÉ l√† object l·ªõn
          data: JSON.stringify(error.response.data)?.substring(0, 500) + (JSON.stringify(error.response.data)?.length > 500 ? '...' : ''),
          headers: error.response.headers
        });
      } else if (error.request) {
        console.error('No response received:', {
          // request object c√≥ th·ªÉ r·∫•t l·ªõn, log c·∫©n th·∫≠n
          requestInfo: `Method: ${error.request._method}, URL: ${error.request._url}`
        });
      } else {
        console.error('Request setup error:', error.message);
      }
    }

    // --- Ph·∫ßn hi·ªÉn th·ªã Toast v√† ƒëi·ªÅu h∆∞·ªõng ---
    if (error.response) {
      const responseData = error.response.data as { Error?: string; [key: string]: any }; // Type assertion an to√†n h∆°n
      const errorMessage = responseData?.Error;
      const statusCode = error.response.status;

      if (statusCode === 401) {
        // X·ª≠ l√Ω l·ªói 401 (Unauthorized)
        await AsyncStorage.removeItem('userToken');
        Toast.show({
          type: 'error',
          text1: 'Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n',
          text2: 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.',
          visibilityTime: 4000,
          autoHide: true,
          // G·ªçi ƒëi·ªÅu h∆∞·ªõng SAU KHI toast ·∫©n ƒëi ƒë·ªÉ tr√°nh gi·∫≠t m√†n h√¨nh
          onHide: () => navigateToAuth(),
        });
      } else if (errorMessage && typeof errorMessage === 'string') {
        // C√°c l·ªói server kh√°c c√≥ message c·ª• th·ªÉ
        Toast.show({
          type: 'error',
          text1: 'Th√¥ng b√°o', // B·ªè statusCode kh·ªèi ti√™u ƒë·ªÅ
          text2: errorMessage,
          visibilityTime: 4000,
          autoHide: true,
        });
      } else {
        // L·ªói server chung (kh√¥ng c√≥ message ho·∫∑c kh√¥ng ph·∫£i string)
        Toast.show({
          type: 'error',
          text1: 'L·ªói m√°y ch·ªß', // B·ªè statusCode kh·ªèi ti√™u ƒë·ªÅ
          text2: 'ƒê√£ c√≥ l·ªói x·∫£y ra ph√≠a m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.',
          visibilityTime: 4000,
          autoHide: true,
        });
      }
    } else if (error.request) {
      // L·ªói m·∫°ng ho·∫∑c kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
      Toast.show({
        type: 'error',
        text1: 'L·ªói k·∫øt n·ªëi',
        text2: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
        visibilityTime: 4000,
        autoHide: true,
      });
    } else {
      // L·ªói khi thi·∫øt l·∫≠p request
      Toast.show({
        type: 'error',
        text1: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
        text2: 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh g·ª≠i y√™u c·∫ßu.',
        visibilityTime: 4000,
        autoHide: true,
      });
    }
    // --- K·∫øt th√∫c ph·∫ßn hi·ªÉn th·ªã Toast v√† ƒëi·ªÅu h∆∞·ªõng ---

    return Promise.reject(error); // Gi·ªØ nguy√™n ƒë·ªÉ x·ª≠ l√Ω l·ªói ti·∫øp theo n·∫øu c·∫ßn
  }
);

export default api;